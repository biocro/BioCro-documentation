[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 BioCro authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/about_pkgdown_documentation.html","id":null,"dir":"","previous_headings":"","what":"About this documentation","title":"About this documentation","text":"document generated version BioCro specified follows: Commit Hash: b8ed268 Commit Date: Fri, 7 Mar 2025 13:33:02 -0600 Branch: - Generation Date Time: Fri Mar 7 22:15:11 UTC 2025","code":""},{"path":"/articles/BioCro.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"BioCro","text":"BioCro model predicts plant growth time given crop-specific parameters environmental data input. uses models key physiological biophysical processes underlying plant growth, previously used predicting biomass yield leaf area index switchgrass miscanthus. 2022, BioCro reorganized take truly modular approach modeling new soybean model developed.","code":""},{"path":"/articles/BioCro.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An example","title":"BioCro","text":"run_biocro() function accepts initial values, parameters, climate variables, sets modules run. returns results data frame.  parameters modules soybean (Glycine max), miscanthus (Miscanthus x giganteus), willow (Saliceae salix).","code":"library(BioCro) library(lattice)  result <- with(soybean, {run_biocro(   initial_values,   parameters,   soybean_weather$'2002',   direct_modules,   differential_modules,   ode_solver )})  xyplot(Stem + Leaf ~ TTc, data = result, type='l', auto = TRUE)"},{"path":"/articles/BioCro.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"BioCro","text":"best place get started BioCro public BioCro Documentation web site, includes following: Installation instructions “Practical Guide BioCro” articles “Articles” dropdown menu Documentation C++ code, including notes biological models used BioCro, “C++ Library” dropdown menu Documentation BioCro developers maintainers “Developer’s Manual” dropdown menu also separate page documents quantities used Standard BioCro Module Library.","code":""},{"path":"/articles/BioCro.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"BioCro","text":"BioCro R package licensed MIT license, BioCro C++ framework licensed version 3 greater GNU Lesser General Public License (LGPL). scheme allows people freely develop models use (public private) MIT license, changes framework assembles solves models must make source code changes available users LGPL. See LICENSE.note details.","code":""},{"path":"/articles/web_only/BioCro-II_Paper--Section-1.1-example.html","id":"introduction","dir":"Articles > Web_only","previous_headings":"","what":"Introduction","title":"BioCro II Paper: Section 1.1 Example","text":"demonstration example discussed Section 1.1 Appendix 1 BioCro II paper (Lochocki et al. 2022). corrections clarifications exposition given paper given comments .","code":""},{"path":"/articles/web_only/BioCro-II_Paper--Section-1.1-example.html","id":"the-code","dir":"Articles > Web_only","previous_headings":"","what":"The Code","title":"BioCro II Paper: Section 1.1 Example","text":"","code":"library(BioCro) library(lattice) library(knitr) # for kable(), which yields nicer-looking tables  ## customized version of kable with defined options: columns_to_print <- c('time', 'Q', 'mass_gain', 'Root', 'Leaf') show_row_number <- FALSE format <- list(scientific = FALSE, digits = 7) cable <- function(x, ...) {    kable(x[, columns_to_print],          row.names = show_row_number,          format.args = format,          ...) }  ## Set plotting character globally trellis.par.set(\"plot.symbol\", list(pch = '.'))  ################################################################################  parameters <- list(     alpha_rue = 0.07, # kg / mol     SLA = 25,         # m^2 / kg     C_conv = 0.03,    # kg / mol     f_leaf = 0.2,     # kg / kg     f_root = 0.8,     # kg / kg     timestep = 1      # s )  initial_values <- list(     Leaf = 1, # kg     Root = 1  # kg )  Q <- function(time) sin(time/3600/12 * pi) * 2000e-6 # mol / m^2 / s  times <- 0:(3600 * 12) # seconds  light_intensity <- data.frame(     time = times,     Q = Q(times) )  result <- run_biocro(     initial_values,     parameters,     light_intensity,     'BioCro:example_model_mass_gain',     'BioCro:example_model_partitioning' )  xyplot(Q ~ time, data = result, xlab = \"time (s)\", ylab = \"Q (mol / m^2 / s)\")  xyplot(Leaf ~ time, data = result, xlab = \"time (s)\", ylab = \"Leaf (kg)\")"},{"path":[]},{"path":"/articles/web_only/BioCro-II_Paper--Section-1.1-example.html","id":"the-formula-for-the-driver","dir":"Articles > Web_only","previous_headings":"The Code > A few comments","what":"The formula for the driver","title":"BioCro II Paper: Section 1.1 Example","text":"somewhat plausible mechanistic model photosynthetic photon flux density Q due sun give roughly proportional sine angle sun makes horizon. Assuming 12 hours daylight, sun passing directly overhead (condition approximately holds equator equinox), angle (measured radians) approximately time/3600/12 * pi, time number seconds elapsed since sunrise. (, angle greater pi/2 taken angle position sun measured position sunrise; value thus takes maximum value pi sunset.) Assuming maxumum flux density 2000e-6 mol / m^2 /s (attained solar noon sine 1) yields function given Q. Note instead supplying Q driver, instead written direct module computed Q time day. latter , example, driver.","code":""},{"path":"/articles/web_only/BioCro-II_Paper--Section-1.1-example.html","id":"the-timestep-parameter","dir":"Articles > Web_only","previous_headings":"The Code > A few comments","what":"The timestep parameter","title":"BioCro II Paper: Section 1.1 Example","text":"Note timestep value given parameters seconds. also note almost differential modules BioCro library assume timestep values given hours! timestep value given seconds rather hours, two important things must kept mind: differential modules used simulation must assume timestep value given seconds. Another way saying outputs differential modules used represent rate change output quantities per second. almost cases, module time input used. (See discussion.) precepts apply, mutatis mutandi, timestep units one may wish use. always, difference time row n drivers dataframe row n + 1 immediately follows equal “timestep” (whatever units timestep given). BioCro check case, raise error .","code":""},{"path":"/articles/web_only/BioCro-II_Paper--Section-1.1-example.html","id":"a-modification-24-hour-simulation","dir":"Articles > Web_only","previous_headings":"","what":"A modification: 24 hour simulation","title":"BioCro II Paper: Section 1.1 Example","text":"Although paper stated “Light intensity given table values every second 24-h period,”, period actually 12 hours (time ranges 0 3600 × 12 seconds = 12 hours). noted , purposes example, may assumed time ranges sunrise sunset 12-hour day “time” represents number seconds elapsed since sunrise. Alternatively, assumed time range 24-hour period starting ending solar midnight, Q zero sunrise sunset. entails slight modification defining equations: (“− 6” adjusts phase sine function positive values correspond daylight hours, assumed begin 6 .m. solar time.) 24-hour version example look. rows result table printed significant portions day: beginning, just midnight, dark mass accumulation; dawn, rate mass accumulation first becomes non-zero; noon, flux Q highest; dusk, rate mass accumulation drops zero; end simulation, final leaf root mass known. Note tabular result showed omits columns result, ncalls, particular interest . values time column interpreted number elapsed seconds solar midnight (number (fractional) hours elapsed since midnight start January 1, correct interpretation “normal” BioCro simulation). following graphs, changed labeling x axis time shown hours rather seconds.","code":"times <- 0:(3600 * 24) # seconds  Q <- function(time) pmax(0, sin((time/3600 - 6)/12 * pi) * 2000e-6) # mol / m^2 / s times <- 0:(3600 * 24) # seconds  Q <- function(time) {     pmax(0, sin((time/3600 - 6)/12 * pi) * 2000e-6) # mol / m^2 / s }  light_intensity <- data.frame(     time = times,     Q = Q(times) )  result <- run_biocro(     initial_values,     parameters,     light_intensity,     'BioCro:example_model_mass_gain',     'BioCro:example_model_partitioning' )  ## cable = customized version of kable (see above) ## kable = (nicely-formatted) knitr table cable(result[1:4,]) # beginning cable(result[seq(21591, 21661, 10),]) # around dawn cable(result[43199:43203,]) # around mid day cable(result[seq(64741, 64811, 10),]) # around dusk cable(result[86398:86401,]) # end xyplot(Q ~ time / 3600, data = result, xlim = c(0, 24), xlab = \"time (in hours)\", ylab = \"Q (mol / m^2 / s)\")  xyplot(Leaf ~ time / 3600, data = result, xlim = c(0, 24), xlab = \"time (in hours)\", ylab = \"Leaf (kg)\")"},{"path":"/articles/web_only/BioCro-II_Paper--Section-1.1-example.html","id":"modules-with-time-as-an-input","dir":"Articles > Web_only","previous_headings":"","what":"Modules with time as an input","title":"BioCro II Paper: Section 1.1 Example","text":"usual assumption BioCro’s crop growth models time quantity represents time, hours, elapsed beginning year, number seconds elapsed start simulation. follows, , way using time variable previous examples inconsistent usual interpretation time two respects: First, units seconds rather days. Second, time represented amount time elapsed beginning simulation rather “absolute” time, , time value specifying specific time day specific day year (date time calendar). Thus, direct modules rely usual meaning time, BioCro:format_time, used part system considered examples . Yet, issue using time variable unconventional way, long know . fact, BioCro module libraries models free use time convention.","code":""},{"path":[]},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Avoiding Pitfalls When Using the FvCB Model","text":"Farquhar-von-Caemmerer-Berry (FvCB) model C3 photosynthesis first presented Farquhar et al. (1980), since initial publication, become one important models understanding photosynthetic response plants key environmental variables incident light, CO2, temperature. Many researchers familiar model contex fitting experimentally measured CO2 response curves, certain simplifying assumptions can reasonably applied model. However, assumptions reasonable using model wider range conditions usually encountered gas exchange measurements. goal document identify several possible pitfalls associated assumptions explain avoid using FvCB model.","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"sec:centraleq","dir":"Articles > Web_only","previous_headings":"","what":"The Central FvCB Equation","title":"Avoiding Pitfalls When Using the FvCB Model","text":"FvCB model rooted biochemical understanding photosynthetic process, especially carboxylation (oxygenation) RuBP enzyme Rubisco. core, predicts net CO2 assimilation rate (\\(A_n\\)) values several key variables. initial equation \\(A_n\\) can developed following considerations: One carboxylation RuBP assimilates one molecule CO2. Two oxygenations RuBP produces hazardous byproducts require release one molecule CO2 neutralize. (Oxygenation RuBP often referred photorespiration.) Mitochondrial respiration also releases CO2 molecules. Putting together, can write initial equation net assimilation rate: \\[\\begin{equation} A_n = V_c - 0.5 \\cdot V_o - R_d, \\tag{2.1} \\end{equation}\\] \\(V_c\\) RuBP carboxylation rate, \\(V_o\\) RuBP oxygenation rate, \\(R_d\\) mitochondrial respiration rate. written, \\(V_c\\), \\(V_o\\), \\(R_d\\) non-negative rates, typically units \\(\\mu\\)mol m\\(^{-2}\\) s\\(^{-1}\\). first two terms equation (\\(V_c - 0.5 \\cdot V_o\\)) represent contribution photosynthesis (Rubisco) net CO2 assimilation, remaining term (\\(-R_d\\)) result mitochondrial respiration, separate process. current form, equation easy interpret use. modifications can use improve . One change introduce \\(\\phi\\), ratio RuBP oxygenation carboxylation: \\(\\phi = V_o / V_c\\). Now can rewrite Equation (2.1) follows: \\[\\begin{equation} A_n = V_c \\cdot \\left( 1 - 0.5 \\cdot \\phi \\right) - R_d. \\tag{2.2} \\end{equation}\\] version equation makes clear \\(\\phi\\) plays key role determining whether RuBP carboxylation able outweigh oxygenation; words, determines whether photosynthetic contribution net CO2 assimilation rate positive negative. \\(1 - 0.5 \\cdot \\phi < 0\\), oxygenation consumes carbon carboxylation produces; \\(1 - 0.5 \\cdot \\phi > 0\\), opposite true. crossover point carboxylation oxygenation exactly cancel occurs \\(1 - 0.5 \\cdot \\phi = 0\\). can shown \\(\\phi\\) depends relative specificity Rubisco CO2 versus O2 (\\(S_{c/o}\\)), partial pressure CO2 vicinity Rubisco (\\(C\\)), partial pressure O2 vicinity Rubisco (\\(O\\)): \\[\\begin{equation} \\phi = \\frac{1}{S_{c/o}} \\cdot \\frac{O}{C}. \\tag{2.3} \\end{equation}\\] (See, example, Equation 2.16 von Caemmerer (2000) surrounding discussion.) Equation (2.3) tells us amount CO2 near Rubisco increases, Rubisco’s specificity CO2 increases, \\(\\phi\\) decreases hence oxygenation rate also decreases. makes sense intuitive level. also helps clarify criteria photosynthesis become net producer assimilated carbon. One immediate conclusion Rubisco specificity oxygen levels generally constant particular chloroplast, reasonable way change \\(\\phi\\) change \\(C\\). can still learn . already seen crossover occurs \\(1 - 0.5 \\cdot \\phi = 0\\) , equivalently, \\(\\phi = 2\\). Now, can rewrite condition using (2.3): \\[\\begin{equation} \\phi = 2 \\\\ \\rightarrow \\frac{1}{S_{c/o}} \\cdot \\frac{O}{C} = 2 \\\\ \\rightarrow C = \\frac{O}{2 \\cdot S_{c/o}}. \\end{equation}\\] words, photosynthesis net producer carbon whenever \\(C\\) exceeds special value called \\(\\Gamma^*\\) defined : \\[\\begin{equation} \\Gamma^* = \\frac{O}{2 \\cdot S_{c/o}}. \\tag{2.4} \\end{equation}\\] \\(\\Gamma^*\\) often referred “CO2 compensation point absence mitochondrial respiration.” (general, term “CO2 compensation point” refers value \\(C\\) \\(A_n = 0\\).) Note since atmospheric oxygen levels fairly constant, \\(O\\) rarely changes conditions, \\(\\Gamma^*\\) largely property Rubisco; specifically, depends primarily \\(S_{c/o}\\). (major exception \\(O\\) artificially decreased gas exchange measurements order reduce \\(V_o\\).) new concept, can use Equations (2.3) (2.4) rewrite Equation (2.2) follows: \\[\\begin{equation} A_n = V_c \\cdot (1 - \\Gamma^* / C) - R_d \\tag{2.5} \\end{equation}\\] equation contains great deal useful information, refer central equation FvCB model. (terminology, standard name equation.) can found many notable descriptions FvCB model, : Equation 16.57 Farquhar von Caemmerer (1982). Equation 1 Kirschbaum Farquhar (1984). Equation 2.19 von Caemmerer (2000). Equation A6 von Caemmerer (2013). (big exception original FvCB paper (Farquhar et al. 1980), contain equation!) key piece information can learned equation RuBP carboxylation rate \\(V_c\\) can never negative, contribution photosynthesis net assimilation rate (\\(V_c \\cdot(1 - \\Gamma^* / C)\\)) can negative; occur whenever \\(V_c > 0\\) \\(C < \\Gamma^*\\). rest FvCB model consists method calculating \\(V_c\\); discussed following sections.","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"choosing-a-carboxylation-rate","dir":"Articles > Web_only","previous_headings":"","what":"Choosing a Carboxylation Rate","title":"Avoiding Pitfalls When Using the FvCB Model","text":"original FvCB model, two scenarios considered determining RuBP carboxylation rate \\(V_c\\): plenty RuBP available Rubisco act upon, carboxylation rate said RuBP-saturated (Rubisco-limited). case, common denote carboxylation rate \\(W_c\\). equation \\(W_c\\) derivation can found many places, Equation 1.9 von Caemmerer (2000) surrounding discussion. Following carboxylation oxygenation, RuBP molecule must “regenerated,” , returned original state ready another carboxylation oxygenation. RuBP regeneration rate slow, may impose new maximum carboxylation rate, said RuBP-regeneration-limited. case, common denote carboxylation rate \\(W_j\\). equation \\(W_j\\) derivation can found many places, Equations 2.21 2.22 von Caemmerer (2000) surrounding discussion. Sometimes rate referred electron-transport-limited rate, terminology becoming less common since realized factors besides electron transport can limit RuBP regeneration. brevity, simply reproduce equations without derivations: \\[\\begin{equation} W_c = \\frac{V_{cmax} \\cdot C}{C + K_c \\cdot \\left( 1 + O / K_o \\right)} \\tag{3.1} \\end{equation}\\] \\[\\begin{equation} W_j = \\frac{J \\cdot C}{4 \\cdot C + 8 \\cdot \\Gamma^*}, \\tag{3.2} \\end{equation}\\] \\(V_{cmax}\\) maximum rate Rubisco carboxylation activity, \\(K_c\\) \\(K_o\\) Michaelis-Menten constants CO2 O2, \\(J\\) RuBP regeneration rate, may depend several external factors incident irradiance. \\(V_{cmax}\\), \\(K_c\\), \\(K_o\\) positive, \\(J\\) non-negative. Note several different versions Equation (3.2) can found literature, changes coefficients denominator (\\(4\\) \\(8\\) version; see Equation 16.60 Farquhar von Caemmerer (1982) Section 2.4.2 von Caemmerer (2000) information). coefficients related energy requirements involved electron transport chain, different estimates exist requirements. differences, coefficients can sometimes considered variables equation instead taking fixed values. One significant feature Equations (3.1) (3.2) neither one can ever return negative value, expected (required) equation calculates carboxylation rate. Another important thing notice \\(V_{cmax}\\), \\(K_c\\), \\(K_o\\), \\(O\\), \\(\\Gamma^*\\) generally constant within chloroplast, main environmental influences \\(W_c\\) \\(W_j\\) \\(C\\) \\(J\\). \\(C\\) \\(J\\) vary, one \\(W_c\\) \\(W_j\\) may become larger two. point, key question needs addressed: carboxylation rate (\\(W_c\\) \\(W_j\\)) used Equation (2.5) determine net CO2 assimilation rate? FvCB authors provide answer: choose whichever rate smaller current set conditions (specified \\(C\\), \\(J\\), etc). Intuitively, makes sense. doesn’t matter many RuBP molecules carboxylated Rubisco RuBP regenerated fast enough; alternatively, doesn’t matter many RuBP molecules regenerated Rubisco unable carboxylate . Converting idea mathematical form, arrive another essential equation: \\[\\begin{equation} V_c = \\min \\{ W_c, W_j \\} \\tag{3.3} \\end{equation}\\] common way choose rates, produce sudden transitions RuBP-saturated RuBP-regeneration-limited carboxylation. Sometimes alternatives simple minimum used, quadratic mixing method, produce smoother transitions. example, see Kirschbaum Farquhar (1984).","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"sec:pitfallci","dir":"Articles > Web_only","previous_headings":"3 Choosing a Carboxylation Rate","what":"Pitfall: Limitations at Low CO2 Concentration","title":"Avoiding Pitfalls When Using the FvCB Model","text":"People familiar analyzing experimentally measured -Ci curves may impression low \\(C\\), carboxylation (hence net CO2 assimilation) always RuBP-saturated (Rubisco-limited). , “low \\(C\\)” may mean \\(\\Gamma^*\\), CO2 compensation point, possibly threshold. example, paper excellent discussion C3 -Ci curve fitting (Sharkey et al. 2007) includes following discussion limitations assimilation: routine described requires identifying whether data point limited Rubisco, RuBP regeneration TPU. good starting point assign points 30 Pa RuBP-regeneration-limited points 20 Pa Rubisco-limited; points 20 30 Pa might either. may good advice interpreting -Ci curve, generally true, instead relies unstated assumption \\(J\\) quite high (assumption often met measuring -Ci curve). nothing FvCB model equations (Equations (2.5), (3.1), (3.2), (3.3)) enforces \\(W_c < W_j\\) threshold value \\(C\\). fact, simple counterexample demonstrating situation \\(W_j < W_c\\) low \\(C\\): darkness. Darkness ensures \\(J = 0\\) hence \\(W_j \\leq W_c\\) values \\(C\\). possible find point process limiting carboxylation rate changes; can done setting \\(W_c = W_j\\) solving \\(C\\). result given Equation 2.52 von Caemmerer (2000), special value \\(C\\) called \\(C_c\\): \\[\\begin{equation} C_c = \\frac{K_c \\cdot \\left( 1 + O / K_o \\right) \\cdot J / \\left( 4 \\cdot V_{cmax} \\right) - 2 \\cdot \\Gamma^*}{1 - J / \\left( 4 \\cdot V_{cmax} \\right)} \\tag{3.4} \\end{equation}\\] physical point view, \\(C_c\\) negative; however, Equation (3.4) can mathematically produce negative values \\(C_c\\). happens, simply means crossover, one process limits carboxylation realistic values \\(C\\). occurs whenever denominator numerator opposite signs. denominator becomes negative \\(4 \\cdot V_{cmax} < J\\). situation \\(V_{cmax}\\) small carboxylation always RuBP-saturated. hand, numerator becomes negative \\(J < 8 \\cdot V_{cmax} \\cdot \\Gamma^* / \\left[ K_c \\cdot \\left( 1 + O / K_o \\right) \\right]\\). situation \\(J\\) small carboxylation always RuBP-regeneration-limited. (course, \\(C_c\\) positive numerator denominator negative, unlikely happen realistic values \\(K_c\\), \\(K_o\\), \\(O\\), \\(\\Gamma^*\\).) Even \\(C_c\\) positive, may realistically obtainable; example, \\(J\\) just tiny bit smaller \\(4 \\cdot Vcmax\\), \\(C_c\\) can take large values achievable gas evironment nearly pure CO2. Essentially, analysis Equation (3.4) tells us simple rule determining process limits carboxylation FvCB model, even possible crossover limiting processes may occur (see Figure 3.1). Figure 3.1: Solution space Equation (3.4) indicating crossover impossible Cc negative (pink), unlikely Cc large (dark blue), otherwise possible (white). upper pink region bounded Vcmax = J * [ Kc * (1 + O / Ko)] / (8 * GammaStar) lower pink region bounded Vcmax = J / 4. calculation, Kc = 259 microbar, O = 200 mbar, Ko = 179 mbar, GammaStar = 38.6 microbar, Cc considered large exceeds 2000 microbar.","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"sec:pitfallassim","dir":"Articles > Web_only","previous_headings":"3 Choosing a Carboxylation Rate","what":"Pitfall: Choosing Minimal Assimilation Rates","title":"Avoiding Pitfalls When Using the FvCB Model","text":"carboxylation RuBP-saturated, corresponding net CO2 assimilation rate (called \\(A_c\\) rather \\(A_n\\) indicate type limitation) can found combining Equations (2.5) (3.1) follows: \\[\\begin{equation} A_c = W_c \\cdot (1 - \\Gamma^* / C) - R_d = \\frac{V_{cmax} \\cdot \\left( C - \\Gamma^* \\right)}{C + K_c \\cdot \\left( 1 + O / K_o \\right)} - R_d. \\tag{3.5} \\end{equation}\\] Likewise, carboxylation RuBP-regeneration-limited, corresponding net CO2 assimilation rate (called \\(A_j\\)) can found combining Equations (2.5) (3.2) follows: \\[\\begin{equation} A_j = W_j \\cdot (1 - \\Gamma^* / C) - R_d = \\frac{J \\cdot \\left( C - \\Gamma^* \\right)}{4 \\cdot C + 8 \\cdot \\Gamma^*} - R_d. \\tag{3.6} \\end{equation}\\] mind, FvCB model sometimes expressed following form, bit simpler using version bypasses separate calculation carboxylation rates requires three equations instead four: \\[\\begin{equation} A_n = \\min \\{ A_c, A_j \\}. \\tag{3.7} \\end{equation}\\] equation can found many publications, earliest instance may Equation A1 Collatz et al. (1991). paper, authors state Equation (A1) equivalent form proposed Kirschbaum Farquhar (1984), definitions \\(J_C\\), \\(J_E\\), \\(J_S\\) differ somewhat . (Note Kirschbaum Farquhar (1984) uses \\(W_c\\) \\(W_j\\), mentioned .) Unfortunately, claim paper simply untrue Equations (2.5) (3.3) produce different results Equation (3.7). see , suppose \\(W_c < W_j\\) \\(C < \\Gamma^*\\). case, \\(\\min \\{ W_c, W_j \\} = W_c\\) \\(A_n = A_c\\) according FvCB model. However, \\(1 - \\Gamma^* / C\\) negative, \\(A_c = W_c \\cdot \\left( 1 - \\Gamma^* / C \\right) - R_d\\) also negative. Likewise, \\(A_j\\) negative, magnitude larger \\(A_c\\) \\(W_c < W_j\\). , case, \\(\\min \\{ A_c, A_j \\} = A_j\\). Thus, Equation (3.7) chosen incorrect limiting factor. fact, Equation (3.7) always chooses wrong limiting factor \\(C < \\Gamma^*\\). Equation (3.7) implemented computer code aid fitting -Ci curves simulating photosynthesis, often paired additional condition like (Aj < 0) {Aj = 0}. attempt fix problem Equation (3.7) choosing wrong limiting factor low \\(C\\). Unfortunately, solution based another misunderstanding incorrectly assumed carboxylation always RuBP-saturated low \\(C\\) (see Section 3.1). Although “partial solution” might cause problems fitting -Ci curves, produce FvCB model’s true output \\(J\\) low. subtle issue \\(C < \\Gamma^*\\), better avoid Equation (3.7) favor Equations (2.5) (3.3). Although Equation (3.7) may seem like simply alternative way specify FvCB model, actually , accurate consider separate “pseudo-FvCB” model, term continue use rest document. Examples comparing FvCB model pseudo-FvCB model can found Section 6.","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"including-triose-phosphate-utilization","dir":"Articles > Web_only","previous_headings":"","what":"Including Triose Phosphate Utilization","title":"Avoiding Pitfalls When Using the FvCB Model","text":"sum chemical reactions Calvin–Benson–Bassham (CBB) cycle can written \\[\\begin{multline} \\qquad 3 \\, \\mathrm{CO_2} + 6 \\, \\mathrm{NADPH} + 6 \\, \\mathrm{H^+} +  9 \\, \\mathrm{ATP} + 5 \\, \\mathrm{H_2O} \\rightarrow \\\\ \\mathrm{(G3P)} + 6 \\, \\mathrm{NADP^+} + 9 \\, \\mathrm{ADP} + 8 \\, \\mathrm{P_i}, \\qquad \\tag{4.1} \\end{multline}\\] G3P refers glyceraldehyde 3-phosphate (also known triose phosphate) Pi refers inorganic phosphate (ion). molecule ATP synthesized three inorganic phosphate ions; thus, CBB reaction requires nine Pi ions, eight remain free end. missing inorganic phosphate contained triose phosphate molecule, exported chloroplast eventually used form monosaccharide sugars. Since CBB reaction requires three CO2 molecules, originate RuBP carboxylation, can see carboxylation effectively consumes one third inorganic phosphate. separately considering impact RuBP oxygenation (included ), can shown overall rate inorganic phosphate consumption photosynthesis (\\(R_{pc}\\)) can given \\[\\begin{equation} R_{pc} = \\frac{V_c}{3} - \\frac{V_o}{6} - \\frac{\\alpha \\cdot V_o}{2}, \\end{equation}\\] \\(0 \\leq \\alpha \\leq 1\\) fraction glycolate carbon returned chloroplast (see Section 2.4.3 von Caemmerer (2000)). Section 2, can use \\(V_o = \\phi \\cdot V_c\\) \\(\\phi / 2 = \\Gamma^* / C\\) rewrite equation terms \\(\\Gamma^*\\) \\(C\\): \\[\\begin{equation} R_{pc} = \\frac{V_c}{3 \\cdot C} \\cdot \\left[ C - \\Gamma^* \\left( 1 + 3 \\cdot \\alpha \\right) \\right].  \\tag{4.2} \\end{equation}\\] inorganic phosphate supply replenished triose phosphate used form sugars; although happens elsewhere, inorganic phosphate liberated reaction returned chloroplast. circumstances, rate triose phosphate utilization (TPU) slow enough limit inorganic phosphate available use choloroplast photosynthesis; case, carboxylation rate said TPU-limited \\(R_{pc} = T_p\\), \\(T_p\\) rate triose phosphate utilization. expression \\(R_{pc}\\) Equation (4.2) can substuted \\(R_{pc} = T_p\\) solved corresponding carboxylation rate, referred \\(W_p\\) case: \\[\\begin{equation} W_p = \\frac{3 \\cdot T_p \\cdot C}{C - \\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right)}. \\tag{4.3} \\end{equation}\\] represents third possible limitation carboxylation rate addition RuBP-saturated RuBP-regeneration-limited rates. limitation included original FvCB model, importance realized soon afterwards (Sharkey 1985; Harley Sharkey 1991) since become standard part model. Since now considering new process model, must update Equation (3.3) include \\(W_p\\): \\[\\begin{equation} V_c = \\min \\{ W_c, W_j, W_p \\}. \\tag{4.4} \\end{equation}\\]","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"pitfall-impossible-limitations","dir":"Articles > Web_only","previous_headings":"4 Including Triose Phosphate Utilization","what":"Pitfall: Impossible Limitations","title":"Avoiding Pitfalls When Using the FvCB Model","text":"Inspecting Equation (4.3), can see \\(C < \\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right)\\), denominator equation negative, hence \\(W_p < 0\\). However, \\(W_p\\) represents carboxylation rate, negative. ’s going ? One way understand situation evaluate Equation (4.2) \\(C\\) set \\(\\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right)\\). , find rate inorganic phosphate consumption case exactly 0. words, \\(C\\) low enough, photosynthesis consuming inorganic phosphate, therefore impossible carboxylation limited TPU. One way indicate restriction modify Equation (4.3) following: \\[\\begin{equation}   W_p =   \\begin{cases}     \\infty \\;, & 0 \\leq C \\leq \\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right) \\\\[1ex]     \\frac{3 \\cdot T_p \\cdot C}{C - \\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right)} \\;, & \\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right) < C   \\end{cases} \\tag{4.5} \\end{equation}\\] modification, \\(W_p\\) never negative, can never smallest \\(W_c\\), \\(W_j\\), \\(W_p\\) \\(C \\leq \\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right)\\), can safely use conjunction Equation (4.4). carboxylation TPU-limited, corresponding net CO2 assimilation rate (called \\(A_p\\) rather \\(A_n\\) indicate type limitation) can found combining Equations (2.5) (4.3) follows: \\[\\begin{equation} A_p = W_p \\cdot (1 - \\Gamma^* / C) - R_d = \\frac{3 \\cdot T_p \\cdot \\left( C - \\Gamma^* \\right)}{C - \\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right)} - R_d. \\tag{4.6} \\end{equation}\\] equation often incorporated pseudo-FvCB model discussed Section 3.2; case, Equation (3.7) updated following: \\[\\begin{equation} A_n = \\min \\{ A_c, A_j, A_p \\}. \\tag{4.7} \\end{equation}\\] See, example, Equations 2.26 2.27 von Caemmerer (2000) (aware Equation 2.26 typo denominator). Using Equation (4.7) without considering domain Equation (4.6) valid can cause additional issues beyond ones discussed Section 3.2; particular, net assimilation rate may become TPU-limited \\(C < \\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right)\\), although possible. just one reason choose minimal carboxylation rate (Equation (4.4)) rather minimal net assimilation rate (Equation (4.7)) using describing FvCB model. Examples comparing FvCB model pseudo-FvCB model can found Section 6.","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"handling-c-0","dir":"Articles > Web_only","previous_headings":"","what":"Handling C = 0","title":"Avoiding Pitfalls When Using the FvCB Model","text":"One issue Equation (2.5) value becomes undefined \\(C = 0\\). significant issue \\(C > 0\\) realistic situation. However, possible extend model \\(C = 0\\) considering limiting value \\(C\\) approaches 0 right. First, carboxylation TPU-limited \\(C \\leq \\Gamma^* \\cdot \\left( 1 + 3 \\cdot \\alpha \\right)\\), TPU-limited \\(C = 0\\), need consider . Next, note although \\(1 - \\Gamma^* / C\\) undefined \\(C = 0\\), \\(A_c\\) \\(A_j\\) (Equations (3.5) (3.6)) . fact, following \\(C = 0\\): \\[\\begin{equation} A_c \\big|_{C = 0} = - \\frac{\\Gamma^* \\cdot V_{cmax}}{K_c \\cdot \\left( 1 + O / K_o\\right)} - R_d \\end{equation}\\] \\[\\begin{equation} A_j \\big|_{C = 0} = - \\frac{J}{8} - R_d. \\end{equation}\\] Remembering Equation (3.7) always makes wrong choice \\(C < \\Gamma^*\\), can reverse behavior find \\(A_n\\) \\(C = 0\\): \\[\\begin{equation} A_n \\big|_{C = 0} = \\max \\bigl\\{ A_c \\big|_{C = 0}, A_j \\big|_{C = 0} \\bigr\\}. \\end{equation}\\]","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"sec:examples","dir":"Articles > Web_only","previous_headings":"","what":"Examples Comparing the FvCB and Pseudo-FvCB Models","title":"Avoiding Pitfalls When Using the FvCB Model","text":"use R demonstrate differences FvCB model pseudo-FcVB model. First, define function implements FvCB model: Now, define function implements pseudo-FvCB model; intentionally avoid restricting \\(A_p\\) proper \\(C\\) domain, allowing become limiting low \\(C\\): also define function runs model across range \\(C\\) values set input parameter values compares results creating figures. code function included article, can found source file. used generate figures following sections. Finally, also define default parameter values use simulations; correspond bright conditions \\(\\alpha = 0\\). values caption Figure 2.6 von Caemmerer (2000) exception \\(O\\), specified caption. value \\(O\\) chosen approximately atmospheric partial pressure O2. following sections include three separate figures representing model outputs certain set conditions: figure showing \\(W_c\\), \\(W_j\\), \\(W_p\\), \\(V_c\\), \\(A_n\\) (calculated using Equations (2.5) (4.4)). figure shows net CO2 assimilation rate determined FvCB model. figure showing \\(A_c\\), \\(A_j\\), \\(A_p\\) \\(A_n\\) (calculated using Equation (4.7)). figure shows net CO2 assimilation rate determined pseudo-FvCB model. figure showing \\(A_n\\) calculated two different models, highlighting differences .","code":"fvcb_model <- function(   C,     # microbar   Vcmax, # micromol / m^2 / s   Kc,    # microbar   O,     # mbar   Ko,    # mbar   J,     # micromol / m^2 / s   Gstar, # microbar   Tp,    # micromol / m^2 / s   alpha, # dimensionless   Rd     # micromol / m^2 / s ) {   Wc <- Vcmax * C / (C + Kc * (1 + O / Ko))    Wj <- J * C / (4 * C + 8 * Gstar)    Wp <- 3 * Tp * C / (C - Gstar * (1 + 3 * alpha))   Wp[C <= Gstar * (1 + 3 * alpha)] <- Inf    Vc <- pmin(Wc, Wj, Wp)    An <- (1 - Gstar / C) * Vc - Rd    list(Wc = Wc, Wj = Wj, Wp = Wp, Vc = Vc, An = An) } pseudo_fvcb_model <- function(   C,     # microbar   Vcmax, # micromol / m^2 / s   Kc,    # microbar   O,     # mbar   Ko,    # mbar   J,     # micromol / m^2 / s   Gstar, # microbar   Tp,    # micromol / m^2 / s   alpha, # dimensionless   Rd     # micromol / m^2 / s ) {   Ac <- Vcmax * (C - Gstar) / (C + Kc * (1 + O / Ko)) - Rd    Aj <- J * (C - Gstar) / (4 * C + 8 * Gstar) - Rd    Ap <- 3 * Tp * (C - Gstar) / (C - Gstar * (1 + 3 * alpha)) - Rd    An <- pmin(Ac, Aj, Ap)    list(Ac = Ac, Aj = Aj, Ap = Ap, An = An) } defaults <- list(   Vcmax = 100,  # micromol / m^2 / s   Kc = 259,     # microbar   O = 200,      # mbar   Ko = 179,     # mbar   J = 170,      # micromol / m^2 / s   Gstar = 38.6, # microbar   Tp = 11.8,    # micromol / m^2 / s   alpha = 0,    # dimensionless   Rd = 1        # micromol / m^2 / s )"},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"bright-conditions-alpha-0","dir":"Articles > Web_only","previous_headings":"6 Examples Comparing the FvCB and Pseudo-FvCB Models","what":"Bright Conditions, \\(\\alpha = 0\\)","title":"Avoiding Pitfalls When Using the FvCB Model","text":"case, difference models occurs \\(C < \\Gamma^*\\), carboxylation RuBP-saturated FvCB model assimilation RuBP-regeneration-limited pseudo-FvCB model.","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"bright-conditions-alpha-0-5","dir":"Articles > Web_only","previous_headings":"6 Examples Comparing the FvCB and Pseudo-FvCB Models","what":"Bright Conditions, \\(\\alpha = 0.5\\)","title":"Avoiding Pitfalls When Using the FvCB Model","text":"set \\(\\alpha\\) 0.5 reduce \\(T_p\\) 10 (make TPU limitations easier spot.) , difference models \\(C < \\Gamma^*\\), carboxylation RuBP-saturated FvCB model assimilation RuBP-regeneration-limited pseudo-FvCB model. also another difference \\(Ap\\) becomes negative \\(C < \\Gamma^* \\cdot \\left(1 + 3 \\cdot \\alpha \\right)\\), leading unrealistic sudden dip net assimilation pseudo-FvCB model near \\(C\\) = 100 \\(\\mu\\)bar.","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"dim-conditions-alpha-0","dir":"Articles > Web_only","previous_headings":"6 Examples Comparing the FvCB and Pseudo-FvCB Models","what":"Dim Conditions, \\(\\alpha = 0\\)","title":"Avoiding Pitfalls When Using the FvCB Model","text":"set \\(J\\) 10, simulating dim light. , difference models \\(C < \\Gamma^*\\), now opposite scenario occurs respect bright conditions: carboxylation RuBP-regeneration-limited FvCB model assimilation RuBP-saturated pseudo-FvCB model.","code":""},{"path":"/articles/web_only/avoiding_pitfalls_fvcb.html","id":"final-remarks","dir":"Articles > Web_only","previous_headings":"","what":"Final Remarks","title":"Avoiding Pitfalls When Using the FvCB Model","text":"document, shown although pseudo-FvCB model equations frequently used plant biologists, exactly equivalent original FvCB model. Differences occur low CO2 concentrations \\(C < \\Gamma^*\\); situation, two models always disagree process limits carboxylation determines overall net CO2 assimilation rate. differences may always consequential (example, CO2 concentrations rarely low enough context typical crop growth simulation), nevertheless important ensure mathematical model described accurately, code implementation model faithfully represents . case, evaluating ability model represent reality—essential goal computational modeling—becomes impossible task. reason, recommend original formulation model preferred pseudo-FvCB version using FvCB model.","code":""},{"path":[]},{"path":"/articles/web_only/ball_berry_model.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"Ball-Berry simple empirical model steady-state response stomata external conditions first described Ball et al. (1987). main idea stomata open response brighter light low CO\\(_2\\) availability, close response low humidity (limit water losses transpiration). idea can expressed mathematically \\[\\begin{equation}   g_{sw} = b_0 + b_1 \\cdot \\frac{ A_n \\cdot h_s}{C_s} \\quad     \\text{} \\; A_n \\geq 0, \\tag{1.1} \\end{equation}\\] \\(g_{sw}\\) stomatal conductance water vapor diffusion, \\(A_n\\) net CO\\(_2\\) assimilation rate, \\(b_0\\) \\(b_1\\) Ball-Berry intercept slope, \\(h_s\\) relative humidity leaf surface, \\(C_s\\) CO\\(_2\\) concentration leaf surface. \\(A_n < 0\\), \\(g_{sw} = b_0\\). , net assimilation proxy incident light intensity captures nonlinear response \\(g_{sw}\\) light. quantity \\(A_n \\cdot h_s / C_s\\) often called Ball-Berry index; thus, model states stomatal conductance linear function Ball-Berry index, model parameterized Ball-Berry slope intercept. Several critiques model made, models stomatal response exist (Tardieu Davies 1993; Leuning 1995; Dewar 2002). Nevertheless, Ball-Berry model remains widely-used due simplicity. (However, see following section, always simple use context crop growth modeling!)","code":""},{"path":"/articles/web_only/ball_berry_model.html","id":"using-the-model-for-crop-growth-modeling","dir":"Articles > Web_only","previous_headings":"","what":"Using the Model for Crop Growth Modeling","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"several complexities associated using equation crop growth modeling. One \\(A_n\\) depends CO\\(_2\\) concentration inside leaf, combined models employing Ball-Berry equation mechanistic equations photosynthesis must generally solved iteratively. Another complexity associated crop growth modeling CO\\(_2\\) H\\(_2\\)O concentrations leaf surface usually known beforehand. Instead, must determined ambient values, boundary layer conductances, fluxes using one-dimensional gas flow equations form \\(F = g \\cdot (c_2 - c_1)\\), \\(F\\) flux, \\(g\\) conductance, \\(c_1\\) \\(c_2\\) gas concentrations two physical locations. remainder section describe gas flow equations can used determine \\(C_s\\) \\(h_s\\).","code":""},{"path":"/articles/web_only/ball_berry_model.html","id":"determining-c_s","dir":"Articles > Web_only","previous_headings":"2 Using the Model for Crop Growth Modeling","what":"Determining \\(C_s\\)","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"Assuming steady-state conditions, CO\\(_2\\) flux across boundary layer given \\(A_n\\), allowing us find \\(C_s\\) using single gas flow equation: \\[\\begin{equation}   C_s = C_a - \\frac{A_n}{g_{bc}} = C_a - \\frac{A_n \\cdot 1.37}{g_{bw}},     \\tag{2.1} \\end{equation}\\] \\(C_a\\) ambient CO\\(_2\\) concentration, \\(g_{bc}\\) boundary layer conductance CO\\(_2\\) diffusion, \\(g_{bw}\\) boundary layer conductance water vapor diffusion. two conductances related ratio diffusivities CO\\(_2\\) H\\(_2\\)O boundary layer, typically taken 1.37. (information ratio value, see discussion following Equation B16 Caemmerer Farquhar (1981).)","code":""},{"path":"/articles/web_only/ball_berry_model.html","id":"determining-h_s","dir":"Articles > Web_only","previous_headings":"2 Using the Model for Crop Growth Modeling","what":"Determining \\(h_s\\)","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"situation water vapor complicated. first point water vapor flows along concentration gradients, relative humidity gradients. Concentrations relative humidities related \\[\\begin{equation}   h = P_w / P_{w,sat}(T) = w \\cdot P_{tot} / P_{w,sat}(T), \\tag{2.2} \\end{equation}\\] \\(h\\) relative humidity, \\(w\\) water vapor concentration, \\(P_w\\) partial pressure water vapor, \\(P_{w,sat}(T)\\) saturation water vapor pressure corresponding air temperature \\(T\\), \\(P_{tot}\\) total gas pressure. second point water vapor flux \\(E\\) initially unknown; instead, assume water vapor fully saturated within leaf water vapor flow reached steady-state conditions. Thus, can begin two gas flow equations corresponding water vapor flux across boundary layer stomata (\\(E_b\\) \\(E_s\\), respectively): \\[\\begin{equation}   E_b = g_{bw} \\cdot (w_s - w_a) \\tag{2.3} \\end{equation}\\] \\[\\begin{equation}   E_s = g_{sw} \\cdot (w_i - w_s), \\tag{2.4} \\end{equation}\\] \\(w_a\\), \\(w_s\\), \\(w_i\\) water vapor concentrations ambient air, leaf surface, leaf interior, respectively. Note Equation (2.2) can used re-express concentrations using corresponding relative humidities (\\(h_a\\), \\(h_s\\), \\(h_i\\)) air temperatures (\\(T_a\\), \\(T_s\\), \\(T_i\\)) locations follows: \\[\\begin{align}   w_a &= h_a \\cdot \\frac{P_{w,sat}(T_a)}{P_{tot}} \\\\   w_s &= h_s \\cdot \\frac{P_{w,sat}(T_s)}{P_{tot}} \\\\   w_i &= h_i \\cdot \\frac{P_{w,sat}(T_i)}{P_{tot}} =     \\frac{P_{w,sat}(T_i)}{P_{tot}}, \\tag{2.5} \\end{align}\\] set \\(h_i = 1\\) latter reflect assumption water vapor saturated inside leaf. leaf’s surface interior spaces assumed temperature hence saturation water vapor pressure, can also set \\[\\begin{equation}   T_s = T_i = T_l, \\tag{2.6} \\end{equation}\\] \\(T_l\\) leaf temperature. Now, can replace \\(g_{sw}\\) Equation (2.4) expression Equation (1.1), replace water vapor concentrations temperatures Equations (2.3) (2.4) expressions Equations (2.5) (2.6), equate two fluxes Equations (2.3) (2.4) since must equal steady-state conditions. Putting together, can write \\[\\begin{equation}   \\frac{g_{bw}}{P_{tot}} \\cdot     \\big[ h_s \\cdot P_{w,sat}(T_l) - h_a \\cdot P_{w,sat}(T_a) \\big] =     \\frac{P_{w,sat}(T_l)}{P_{tot}} \\cdot     \\left[ b_0 + b_1 \\cdot \\frac{A_n \\cdot h_s}{C_s} \\right]     \\cdot \\left( 1 - h_s \\right). \\tag{2.7} \\end{equation}\\] multiplied regrouped, Equation (2.7) becomes quadratic equation \\(h_s\\): \\[\\begin{equation}   h_s^2 \\cdot \\left( b_1 \\cdot \\frac{A_n}{C_s} \\right) +     h_s \\cdot \\left( b_0 + g_{bw} - b_1 \\cdot \\frac{A_n}{C_s} \\right) -     \\left( g_{bw} \\cdot h_a \\cdot \\frac{P_{w,sat}(T_a)}{P_{w,sat}(T_l)} +       b_0 \\right) = 0. \\tag{2.8} \\end{equation}\\] Equation (2.8) can solved \\(h_s\\) using quadratic formula: \\[\\begin{align}   h_s &= \\frac{-b \\pm \\sqrt{b^2 - 4 \\cdot \\cdot c}}{2 \\cdot }, \\\\     &= b_1 \\cdot \\frac{A_n}{C_s}, \\\\     b &= b_0 + g_{bw} - b_1 \\cdot \\frac{A_n}{C_s}, \\\\     c &= - \\left( g_{bw} \\cdot h_a \\cdot \\frac{P_{w,sat}(T_a)}{P_{w,sat}(T_l)} +       b_0 \\right). \\tag{2.9} \\end{align}\\] Note assumptions, \\(\\geq 0\\) \\(c \\leq 0\\). Thus, \\(b^2 - 4 \\cdot \\cdot c \\geq b^2\\), \\(\\sqrt{b^2 - 4 \\cdot \\cdot c}\\) term Equation (2.9) always larger (equal ) \\(|b|\\). Thus, “minus” root corresponds phyically-impossible negative value \\(h_s\\), always choose “plus” root \\[\\begin{equation}   h_s = \\frac{-b + \\sqrt{b^2 - 4 \\cdot \\cdot c}}{2 \\cdot }. \\tag{2.10} \\end{equation}\\]","code":""},{"path":"/articles/web_only/ball_berry_model.html","id":"dew","dir":"Articles > Web_only","previous_headings":"2 Using the Model for Crop Growth Modeling > 2.2 Determining \\(h_s\\)","what":"Dew","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"leaf temperature lower ambient air temperature, possible water vapor concentration leaf surface exceed saturation water vapor pressure leaf temperature. result \\(h_s > 1\\), possible. outcome indicates water vapor condensed leaf surface; words, dew formed.","code":""},{"path":"/articles/web_only/ball_berry_model.html","id":"biocro-implementation","dir":"Articles > Web_only","previous_headings":"","what":"BioCro Implementation","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"BioCro, Ball-Berry model implemented ball_berry_gs() C++ function, calculates \\(C_s\\), \\(h_s\\), \\(g_{sw}\\) Equations (2.1), (2.10), (1.1). way deal dew formation BioCro moment, \\(h_s \\leq 1\\) forced code. function can accessed via BioCro:ball_berry module. model also plays key role several functions modules call ball_berry_gs(): c3photoC() C++ function couples Ball-Berry model Farquhar-von-Caemmerer-Berry model C3 photosynthesis determine \\(A_n\\) \\(g_{sw}\\) environmental conditions. function can accessed via BioCro:c3_assimilation module. See module documentation information. BioCro:c3_leaf_photosynthesis module couples Ball-Berry model, Farquhar-von-Caemmerer-Berry model C3 photosynthesis, Penman-Monteith approach energy balance determine \\(A_n\\), \\(g_{sw}\\), \\(T_l\\) environmental conditions. See module documentation information. c3CanAC() C++ function applies fully-coupled model used BioCro:c3_leaf_photosynthesis module sunlit shaded leaves within crop canopy calculate canopy-level photosynthesis. function can accessed via BioCro:c3_canopy BioCro:ten_layer_c3_canopy modules. See module documentation information. c4photoC() C++ function couples Ball-Berry model Collatz model C4 photosynthesis determine \\(A_n\\) \\(g_{sw}\\) environmental conditions. function can accessed via BioCro:c4_assimilation module. See module documentation information. BioCro:c4_leaf_photosynthesis module couples Ball-Berry model, Collatz model C3 photosynthesis, Penman-Monteith approach energy balance determine \\(A_n\\), \\(g_{sw}\\), \\(T_l\\) environmental conditions. See module documentation information. CanAC() C++ function applies fully-coupled model used BioCro:c4_leaf_photosynthesis module sunlit shaded leaves within crop canopy calculate canopy-level photosynthesis. function can accessed via BioCro:c4_canopy BioCro:ten_layer_c4_canopy modules. See module documentation information.","code":""},{"path":"/articles/web_only/ball_berry_model.html","id":"biocro-examples","dir":"Articles > Web_only","previous_headings":"","what":"BioCro Examples","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"show BioCro can used evaluate Ball-Berry model use conjunction models varying complexity. start, need load BioCro lattice libraries:","code":"library(BioCro) library(lattice)"},{"path":"/articles/web_only/ball_berry_model.html","id":"ball-berry","dir":"Articles > Web_only","previous_headings":"4 BioCro Examples","what":"Ball-Berry","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"visualize Ball-Berry model’s output soybean leaves several different values \\(A_n\\) \\(T_a\\). can see \\(g_{sw}\\) \\(h_s\\) change ambient temperature (Figures 4.1 4.2) \\(C_s\\) (Figure 4.3). Figure 4.1: \\(g_{sw}\\) vs \\(A_n\\) several different \\(T_a\\) predicted Ball-Berry model soybean parameter values. Figure 4.2: \\(h_s\\) vs \\(A_n\\) several different \\(T_a\\) predicted Ball-Berry model soybean parameter values. Figure 4.3: \\(C_s\\) vs \\(A_n\\) several different \\(T_a\\) predicted Ball-Berry model soybean parameter values.","code":"# Choose a leaf temperature Tleaf = 25 # degrees C  # Run the model for different An and Tambient bb_rc <- module_response_curve(   'BioCro:ball_berry',   within(soybean$parameters, {     gbw = 1.2                # mol / m^2 / s     leaf_temperature = Tleaf # degress C     rh = 0.7                 # dimensionless   }),   expand.grid(     net_assimilation_rate = seq(-5, 40, length.out = 201), # micromol / m^2 / s     temp = seq(Tleaf - 6, Tleaf + 6, by = 2)               # degrees C   ) ) # Plot gsw xyplot(     leaf_stomatal_conductance ~ net_assimilation_rate,     group = temp,     data = bb_rc,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = \"An (micromol / m^2 / s)\",     ylab = \"Stomatal conductance (mol / m^2 / s)\",     main = paste(         \"Ball-Berry model with T_leaf =\", Tleaf,         \"\\nand different T_ambient\"     ) ) # Plot hs xyplot(     hs ~ net_assimilation_rate,     group = temp,     data = bb_rc,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = \"An (micromol / m^2 / s)\",     ylab = \"Relative humidity at leaf surface (dimensionless)\",     main = paste(         \"Ball-Berry model with T_leaf =\", Tleaf,         \"\\nand different T_ambient\"     ) ) # Plot cs xyplot(     cs ~ net_assimilation_rate,     group = temp,     data = bb_rc,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = \"An (micromol / m^2 / s)\",     ylab = \"CO2 concentration at leaf surface (micromol / mol)\",     main = paste(         \"Ball-Berry model with T_leaf =\", Tleaf,         \"\\nand different T_ambient\"     ) )"},{"path":"/articles/web_only/ball_berry_model.html","id":"ball-berry-and-c3-photosynthesis","dir":"Articles > Web_only","previous_headings":"4 BioCro Examples","what":"Ball-Berry and C3 Photosynthesis","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"calculate response \\(g_{sw}\\) \\(A_n\\) absorbed quantum photon flux (\\(Q_{abs}\\)) ambient humidity coupled model incorporating Ball-Berry Farquhar-von-Caemmerer-Berry (FvCB) models. Although coupled model also gives us option reduce crop’s “inherent” Ball-Berry parameters response water stress, simulation ignore water stress setting StomataWS = 1. calculations, can see stomatal conductance increases higher humidities (Figure 4.4), \\(A_n\\) \\(g_{sw}\\) reach plateaus high light levels (Figures 4.4 4.5). Figure 4.4: \\(g_{sw}\\) vs \\(Q_{abs}\\) several different \\(h_a\\) predicted coupled Ball-Berry + FvCB model soybean parameter values. Figure 4.5: \\(A_n\\) vs \\(Q_{abs}\\) several different \\(h_a\\) predicted coupled Ball-Berry + FvCB model soybean parameter values.","code":"# Run the model for different Qabs and rh lrc <- module_response_curve(   'BioCro:c3_assimilation',   within(soybean$parameters, {     StomataWS = 1 # dimensionless     Tleaf = 30    # degrees C     gbw = 1.2     # mol / m^2 / s     temp = 28     # degrees C   }),   expand.grid(     Qabs = seq(0, 1000, by = 5), # micromol / m^2 / s     rh = c(0.2, 0.4, 0.6, 0.8)   # dimensionless   ) ) # Plot gsw xyplot(     Gs ~ Qabs,     group = rh,     data = lrc,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = \"Absorbed PPFD (micromol / m^2 / s)\",     ylab = \"Stomatal conductance to H2O (mol / m^2 / s)\",     main = \"Ball-Berry + FvCB models for\\ndifferent humidities\" ) # Plot An xyplot(     Assim ~ Qabs,     group = rh,     data = lrc,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = \"Absorbed PPFD (micromol / m^2 / s)\",     ylab = \"Net CO2 assimilation rate (micromol / m^2 / s)\",     main = \"Ball-Berry + FvCB models for\\ndifferent humidities\" )"},{"path":"/articles/web_only/ball_berry_model.html","id":"simulated-c3-co_2-response-curves","dir":"Articles > Web_only","previous_headings":"4 BioCro Examples","what":"Simulated C3 CO\\(_2\\) Response Curves","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"can simulate CO\\(_2\\) response curves different humidity levels coupling Ball-Berry Farquhar-von-Caemmerer-Berry models energy balance equation. keep ambient temperature fixed increasing ambient CO\\(_2\\) concentration, can done gas exchange measurement system like Licor LI-6800. environmental conditions determine \\(g_{sw}\\), \\(A_n\\), \\(T_l\\), \\(C_i\\) value \\(C_a\\), plots can generated values. model, height windspeed determine boundary layer conductance; choose large wind speed ensure high conductance, occur measurement chamber. calculations: can see \\(g_{sw}\\) changes \\(C_i\\) \\(h_a\\) (Figure 4.6), \\(A_n\\) plotted \\(C_i\\) humidities (Figure 4.7). demonstrates -Ci curve reveals response photosynthesis CO\\(_2\\) without influence stomata. (Sometimes idea expressed saying -Ci curve “peels away epidermis.”) can also see value \\(C_i\\) corresponding \\(C_a\\) depend humidity, higher humidity corresponding higher \\(C_i\\) (Figure 4.9). relationship mediated stomata, open response higher humidity. Thus, although humidity impact shape -Ci curve, can effect range achievable \\(C_i\\) values. stomatal conductance largest \\(C_i\\) near 250 ppm, leaf temperature lowest range (Figures 4.6 4.8). occurs open stomata facilitate evaporative cooling; cooling effect stronger lower humidities transpiration rate higher. Figure 4.6: \\(g_{sw}\\) vs \\(C_i\\) several different \\(h_a\\) predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values. Figure 4.7: \\(A_n\\) vs \\(C_i\\) several different \\(h_a\\) predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values. Figure 4.8: \\(T_l\\) vs \\(C_i\\) several different \\(h_a\\) predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values. Figure 4.9: \\(C_i\\) vs \\(C_a\\) several different \\(h_a\\) predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values.","code":"# Set the absorbed photosynthetically active light (in micromol / m^2 / s) absorbed_ppfd <- 1000  # Determine the total absorbed shortwave light energy (in J / m^2 / s) absorbed_shortwave <-     absorbed_ppfd * soybean$parameters$par_energy_content /         soybean$parameters$par_energy_fraction  # Set the air temperature air_temperature = 30  # Determine the absorbed longwave light energy (in J / m^2 / s) absorbed_longwave <- evaluate_module(     'BioCro:stefan_boltzmann_longwave',     list(temp = air_temperature, emissivity_sky = 1) )$absorbed_longwave  aci <- module_response_curve(     'BioCro:c3_leaf_photosynthesis',     within(soybean$parameters, {         StomataWS = 1          # dimensionless         temp = air_temperature # degrees C         windspeed = 3          # m / s         height = 0.8           # m         gbw_canopy = 0.2       # m / s         absorbed_ppfd = absorbed_ppfd         absorbed_shortwave = absorbed_shortwave         absorbed_longwave = absorbed_longwave     }),     expand.grid(         Catm = seq(100, 1800, by = 5), # micromol / mol         rh = c(0.4, 0.6, 0.8)          # dimensionless     ) ) # Plot the gsw-Ci curves xyplot(     Gs ~ Ci,     group = rh,     data = aci,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Intercellular CO2 concentration (micromol / mol)',     ylab = 'Stomatal conductance to H2O (mol / m^2 / s)',     main = 'Ball-Berry + FvCB + energy balance\\nfor different humidities' ) # Plot the A-Ci curves xyplot(     Assim ~ Ci,     group = rh,     data = aci,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Intercellular CO2 concentration (micromol / mol)',     ylab = 'Net CO2 assimilation rate (micromol / m^2 / s)',     main = 'Ball-Berry + FvCB + energy balance\\nfor different humidities' ) # Plot the Tl-Ci curves xyplot(     leaf_temperature ~ Ci,     group = rh,     data = aci,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Intercellular CO2 concentration (micromol / mol)',     ylab = 'Leaf temperature (degrees C)',     main = 'Ball-Berry + FvCB + energy balance\\nfor different humidities' ) # Plot the Ci-Ca curves xyplot(     Ci ~ Catm,     group = rh,     data = aci,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Ambient CO2 concentration (micromol / mol)',     ylab = 'Intercellular CO2 concentration (micromol / mol)',     main = 'Ball-Berry + FvCB + energy balance\\nfor different humidities' )"},{"path":"/articles/web_only/ball_berry_model.html","id":"gas-concentrations-within-a-c3-canopy","dir":"Articles > Web_only","previous_headings":"4 BioCro Examples","what":"Gas Concentrations Within a C3 Canopy","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"can see several quantities change throughout soybean canopy fixed set environmental conditions using fully-coupled Ball-Berry + FvCB + energy balance model leaf level photosynthesis. sunlit leaves, observe following trends: CO\\(_2\\) concentration leaf surface (\\(C_s\\)) decreases canopy depth (Figure 4.10). relative humidity leaf surface (\\(C_s\\)) increases canopy depth (Figure 4.11). stomatal conductance (\\(g_{sw}\\)) increases canopy depth (Figure 4.12). leaf temperature (\\(T_l\\)) generally increases canopy depth, although trend monotonic (Figure 4.13). net assimilation rate (\\(A_n\\)) decreases canopy depth (Figure 4.14). Figure 4.10: \\(C_s\\) vs canopy layer sunlit shaded leaves predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values. Figure 4.11: Relative humidities leaf surface (RHs) just outside leaf boundary layer (RH_canopy) plotted canopy layer sunlit shaded leaves predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values. Figure 4.12: \\(g_{sw}\\) vs canopy layer sunlit shaded leaves predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values. Figure 4.13: \\(T_l\\) vs canopy layer sunlit shaded leaves predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values. Figure 4.14: \\(A_n\\) vs canopy layer sunlit shaded leaves predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values. Figure 4.15: \\(g_{bw}\\) vs canopy layer sunlit shaded leaves predicted coupled Ball-Berry + FvCB + energy balance model soybean parameter values.","code":"# Run canopy modules RH_a <- 0.8     # dimensionless; ambient relative humidity T_ambient <- 30 # degrees C; ambient air temperature StomataWS <- 1  # no water stress  canres <- run_biocro(     direct_module_names = c(         'BioCro:solar_position_michalsky',         'BioCro:shortwave_atmospheric_scattering',         'BioCro:incident_shortwave_from_ground_par',         'BioCro:height_from_lai',         'BioCro:canopy_gbw_thornley',         'BioCro:stefan_boltzmann_longwave',         'BioCro:ten_layer_canopy_properties',         'BioCro:ten_layer_c3_canopy'     ),     parameters = within(soybean$parameters, {         year = 2022         time_zone_offset = -6 # CDT         solar = 1500          # micromol / m^2 / s         lai = 3               # dimensionless         rh = RH_a             # dimensionless         windspeed = 2         # m / s         temp = T_ambient      # degrees C         StomataWS = StomataWS # dimensionless     }),     drivers = data.frame(fractional_doy = 210.5) # noon on day 210 (July 29 for 2022) )  # Extract canopy profiles canopy_profiles_list <- lapply(     c('sunlit', 'shaded'),     function(leaf_class) {         cs_column_names <- grep(             paste0(leaf_class, '_Cs_layer_[0-9]'),             colnames(canres),             value = TRUE         )          rhs_column_names <- grep(             paste0(leaf_class, '_RHs_layer_[0-9]'),             colnames(canres),             value = TRUE         )          rh_canopy_column_names <- grep(             paste0(leaf_class, '_RH_canopy_layer_[0-9]'),             colnames(canres),             value = TRUE         )          gsw_column_names <- grep(             paste0(leaf_class, '_Gs_layer_[0-9]'),             colnames(canres),             value = TRUE         )          tl_column_names <- grep(             paste0(leaf_class, '_leaf_temperature_layer_[0-9]'),             colnames(canres),             value = TRUE         )          a_column_names <- grep(             paste0(leaf_class, '_Assim_layer_[0-9]'),             colnames(canres),             value = TRUE         )          gbw_column_names <- grep(             paste0(leaf_class, '_gbw_layer_[0-9]'),             colnames(canres),             value = TRUE         )          data.frame(             type = leaf_class,             layer = seq(0, 9),             Cs = as.numeric(canres[cs_column_names]),             RHs = as.numeric(canres[rhs_column_names]),             RH_canopy = as.numeric(canres[rh_canopy_column_names]),             gsw = as.numeric(canres[gsw_column_names]),             tl = as.numeric(canres[tl_column_names]),             A = as.numeric(canres[a_column_names]),             gbw = as.numeric(canres[gbw_column_names])         )     } )  canopy_profiles <- do.call(rbind, canopy_profiles_list) # Plot the Cs profiles xyplot(     Cs ~ layer,     group = type,     data = canopy_profiles,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Canopy layer (0 is top, 9 is bottom)',     ylab = 'CO2 concentration at leaf surface (micromol / mol)',     main = 'Ball-Berry + FvCB + energy balance\\nwithin a soybean canopy' ) # Plot the RHs profiles xyplot(     RHs + RH_canopy ~ layer,     group = type,     data = canopy_profiles,     type = 'l',     auto.key = list(space = 'top'),     grid = TRUE,     xlab = 'Canopy layer (0 is top, 9 is bottom)',     ylab = 'Relative humidity (micromol / mol)',     main = 'Ball-Berry + FvCB + energy balance\\nwithin a soybean canopy' ) # Plot the gsw profiles xyplot(     gsw ~ layer,     group = type,     data = canopy_profiles,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Canopy layer (0 is top, 9 is bottom)',     ylab = 'Stomatal conductance to H2O (mol / m^2 / s)',     main = 'Ball-Berry + FvCB + energy balance\\nwithin a soybean canopy' ) # Plot the leaf temperature profiles xyplot(     tl ~ layer,     group = type,     data = canopy_profiles,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Canopy layer (0 is top, 9 is bottom)',     ylab = 'Leaf temperature (degrees C)',     main = 'Ball-Berry + FvCB + energy balance\\nwithin a soybean canopy' ) # Plot the assimilation profiles xyplot(     A ~ layer,     group = type,     data = canopy_profiles,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Canopy layer (0 is top, 9 is bottom)',     ylab = 'Net CO2 assimilation rate (micromol / m^2 / s)',     main = 'Ball-Berry + FvCB + energy balance\\nwithin a soybean canopy' ) # Plot the assimilation profiles xyplot(     gbw ~ layer,     group = type,     data = canopy_profiles,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Canopy layer (0 is top, 9 is bottom)',     ylab = 'Boundary layer conductance to H2O (mol / m^2 / s)',     main = 'Ball-Berry + FvCB + energy balance\\nwithin a soybean canopy' )"},{"path":"/articles/web_only/ball_berry_model.html","id":"soybean-modeling","dir":"Articles > Web_only","previous_headings":"4 BioCro Examples","what":"Soybean Modeling","title":"Using the Ball-Berry Model in Crop Growth Simulations","text":"can see Ball-Berry slope can affect soybean yield. slope encapsulates “willingness” crop open stomata. resources plentiful, higher stomatal conductance may allow carbon assimilation hence growth. hand, higher stomatal conductance increases water losses due transpiration, can exacerbate drought stress. Thus, exact impact change \\(b_1\\) therefore strongly depend particular location weather. BioCro, soil water content determines water stress level plant, reducing Ball-Berry parameters times low water availability. time, canopy transpiration influences soil water content, higher transpiration rates causing faster depletion soil water. example, just use weather data 2002 Champaign, Illinois; conditions, increasing Ball-Berry slope causes final seed mass (called Grain ) increase (Figure 4.16). Figure 4.16: Soybean biomass values predicted Champaign, Illinois 2002 using different values Ball-Berry slope \\(b_1\\).","code":"# Use partial application to create a function that runs a soybean simulation # for a given value of the Ball-Berry slope bb1_func <- with(soybean, {partial_run_biocro(     initial_values,     parameters,     soybean_weather[['2002']],     direct_modules,     differential_modules,     ode_solver,     'b1' # the name of the parameter we wish to vary )})  # Run the soybean model for several different slope values bb1_result_list <- lapply(     seq(soybean$parameters$b1 - 3, soybean$parameters$b1 + 3, by = 1.5),     function(x) {         within(bb1_func(x), {b1 = x})     } )  # Collect the results into a single data frame bb1_result <- do.call(rbind, bb1_result_list) # Plot soybean biomass values for different values of the Ball-Berry slope xyplot(     Leaf + Stem + Root + Grain ~ fractional_doy,     group = b1,     data = bb1_result,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Day of year (2002)',     ylab = 'Biomass (Mg / ha)',     main = 'Testing different soybean Ball-Berry slope values' )"},{"path":[]},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"general","dir":"Articles > Web_only","previous_headings":"","what":"A General Canopy Photosynthesis Model","title":"Canopy Photosynthesis Models","text":"leaf level, net CO\\(_2\\) assimilation rate per unit leaf area (\\(A_{n,leaf}\\)) depends incident photosynthetically active photon flux density (PPFD; \\(Q_{}\\)), absorbed shortwave energy (\\(I_{abs}\\)), ambient CO\\(_2\\) concentration outside boundary layer (\\(C_a\\)), air temperature (\\(T_a\\)), relative humidity (\\(h_a\\)), several environmental factors. Mathematically, can express writing \\(A_n\\) function variables: \\(A_{n,leaf} = A_{n,leaf}(Q_{}, I_{abs}, C_a, T_a, h_a)\\). exact equation used calculate \\(A_{n,leaf}\\) generally depend individual choices modelling photosynthetic biochemistry, stomatal response, energy balance. simplicity, attempt reproduce . environmental variables may change throughout crop canopy. common way treat express function cumulative leaf area index (cLAI; \\(\\ell\\)). top canopy, \\(\\ell = 0\\), increases \\(\\ell = L\\) bottom canopy, \\(L\\) whole-canopy leaf area index (LAI). LAI defined one-sided leaf area per unit ground area. can loosely interpreted number leaf layers covering ground. cLAI can interpreted LAI leaves certain point canopy. wide area crop achieved canopy closure, lateral position within field expected influence environmental conditions, leaving depth within canopy main variable. Cumulative LAI way express depth within canopy using leaf area, since amount leaf area particular point important determining \\(Q_{}\\) (variables) physical distance canopy top. mind, can write \\(A_{n,leaf} = A_{n,leaf}(Q_{}(\\ell), I_{abs}(\\ell), C_a(\\ell), T_a(\\ell), h_a(\\ell))\\). notation bit unweildy, can made compact writing \\(A_{n,leaf} = A_{n,leaf}(\\ell)\\). form, implied inputs photosynthesis model used calculate \\(A_{n,leaf}\\) change \\(\\ell\\). notation convenient allows us define net CO\\(_2\\) assimilation rate per unit ground area (\\(A_{n,canopy}\\)) using one-dimensional integral \\(\\ell\\): \\[\\begin{equation}     A_{n,canopy} = \\int_{\\ell = 0}^{L} A_{n,leaf}(\\ell) d \\ell,     \\tag{1.1} \\end{equation}\\] \\(A_{n,leaf}(\\ell)\\) net CO\\(_2\\) assimilation rate (per leaf area) infinitesimally small piece leaf located height within canopy cLAI \\(\\ell\\), \\(d \\ell\\) change cLAI associated piece. (\\(d \\ell\\) can thought \\(L \\cdot dS / S\\), \\(dS\\) area piece leaf \\(S\\) total leaf area canopy.) Equation (1.1) general way express relationship leaf-level canopy photosynthesis. biological point view, equivalent dividing canopy infinitely many layers, infinitesimally thin contains infinitesimally small amount leaf area, adding contribution thin layer together get whole canopy rate. function \\(A_{n,leaf}(\\ell)\\) represents rate infinitesimally thin leaf layer.","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"examples","dir":"Articles > Web_only","previous_headings":"1 A General Canopy Photosynthesis Model","what":"Examples","title":"Canopy Photosynthesis Models","text":"canopy photosynthesis model discussed John H. M. Thornley Johnson (1990) (see section ). Although Thornley uses different notation simplistic model photosynthesis, clear Equations 10.4a 10.1b can combined express canopy photosynthesis (\\(P\\)) similar way Equation (1.1): \\[\\begin{equation}     P = \\int_0^L P_1(l) dl. \\end{equation}\\] examples can found journal articles, Equation 10 Hirose Werger (1987). simple model photosynthesis used, sometimes \\(A_{n,leaf}(\\ell)\\) explicitly written, Table J. Goudriaan (1986).","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"a-model-with-shaded-and-sunlit-leaves","dir":"Articles > Web_only","previous_headings":"","what":"A Model with Shaded and Sunlit Leaves","title":"Canopy Photosynthesis Models","text":"Equation (1.1) oversimplified way represent \\(A_{n,canopy}\\) ignores several key variables influence \\(A_{n,leaf}\\) besides \\(\\ell\\). common refinement model separately consider sunlit shaded leaves. major difference two leaf classes dependence \\(Q_{}\\) \\(\\ell\\). Sunlit leaves depth within canopy receive similar value \\(Q_{}\\), shaded leaves generally receive less light deeper within canopy. sunlit shaded leaves treated separately, can write \\[\\begin{equation}     A_{n,leaf}(\\ell) = A_{n,leaf}^{sunlit}(\\ell) \\cdot f_{sunlit}(\\ell) +         A_{n,leaf}^{shaded}(\\ell) \\cdot f_{shaded}(\\ell), \\end{equation}\\] \\(A_{n,leaf}^{sunlit}(\\ell)\\) \\(A_{n,leaf}^{shaded}(\\ell)\\) leaf-level net CO\\(_2\\) assimilation rates per leaf area sunlit shaded leaves cLAI \\(\\ell\\), \\(f_{sunlit}(\\ell)\\) \\(f_{shaded}(\\ell)\\) fractions sunlit shaded leaf area \\(\\ell\\). (leaves must either sunlit shaded, \\(f_{sunlit}(\\ell) + f_{shaded}(\\ell) = 1\\).) new expression leaf-level photosynthesis, Equation (1.1) can modified \\[\\begin{equation}     A_{n,canopy} = \\int_{\\ell = 0}^{L} \\left[         A_{n,leaf}^{sunlit}(\\ell)f_{sunlit}(\\ell) +             A_{n,leaf}^{shaded}(\\ell)f_{shaded}(\\ell) \\right] d \\ell.     \\tag{2.1} \\end{equation}\\]","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"examples-1","dir":"Articles > Web_only","previous_headings":"2 A Model with Shaded and Sunlit Leaves","what":"Examples","title":"Canopy Photosynthesis Models","text":"See, example, Equation 18 Sellers (1985) Equation 7 J. H. M. Thornley (2002).","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"a-multilayer-canopy-model","dir":"Articles > Web_only","previous_headings":"","what":"A Multilayer Canopy Model","title":"Canopy Photosynthesis Models","text":"Equations (1.1) (2.1) useful defining \\(A_{n,canopy}\\), limited practical value since analytical solutions detailed mechanistic models leaf-level photosynthesis. Thornley suggests, numerical integration approach must used calculate canopy assimilation case. simplest approach numerical integration approximate integral Riemann sum. dividing cLAI interval \\((0,L)\\) \\(N\\) subintervals equal size converting integral Riemann sum, Equation (2.1) becomes \\[\\begin{equation}     A_{n,canopy} = \\sum_{= 0}^{N-1} \\left[         A_{n,leaf}^{sunlit}(\\ell_i)f_{sunlit}(\\ell_i) +             A_{n,leaf}^{shaded}(\\ell_i)f_{shaded}(\\ell_i) \\right]                 \\cdot \\frac{L}{N},     \\tag{3.1} \\end{equation}\\] \\(\\ell_i = (+ 0.5) \\cdot L / N\\) \\(L / N\\) cLAI subinterval width. used “midpoint rule” Riemann sum, principle “left rule” “right rule” also used. biological perspective, approach numerical integration can understood dividing crop canopy \\(N\\) thick layers equal amounts leaf area. (Note layers conceptually different infinitesimally thin layers discussed connection Equation (1.1).) Thus, Equation (3.1) usually referred “multilayer canopy model.” model, assume \\(A_{n,leaf}^{sunlit}\\) sunlit leaves thick layer can reasonably approximated \\(A_{n,leaf}^{sunlit}\\) calculated infinitely thin layer midpoint thick layer, likewise shaded leaves. accuracy multilayer canopy model expressed Equation (3.1) depend reasonable assumption . Generally, model accurate larger \\(N\\) used. \\(N\\) becomes larger, width thick layer becomes smaller, environmental conditions across thick layer become uniform. course, \\(N \\rightarrow \\infty\\), Riemann sum Equation (3.1) converges back integral Equation (2.1).","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"examples-2","dir":"Articles > Web_only","previous_headings":"3 A Multilayer Canopy Model","what":"Examples","title":"Canopy Photosynthesis Models","text":"Examples multilayer canopy models can found literature; Bonan et al. (2021) contains references many . Despite prevalence, descriptions models rarely contain explicit equation describing exactly relate canopy-level assimilation leaf-level assimilation, done Equation (3.1). example, instead providing equation, Pury Farquhar (1997) write “Canopy photosynthesis rate calculated summation product rate leaf photosynthesis per unit leaf area leaf area class” (page 541).","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"non-multilayer-canopy-models","dir":"Articles > Web_only","previous_headings":"3 A Multilayer Canopy Model","what":"Non-Multilayer Canopy Models","title":"Canopy Photosynthesis Models","text":"Note different numerical integration technique Gaussian quadrature used instead Riemann sum, canopy might divided layers; model considered multilayer canopy model conceptually divided distinct thick layers (J. Goudriaan 1986; Jan Goudriaan 2016).","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"biocros-multilayer-canopy-model","dir":"Articles > Web_only","previous_headings":"","what":"BioCro’s Multilayer Canopy Model","title":"Canopy Photosynthesis Models","text":"BioCro, use multilayer canopy model described Chapter 15 Campbell Norman (1998). Example 15.2 book especially useful demonstrating model’s equations used. However, note example take multilayer approach; instead, considers sunlit shaded leaves. Thus, aspects example directly apply BioCro. example, necessary calculate weighted average diffuse PAR across canopy BioCro’s model. summarize main parts model used BioCro.","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"sunlit-and-shaded-fractions","dir":"Articles > Web_only","previous_headings":"4 BioCro’s Multilayer Canopy Model","what":"Sunlit and Shaded Fractions","title":"Canopy Photosynthesis Models","text":"Equation 15.22 Campbell Norman (1998) calculates fraction sunlit leaves: \\[\\begin{equation}     f_{sunlit}(\\ell) = e^{-K_{direct} \\cdot \\ell}, \\end{equation}\\] \\(K_{direct}\\) canopy extinction coefficient direct radiation. shaded fraction given \\(f_{shaded}(\\ell) = 1 - f_{sunlit}\\). extinction coefficient \\(K_{direct}\\) depends leaf angle distribution direction incoming beam radiation (hence solar zenith angle). See Equation 15.4 details.","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"incident-light","dir":"Articles > Web_only","previous_headings":"4 BioCro’s Multilayer Canopy Model","what":"Incident Light","title":"Canopy Photosynthesis Models","text":"Within canopy, several distinct types light can considered: beam flux just canopy \\(Q_{ob}\\) diffuse flux just canopy \\(Q_{od}\\) diffuse flux within canopy \\(Q_d\\) -scattered flux within canopy \\(Q_{sc}\\) total beam flux (unintercepted beam downscattered beam) within canopy \\(Q_{bt}\\) unintercepted beam flux within canopy \\(Q_b\\) general, broad distinctions location (just canopy within canopy), type (beam flux diffuse flux), source (flux sky flux scattered leaves canopy). Beam flux typically expressed flux density horizontal plane, diffuse flux densities apply surface orientation directional. fluxes related . particular, \\(Q_{bt} = Q_{sc} + Q_b\\) (Equation 15.20). Shaded leaves receive diffuse radiation -scattered radiation. Sunlit leaves receive types radiation addition direct beam radiation. Expressed leaf area basis, flux density incident sunlit shaded leaves (\\(Q_{}^{sunlit}\\) \\(Q_{}^{shaded}\\)) \\[\\begin{equation}     Q_{}^{sunlit} = K_{direct} \\cdot Q_{ob} + Q_d + Q_{sc} \\end{equation}\\] \\[\\begin{equation}     Q_{}^{shaded} = Q_d + Q_{sc} \\end{equation}\\] (Equations 15.18 15.19). term \\(K_{direct} \\cdot Q_{ob}\\) average direct beam radiation accounting distribution leaf angles. Solar diffuse radiation originates sky due atmospheric scattering sun’s light changes within canopy according \\[\\begin{equation}     Q_d(\\ell) = Q_{od} \\cdot e^{- \\sqrt{\\alpha} \\cdot K_{diffuse} \\cdot \\ell}, \\end{equation}\\] \\(\\alpha\\) absorptivity leaves canopy \\(K_{diffuse}\\) extinction coefficient diffuse radiation (see Figure 15.4 surrounding discussion). factor \\(\\sqrt{\\alpha}\\) models effect light scattering transmission leaves. Equation 15.17. Additional diffuse radiation caused scattering transmission direct beam leaves. can calculated difference total beam radiation unintercepted beam radiation follows: \\[\\begin{equation}     Q_{sc}(\\ell) = Q_{bt}(\\ell) - Q_b(\\ell) \\end{equation}\\] \\[\\begin{equation}     Q_{bt}(\\ell) = Q_{ob} \\cdot e^{- \\sqrt{\\alpha} \\cdot K_{direct} \\cdot \\ell} \\end{equation}\\] \\[\\begin{equation}     Q_b(\\ell) = Q_{ob} \\cdot e^{- K_{direct} \\cdot \\ell}. \\end{equation}\\] Equations 15.20, 15.15, 15.16.","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"absorbed-shortwave-energy","dir":"Articles > Web_only","previous_headings":"4 BioCro’s Multilayer Canopy Model","what":"Absorbed Shortwave Energy","title":"Canopy Photosynthesis Models","text":"leaf receives light spanning wide range wavelengths. light energy found photosynthetically active radiation (PAR) near-infrared (NIR) bands (400 - 700 nm 700 - 2500 nm, respectively). incident light energy PAR band can estimated incident PPFD assuming value average energy per PAR photon: \\[\\begin{equation}     I_{}^{PAR} = Q_{} \\cdot E \\end{equation}\\] \\(E\\) average energy per PAR photon. absorbed PAR energy can found using equation absorption thin layer, simply multiplies incident radiation absorptivity: \\[\\begin{equation}     I_{abs}^{PAR} = \\alpha_{PAR} \\cdot I_{}^{PAR} \\end{equation}\\] \\(\\alpha_{PAR} = 1 - T_{PAR} - R_{PAR}\\) PAR absorptivity, \\(T_{PAR}\\) \\(R_{PAR}\\) leaf transmittance reflectance PAR band, respectively. direct sunlight, amount energy NIR band can estimated \\(^{PAR}\\) using known fraction \\(f_{PAR}\\): \\[\\begin{equation}     ^{NIR} = ^{PAR} \\cdot (1 - f_{PAR}) / f_{PAR} \\tag{4.1} \\end{equation}\\] \\(f_{PAR}\\) fraction shortwave energy PAR band. PAR NIR light reflected transmitted differently leaves canopy, fraction changes throughout canopy. Rather trying predict \\(f_{PAR}(\\ell)\\), simply calculate \\(I_{}^{NIR}\\) just canopy top using Equation (4.1), use canopy light transmission functions described calculate \\(I_{}^{NIR}(\\ell)\\). , point canopy, total absorbed shortwave energy can calculated \\[\\begin{equation}     I_{abs}^{shortwave} = \\alpha_{PAR} \\cdot I_{}^{PAR} +         \\alpha_{NIR} \\cdot I_{}^{NIR} \\end{equation}\\]","code":""},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"biocro-examples","dir":"Articles > Web_only","previous_headings":"","what":"BioCro Examples","title":"Canopy Photosynthesis Models","text":"BioCro’s ten layer canopy properties module can used calculate plot several variables discussed . use solar zenith angle 40 degrees, total canopy LAI 3, total incident PPFD 2000 (80 percent beam) match example 15.2 textbook. parameter values come Soybean-BioCro. First can plot fractions sunlit shaded leaves.  Now can plot incident PPFD leaves within canopy. Q_above total incident PPFD just top canopy.  can also plot absorbed shortwave energy leaves within canopy.  can also plot fraction absorbed shortwave energy PAR band canopy.  can see although half solar light energy lies PAR band, sunlit leaves absorb PAR energy NIR energy. Deeper within canopy, fraction absorbed light energy PAR photons decreases. Shaded leaves deep within canopy may absorb NIR PAR energy. light levels vary within canopy, leaf-level assimilation rates also vary. can show dependence simulating light response curves different temperatures.  Finally, can see assimilation rates change throughout canopy. use air temperature 25 degrees C.  canopy assimilation module also calculates outputs leaf temperature.  can also see total canopy assimilation rate (units Mg / ha / hr): Another potentially interesting output total PPFD absorbed canopy. can check make sure smaller incident PPFD just canopy. calculated BioCro, calculate . can define total PPFD absorbed canopy \\[\\begin{equation}     Q_{abs,canopy} = \\int_{\\ell = 0}^{L} \\left[         Q_{abs,sunlit}(\\ell) \\cdot f_{sunlit}(\\ell) +             Q_{abs,shaded}(\\ell) \\cdot f_{shaded}(\\ell) \\right] d \\ell. \\end{equation}\\] Taking numeric approximation integral using \\(Q_{abs} = \\alpha \\cdot Q_{}\\), can write multilayer canopy version: \\[\\begin{equation}     Q_{abs,canopy} = \\alpha \\cdot \\frac{L}{N} \\cdot \\sum_{= 0}^{N - 1} \\left[         Q_{,sunlit}(\\ell_i) \\cdot f_{sunlit}(\\ell_i) +             Q_{,shaded}(\\ell_i) \\cdot f_{shaded}(\\ell_i) \\right] \\end{equation}\\] can done R follows:","code":"library(BioCro) library(lattice)  # Set inputs zenith_angle  <- 40   # degrees LAI           <- 3    # dimensionless total_ppfd    <- 2000 # micromol / m^2 / s beam_fraction <- 0.8  # dimensionless windspeed     <- 2.0  # m / s  # Calculate total PAR energy just above the canopy total_par <- total_ppfd * soybean$parameters$par_energy_content  # Run the ten-layer canopy properties module canopy_properties <- evaluate_module(     'BioCro:ten_layer_canopy_properties',     within(soybean$parameters, {         cosine_zenith_angle = cos(zenith_angle * pi / 180)         lai = LAI         par_incident_diffuse = total_par * (1 - beam_fraction)         par_incident_direct = total_par * beam_fraction         windspeed = windspeed     }) )  # Make a helping function for extracting subsets of the results canopy_profile <- function(basename, reslist) {     vnames <- grep(         paste0(basename, '_layer_[0-9]'),         names(reslist),         value = TRUE     )     as.numeric(reslist[vnames]) }  # Set the layer numbers nlayer <- seq(0, 9) # Plot sunlit and shaded fractions f_sunlit <- canopy_profile('sunlit_fraction', canopy_properties) f_shaded <- canopy_profile('shaded_fraction', canopy_properties)  xyplot(     f_sunlit + f_shaded ~ nlayer,     type = 'b',     pch = 16,     auto.key = list(space = 'top'),     xlab = 'Canopy layer',     ylab = 'Fraction of leaves',     ylim = c(0, 1) ) # Plot incident light levels Q_sunlit <- canopy_profile('sunlit_incident_ppfd', canopy_properties) Q_shaded <- canopy_profile('shaded_incident_ppfd', canopy_properties) Q_above  <- rep_len(total_ppfd, length(nlayer))  xyplot(     Q_sunlit + Q_shaded + Q_above ~ nlayer,     type = 'b',     pch = 16,     cex = c(1, 1, 0),     lty = c(1, 1, 2),     auto.key = list(space = 'top'),     xlab = 'Canopy layer',     ylab = 'Incident PPFD (micromol / m^2 / s)',     ylim = c(0, 2100) ) # Plot absorbed shortwave energy I_abs_sunlit <- canopy_profile('sunlit_absorbed_shortwave', canopy_properties) I_abs_shaded <- canopy_profile('shaded_absorbed_shortwave', canopy_properties)  xyplot(     I_abs_sunlit + I_abs_shaded ~ nlayer,     type = 'b',     pch = 16,     auto.key = list(space = 'top'),     xlab = 'Canopy layer',     ylab = 'Absorbed shortwave energy (J / m^2 / s)',     ylim = c(0, 500) ) # Calculate absorptivity in the PAR band absorptivity_par <- with(soybean$parameters, {1 - leaf_transmittance_par - leaf_reflectance_par})  # Calculate absorbed PAR energy par_abs_sunlit <- Q_sunlit * soybean$parameters$par_energy_content * absorptivity_par par_abs_shaded <- Q_shaded * soybean$parameters$par_energy_content * absorptivity_par  # Calculate the fraction of absorbed energy in the PAR band sunlit_par_fraction <- par_abs_sunlit / I_abs_sunlit shaded_par_fraction <- par_abs_shaded / I_abs_shaded  # Plot the fractions xyplot(     sunlit_par_fraction + shaded_par_fraction ~ nlayer,     type = 'b',     pch = 16,     auto.key = list(space = 'top'),     xlab = 'Canopy layer',     ylab = 'Fraction of absorbed light energy from PAR photons',     ylim = c(0, 1) ) # Simulate an A-Q curve aq_curve <- module_response_curve(     'BioCro:c3_assimilation',     within(soybean$parameters, {         StomataWS = 1         gbw = 1.2         rh = 0.6     }),     within(         expand.grid(             Tleaf = seq(15, 40, by = 5),             Qabs = seq(0, total_ppfd * absorptivity_par, by = 5)         ),         {temp = Tleaf}     ) )  # Include incident Q aq_curve$Qin <- aq_curve$Qabs / absorptivity_par  # Plot it xyplot(     Assim ~ Qin,     group = Tleaf,     data = aq_curve,     type = 'l',     auto.key = list(space = 'right'),     grid = TRUE,     xlab = 'Qin (micromol / m^2 / s)',     ylab = 'Leaf-level CO2 assimilation rate (micromol / m^2 / s)',     ylim = c(-5, 30) ) # Get boundary layer conductance gbw_canopy <- evaluate_module(     'BioCro:canopy_gbw_thornley',     c(soybean$parameters, list(         canopy_height = LAI / soybean$parameters$heightf,         windspeed = windspeed     )) )$gbw_canopy  # Get absorbed longwave energy air_temperature <- 25  absorbed_longwave <- evaluate_module(     'BioCro:stefan_boltzmann_longwave',     list(temp = air_temperature, emissivity_sky = soybean$parameters$emissivity_sky) )$absorbed_longwave  # Calculate canopy assimilation rates canopy_assimilation <- evaluate_module(     'BioCro:ten_layer_c3_canopy',     within(c(soybean$parameters, canopy_properties), {         StomataWS = 1         rh = 0.6         temp = air_temperature         gbw_canopy = gbw_canopy         absorbed_longwave = absorbed_longwave     }) )  # Plot canopy assimilation rates Assim_sunlit <- canopy_profile('sunlit_Assim', canopy_assimilation) Assim_shaded <- canopy_profile('shaded_Assim', canopy_assimilation)  xyplot(     Assim_sunlit + Assim_shaded ~ nlayer,     type = 'b',     pch = 16,     auto.key = list(space = 'top'),     xlab = 'Canopy layer',     ylab = 'Net CO2 assimilation rate (micromol / m^2 / s)',     ylim = c(0, 25) ) # Plot canopy leaf temperatures Tleaf_sunlit <- canopy_profile('sunlit_leaf_temperature', canopy_assimilation) Tleaf_shaded <- canopy_profile('shaded_leaf_temperature', canopy_assimilation)  xyplot(     Tleaf_sunlit + Tleaf_shaded ~ nlayer,     type = 'b',     pch = 16,     auto.key = list(space = 'top'),     xlab = 'Canopy layer',     ylab = 'Leaf temperature (degrees C)' ) canopy_totals <- evaluate_module(     'BioCro:ten_layer_canopy_integrator',     within(c(canopy_properties, canopy_assimilation), {         growth_respiration_fraction = 0         lai = LAI     }) )  canopy_totals$canopy_assimilation_rate #> [1] 37.74112 Q_abs_canopy <-     absorptivity_par * (LAI / 10) *         sum(Q_sunlit * f_sunlit + Q_shaded * f_shaded)  Q_abs_canopy #> [1] 1407.459  Q_abs_canopy / total_ppfd #> [1] 0.7037294"},{"path":"/articles/web_only/canopy_photosynthesis.html","id":"thornley","dir":"Articles > Web_only","previous_headings":"","what":"Selected Passages from Thornley (1990)","title":"Canopy Photosynthesis Models","text":"reproduce sections equations John H. M. Thornley Johnson (1990) book available electronic form. Section 10.1.1 (Light interception attenuation): light attenuation canopies described Beer’s law, discussed Chapter 8. monocultures (eqn (8.1a)) \\(\\qquad (l) = I_0 e^{-kl}\\), \\(\\qquad\\) (10.1a) \\(I_0\\) \\((l)\\) W (m\\(^2\\) ground)\\(^{-1}\\) photosynthetically active radiation (PAR) irradiances per unit horizontal area within canopy respectively cumulative leaf area index \\(l\\) \\(k\\) extinction coefficient. irradiance incident surface leaf within canopy depth \\(l\\) \\(\\qquad I_1(l) = \\frac{k}{1 - m}(l)\\) W (m\\(^2\\) leaf)\\(^{-1}\\), \\(\\qquad\\) (10.1b) \\(m\\) leaf transmission coefficient. Section 10.1.2 (Single-leaf photosynthesis): Throughout analysis, term photosynthesis taken single-leaf gross photosynthesis minus photorespiration defined eqn (9.10i): \\(\\qquad P_1(I_1) = \\frac{1}{2 \\theta} \\left\\{ \\alpha I_1 + P_m - \\left[(\\alpha I_1 + P_m)^2 - 4 \\theta \\alpha I_1 P_m \\right]^{1/2} \\right\\}\\), \\(\\qquad\\) (10.2a) units kg CO\\(_2\\) (m\\(^2\\) leaf)\\(^{-1}\\) s\\(^{-1}\\). \\(\\alpha\\) photochemical efficiency, units kg CO\\(_2\\) J\\(^{-1}\\), \\(P_m\\) asymptotic value \\(P_1\\) saturating irradiance, \\(\\theta\\) dimensionless parameter (\\(0 \\leq \\theta \\leq 1\\)). (Note notation used slightly different used Chapter 9 subscript 1 used denote single leaf photosynthesis.) Section 10.2.1 (Instantaneous canopy photosynthesis): instantaneous rate canopy photosynthesis , general, given \\(\\qquad P = \\int_0^L P_1(I_1) dl\\), \\(\\qquad\\) (10.4a) units kg CO\\(_2\\) (m\\(^2\\) ground)\\(^{-1}\\) s\\(^{-1}\\), \\(l\\) cumulative leaf area index \\(L\\) total leaf area index. Section 10.5 (Discussion): , course, situations level approximation leaf photosynthesis level, description light interception, oversimplified. example, included possibility diurnal variation stomatal conductance (response factors leaf water potential carbohydrate content) may affect rate leaf photosynthesis. cases necessary [] use general concepts developed evaluate integrals - either depth canopy throughout day - numerically.","code":""},{"path":[]},{"path":"/articles/web_only/dynamical_systems.html","id":"dynamical-systems-real-and-mathematical","dir":"Articles > Web_only","previous_headings":"","what":"Dynamical systems, real and mathematical","title":"BioCro as a Dynamical System","text":"book Computation, Dynamics, Cognition (Giunti 1997), Giunti distinguishes real dynamical systems mathematical dynamical systems: real dynamical system real system changes time. Therefore, since real system can thought change time (respect), real system real dynamical system. mathematical dynamical system, hand, abstract mathematical structure can used describe change real system evolution series states. emphasized create mathematical system model real one, just quantifying attributes real system; also selecting attributes incorporate model ones ignore. endless variety attributes describe state real system, can’t even begin hope able model . stated Giunti quote, mathematical dynamical system describe change real system evolution series states. (now, interpret “series states” loosely, encompass models describe change continuous evolution system state well describe change terms discrete sequence states.) real usefulness mathematical structure, however, comes goes beyond merely describing series states: real power comes able derive complete picture evolution system partial knowledge system, knowledge possibly consisting , example, state system particular time, environment system operating, general knowledge processes determine system behaves.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"an-example-the-falling-body-problem","dir":"Articles > Web_only","previous_headings":"Dynamical systems, real and mathematical","what":"An example: the falling-body problem","title":"BioCro as a Dynamical System","text":"classic example physics falling-body problem: Given stationary, compact, relatively dense object dropped height h0h_0 surface earth, height duration time tt? partial knowledge system consists : initial height h0h_0 object initial velocity v0v_0 object (system, ’ll assume v0=0v_0 = 0: object stationary begin .) magnitude, ’ll call gg, downward acceleration body caused earth’s gravitational field use function h(t)h(t) embody complete description evolution system—h(t)h(t) tells height body elapsed time tt—initial knowledge system consists system equations putting certain constraints function hh:  $$\\begin{align}   h(0)         & = h_0      \\notag \\\\   h'(t)\\big|_{t=0} & = 0    \\label{eq:ode-system} \\\\   h''(t)       & = -g       \\notag \\end{align}$$  (third constraint accurately written  $$\\begin{equation*}   h''(t) = -g \\quad\\text{\\emph{} h(t) > 0}, \\end{equation*}$$  simplicity, consider system durations sufficiently small object yet hit ground.) field differential equations, known initial-value problem, can shown unique solution given  h(t)=h0−1/2gt2.\\begin{equation*}   h(t) = h_0 - 1/2\\,gt^2. \\end{equation*} Thus, knowing initial height velocity object basic principles physics, able obtain complete description evolution “falling object” system time.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"some-comments-on-mathematical-abstraction","dir":"Articles > Web_only","previous_headings":"Dynamical systems, real and mathematical","what":"Some comments on mathematical abstraction","title":"BioCro as a Dynamical System","text":"mentioned, mathematical dynamical system purports model real system necessarily leave much . choosing attributes retain abstract model, two main considerations: First, attributes system interest us? model plant growth, might include, example, rate growth (mass accumulation) plant; nutrient energy content growing plant; effects group plants surrounding environment, including temperature CO2\\text{CO}_\\text{2} content surrounding air, rate erosion soil substrate; resilience plant drought conditions. Second, attributes may particular intrinsic interest may help predicting behavior attributes interest. Returning falling-object model moment, primary object interest real falling object system height object given time, certain things system may safely ignore: color object time day, example, probably bearing trajectory object’s motion. hand, knowing velocity object given time crucial predicting height time, even may intrinsic interest knowing velocity. attributes bearing motion object (give examples) size shape object mass object air currents vicinity object’s path Italian experimenters 16th century demonstrated, weight compact relatively dense object little effect upon rate falls. turns , matter fact, predictive accuracy model, look height downward velocity object (ambient gravitational field) ignore attributes system, rather good case compact, relatively-dense objects. course, consider non-compact object relatively low density, feather, model may good job predicting path falls air. may find order accurately model free-fall feather, need include additional attributes system, help us take account effects air resistance. process, whereby model compared observations updated fails predict behavior real system meant represent, key part scientific process responsible great deal progress understanding. Thus, never problem process abstraction left many details; instead opportunity learn real world model. central goal BioCro make relatively easy add new components existing model, allowing type model development occur rapidly.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"continuous-time-versus-discrete-time","dir":"Articles > Web_only","previous_headings":"","what":"Continuous time versus discrete time","title":"BioCro as a Dynamical System","text":"system just shown—mathematical model real-world dynamical system—differential equation constraining solution exact solution easily-computable function. often, however, able find exact solution, settle numerical solution. show model falling-object system numerically, even though one case don’t really need resort methods.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"eulers-method","dir":"Articles > Web_only","previous_headings":"Continuous time versus discrete time","what":"Euler’s method","title":"BioCro as a Dynamical System","text":"Euler’s method, basic methods numerical integration ordinary differential equations, may applied system current rate change state variables may expressed function current state. , use state variable mean quantifiable attribute system whose value like predict; state system conglomeration values variables particular time. Euler’s method makes assumption , given known state system particular time, state system small interval time later can closely approximated assuming rate change state variable remains essentially constant small time interval. 𝐬\\mathbf{s} denotes state, 𝐬(t)\\mathbf{s}(t) denoting value time tt, xx one state variables, x(t)x(t) denoting value time tt, , given  dx/dt=f(𝐬),\\begin{equation*}   dx/dt = f(\\mathbf{s}), \\end{equation*} assume sufficiently small interval time Δt\\Delta t,  x(t+Δt)≈x(t)+f(𝐬(t))⋅Δt.\\begin{equation*}   x(t+\\Delta t) \\approx x(t) + f(\\mathbf{s}(t))\\cdot\\Delta t. \\end{equation*}","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"applying-eulers-method-to-the-falling-body-problem","dir":"Articles > Web_only","previous_headings":"Continuous time versus discrete time","what":"Applying Euler’s method to the falling-body problem","title":"BioCro as a Dynamical System","text":"system equations , hh system variable. valid equation gives dh/dtdh/dt function state state represented hh alone. solve problem, also consider velocity part state. think state system record system particular time can used predict future state, makes sense velocity included. example, know position object even know moving upwards downwards, able predict position near future. now, states system two components, height velocity, can think state 𝐬\\mathbf{s} point 2-dimensional Euclidean space, ,  𝐬=(s0,s1).\\begin{equation*}   \\mathbf{s} = (s_0, s_1). \\end{equation*} identify height hh first component s0s_0 velocity vv second component s1s_1. consider vv velocity upward direction object falling, v<0v < 0. write v(t)v(t) denote vv function time. Since v=dh/dtv = dh/dt, can rewrite system  $$\\begin{align}   dh/dt & = v   \\label{eq:deriv_h} \\\\   dv/dt & = -g  \\label{eq:deriv_v} \\\\   h(0)  & = h_0 \\notag \\\\   v(0)  & = 0   \\notag \\end{align}$$  Now can use equations obtain Euler method formulas estimating state time t+Δtt + \\Delta t state time tt:  h(t+Δt)=h(t)+v(t)⋅Δtv(t+Δt)=v(t)−g⋅Δt\\begin{align*}   h(t + \\Delta t) & = h(t) + v(t)\\cdot\\Delta t \\\\   v(t + \\Delta t) & = v(t) - g\\cdot\\Delta t \\end{align*} Let us consider system sequence times 0=t0,t1,t2,t3,…0 = t_0, t_1, t_2, t_3, \\dots ii, ti+1=ti+Δtt_{+ 1} = t_i + \\Delta t. , let write δ\\delta Δt\\Delta t, let π0\\pi_0 π1\\pi_1 denote projection state 𝐬\\mathbf{s} onto components,  $$\\begin{align}   \\pi_0(\\mathbf{s}) & = s_0 \\\\   \\intertext{}   \\pi_1(\\mathbf{s}) &= s_1. \\end{align}$$  Now can write recursive definition state 𝐬\\mathbf{s} function tt:  $$\\begin{align}   \\mathbf{s}(t_0) &= (h_0, 0) \\notag \\\\   \\mathbf{s}(t_{+ 1}) &= (\\pi_0(\\mathbf{s}(t_i)) +  \\delta \\cdot \\pi_1(\\mathbf{s}(t_i)),                          \\pi_1(\\mathbf{s}(t_i)) - \\delta\\cdot g)\\quad\\text{$\\geq$0}.                          \\label{eq:falling_body_recursion} \\end{align}$$  Note also express definition using original variable names without using projection operators:  $$\\begin{align*}   \\mathbf{s}(t_0) &= (h_0, 0) \\notag \\\\   \\mathbf{s}(t_{+ 1}) &= (h(t_i) +  \\Delta t \\cdot v(t_i),                          v(t_i) - \\Delta t \\cdot g)\\quad\\text{$\\geq$0}. \\end{align*}$$  Thus, Equation may seem like complicated way write relatively simple rule relating height, velocity, acceleration. notation , however, become useful later consider systems less terms named state variables instead think variables coordinates point Euclidean space comprising system state space.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"note-about-abstraction-and-recursive-systems","dir":"Articles > Web_only","previous_headings":"Continuous time versus discrete time","what":"Note about abstraction and recursive systems","title":"BioCro as a Dynamical System","text":"just performed following abstraction arrive recursively-defined function giving state system function time:  $$\\begin{equation*}   \\begin{array}{c}     \\text{\\sc real system} \\\\     \\downarrow \\\\     \\text{\\sc continuous mathematical system (ODE system)} \\\\     \\downarrow \\\\     \\text{\\sc discrete-time approximation (recursive equations)}   \\end{array} \\end{equation*}$$  One important point process developing recursive equation (discrete-time approximation) depends algorithm chosen solving continuous ODE system. example, chosen use fourth-order Runge-Kutta method rather Euler’s method solve falling-body problem, arrived recursive definition different Equation . Nevertheless, represent continuous system, (usually) produce similar sequence states. also pointed discrete-time abstract dynamical systems arise abstractions real systems even abstractions continuous-time abstract systems.1 Consider, example, system state space 𝐙2\\mathbf{Z}^2 consisting ordered pairs 𝐯=(v0,v1)\\mathbf{v} = (v_0, v_1) integers, transition rule  𝐯(ti+1)=(π1(𝐯(ti)),π0(𝐯(ti))+π1(𝐯(ti))).\\begin{equation*}   \\mathbf{v}(t_{+ 1}) = (\\pi_1(\\mathbf{v}(t_i)), \\pi_0(\\mathbf{v}(t_i)) + \\pi_1(\\mathbf{v}(t_i))). \\end{equation*} Given initial state 𝐯(t0)\\mathbf{v}(t_0), now way compute state 𝐯(ti)\\mathbf{v}(t_i) time tit_i. abstract dynamical system may relationship real dynamical system might imagine, abstract dynamical system nevertheless. (take 𝐯(t0)=(0,1)\\mathbf{v}(t_0) = (0, 1), way, function F:𝐍→𝐙F: \\mathbf{N}\\\\mathbf{Z} defined rule  ↦π0(𝐯(ti))\\begin{equation*}   \\mapsto \\pi_0(\\mathbf{v}(t_i)) \\end{equation*} defines Fibonacci sequence 0,1,1,2,3,5,8,13,…0, 1, 1, 2, 3, 5, 8, 13, \\dots\\,.) Another class discrete-time abstract dynamical systems cellular automata. , however, may value modeling real-world phenomena. (See, example, Deutsch (2005).)","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"an-overview-of-some-abstract-dynamical-system-formulations","dir":"Articles > Web_only","previous_headings":"","what":"An overview of some abstract dynamical system formulations","title":"BioCro as a Dynamical System","text":"section provide short survey formulations abstract dynamical systems; later sections, discuss formulations relate types systems represented BioCro. (insightful thoroughly abstract mathematical study theory general systems, dynamical otherwise, see Mesarović Takahara (1975).)","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"some-notational-preliminaries","dir":"Articles > Web_only","previous_headings":"An overview of some abstract dynamical system formulations","what":"Some notational preliminaries","title":"BioCro as a Dynamical System","text":"common, take f:C→Bf: C \\B mean “ff function domain CC taking values set BB.” Usually, means f(c)f(c) defined every c∈Cc\\C, follows, won’t always entirely strict . Following Vaught (1985), write BCB^C denote set functions ff.2 use 𝐑\\mathbf{R}, 𝐙\\mathbf{Z}, 𝐍\\mathbf{N} denote real numbers, integers, natural numbers (finite ordinals, including zero), respectively. 𝐙+\\mathbf{Z}^+ denotes positive integers. Following von Neumann, sometimes convenient identify natural number nn set predecessors. example, 5={0,1,2,3,4}5 = \\{0, 1, 2, 3, 4\\}. particularly useful speaking Euclidian spaces. example, 𝐑3\\mathbf{R}^3, Euclidean 3-space, usually thought set 3-coordinate vectors (x,y,z)(x, y, z). can equally well consider set mappings v:{0,1,2}→𝐑v: \\{0,1,2\\}\\\\mathbf{R}, , using set--functions notation given , can denoted 𝐑{0,1,2}\\mathbf{R}^{\\{0,1,2\\}}. (, using von Neumann’s notion ordinals, , , denoted 𝐑3\\mathbf{R}^3, since 3={0,1,2}3=\\{0,1,2\\}!) Thus, can identify 3-tuple (x,y,z)(x,y,z) mapping v:{0,1,2}→𝐑v: \\{0,1,2\\}\\\\mathbf{R}, v(0)=xv(0) = x, v(1)=yv(1) = y, v(2)=zv(2) = z. often write viv_i place v()v() identify mapping v:{0,1,2,…,n−1}→𝐑v: \\{0, 1, 2, \\dots, n-1\\}\\\\mathbf{R} n-tuple n-coordinate vector 𝐯=(v0,v1,v2,…,vn−1)\\mathbf{v}=(v_0, v_1, v_2, \\dots, v_{n-1}). Often, however, level indirection involved use notation viv_i coordinate 𝐯\\mathbf{v}. example, 𝐔\\mathbf{U} proper subspace 𝐑n\\mathbf{R}^n 𝐔=𝐑U\\mathbf{U} = \\mathbf{R}^U proper subset UU n={0,1,…,n−1}n = \\{0,1,\\dots,n-1\\}, may regard uiu_i value taken iith member UU arbitrary fixed ordering members UU. even allow case function domain UU isn’t set integers just finite collection objects. case, context considering vectors (qua mappings) 𝐯∈𝐑U\\mathbf{v}\\\\mathbf{R}^U, viv_i may denote alternately ithi^\\text{th} member UU fixed enumeration; name variable associated member; value ithi^\\text{th} coordinate particular vector 𝐯\\mathbf{v}. later case, viv_i doesn’t abbreviate v()v() function v∈𝐑Uv\\\\mathbf{R}^U. Rather, stands v(ui)v(u_i), uiu_i denotes “ithi^\\text{th} member UU.” function f:C→Bf: C \\B may identified set {(c,f(c)):c∈C}\\{(c, f(c))\\,:\\,c\\C\\}. Thus, target set BB intrinsic part function ff. , defining image set ff  Imf={b:exists c∈C (c,b)∈f},\\begin{equation*}     \\operatorname{Im}f = \\{b\\,: \\text{exists $c\\C$ } (c, b) \\f\\}, \\end{equation*} can least say Imf⊆B\\operatorname{Im}f\\subseteq B. Given function f:C→Bf: C \\B subset C0⊆CC_0\\subseteq C, can define f|C0f|C_0, restriction ff C0C_0,  f|C0:={(c,b)∈f:c∈C0}\\begin{equation*}     f|C_0 := \\{(c, b) \\f\\,:\\,c\\C_0\\} \\end{equation*} shall particularly interested restrictions functions specifying points Euclidean space. Suppose 𝐱∈𝐑n\\mathbf{x}\\\\mathbf{R}^n, let WW arbitrary subset n={0,1,2,…,n−1}n=\\{0,1,2,\\dots,n-1\\}. 𝐱|W\\mathbf{x}|W member 𝐑W\\mathbf{R}^W, set functions assign real number member WW. regard 𝐑W\\mathbf{R}^W subspace 𝐑n\\mathbf{R}^n. Moreover, WW kk members, 𝐑W\\mathbf{R}^W isomorphic , necessarily equal , Euclidean space 𝐑k\\mathbf{R}^k. (𝐑W\\mathbf{R}^W 𝐑k\\mathbf{R}^k equal iff W=kW=k (, iff W={0,1,…,k−1})W = \\{0, 1, \\dots, k-1\\}).) define projection mapping πn→W:𝐑n→𝐑W\\pi^{n\\W}: \\mathbf{R}^n\\\\mathbf{R}^W rule  v↦v|W.\\begin{equation*}     v \\mapsto v|W. \\end{equation*} generally, given two finite sets W⊆UW\\subseteq U (necessarily sets integers), may define projection mapping πU→W:𝐑U→𝐑W\\pi^{U\\W}: \\mathbf{R}^U\\\\mathbf{R}^W rule  v∈𝐑U↦v|W.\\begin{equation*}    v \\\\mathbf{R}^U \\mapsto v|W. \\end{equation*} Just can restrict domain function, can expand well. Suppose two functions f∈𝐑Xf\\\\mathbf{R}^X g∈𝐑Yg\\\\mathbf{R}^Y, either XX YY disjoint, f(z)=g(z)f(z) = g(z) z∈X∩Yz\\X\\cap Y. define union f∪gf\\cup g ff gg rule  (f∪g)(z)={f(z)z∈X,g(z)z∈Y∖X.\\begin{equation*}     (f\\cup g)(z) = \\begin{cases}            f(z) & \\text{$z\\X$,} \\\\            g(z) & \\text{$z\\Y\\smallsetminus X$.}        \\end{cases} \\end{equation*} Note exactly function get regarding functions sets ordered pairs taking literal (set) union ff gg. Also, clearly,  $$\\begin{align*}     f &= (f\\cup g)|X \\\\     \\intertext{}     g &= (f\\cup g)|Y. \\end{align*}$$ Lastly, given two sets AA BB, define Cartesian product AA BB set ordered couples: ×B={(,b):∈b∈B}\\begin{equation*}     \\times B = \\{(, b): \\\\text{ } b\\B\\} \\end{equation*} =𝐑XA=\\mathbf{R}^X B=𝐑YB=\\mathbf{R}^Y X∩Y=∅X\\cap Y=\\emptyset, natural isomorphism 𝐑X×𝐑Y\\mathbf{R}^X\\times\\mathbf{R}^Y 𝐑X∪Y\\mathbf{R}^{X\\cup Y} given  (𝐱,𝐲)↦𝐱∪𝐲.\\begin{equation*}     (\\mathbf{x}, \\mathbf{y}) \\mapsto \\mathbf{x}\\cup\\mathbf{y}. \\end{equation*} (inverse mapping given 𝐯↦(𝐯|X,𝐯|Y)\\mathbf{v} \\mapsto (\\mathbf{v}|X, \\mathbf{v}|Y) 𝐯∈𝐑X∪Y\\mathbf{v}\\\\mathbf{R}^{X\\cup Y}.)  convenient warranted, consider 𝐑X×𝐑Y\\mathbf{R}^X\\times\\mathbf{R}^Y 𝐑X∪Y\\mathbf{R}^{X\\cup Y} identical. notion Cartisean product can extended three sets. example, since natural isomophism (×B)×C(\\times B)\\times C ×(B×C)\\times(B\\times C), can just write product ×B×CA\\times B\\times C write members ordered triplets (,b,c)(,b,c) (instead ((,b),c)((,b),c) (,(b,c)(,(b,c)).","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"the-khalil-model","dir":"Articles > Web_only","previous_headings":"An overview of some abstract dynamical system formulations","what":"The Khalil model","title":"BioCro as a Dynamical System","text":"first model consider described Khalil (Khalil 2002). model expressive flexible, believe intuitively natural way view sort systems BioCro deals systems level (Section ). opening chapter, author introduces dynamical systems finite collection coupled first-order ordinary differential equations ẋ0=f0(t,x0,…,xn−1,u0,…,−1)ẋ1=f1(t,x0,…,xn−1,u0,…,−1)⋮ẋn−1=fn−1(t,x0,…,xn−1,u0,…,−1).\\begin{align*}   \\dot{x}_0 &= f_0(t, x_0, \\dots, x_{n-1}, u_0, \\dots, u_{p-1}) \\\\   \\dot{x}_1 &= f_1(t, x_0, \\dots, x_{n-1}, u_0, \\dots, u_{p-1}) \\\\   &\\; \\vdots \\\\   \\dot{x}_{n-1} &= f_{n-1}(t, x_0, \\dots, x_{n-1}, u_0, \\dots, u_{p-1}). \\end{align*} somewhat general system considered Section derivatives depend upon state variables x0,x1,…,xn−1x_0, x_1, \\dots, x_{n-1}, also upon time tt Khalil refers input variables u0,u1,…,−1u_0, u_1, \\dots, u_{p-1}. Defining  𝐱=[x0x1⋮⋮xn−1],𝐮=[u0u1⋮⋮−1],𝐟(t,𝐱,𝐮)=[f0(t,𝐱,𝐮)f1(t,𝐱,𝐮)⋮⋮fn−1(t,𝐱,𝐮)],\\begin{equation}   \\mathbf{x} = \\begin{bmatrix}                      x_0 \\\\                      x_1 \\\\                      \\vdots \\\\                      \\vdots \\\\                      x_{n-1}                \\end{bmatrix},\\quad   \\mathbf{u} = \\begin{bmatrix}                      u_0 \\\\                      u_1 \\\\                      \\vdots \\\\                      \\vdots \\\\                      u_{p-1}                \\end{bmatrix},\\quad   \\mathbf{f}(t, \\mathbf{x}, \\mathbf{u}) = \\begin{bmatrix}                      f_0(t, \\mathbf{x}, \\mathbf{u}) \\\\                      f_1(t, \\mathbf{x}, \\mathbf{u}) \\\\                      \\vdots \\\\                      \\vdots \\\\                      f_{n-1}(t, \\mathbf{x}, \\mathbf{u})                \\end{bmatrix}, \\label{eq:khalil_vectors} \\end{equation} state equation may written succinctly vector equation  𝐱̇=𝐟(t,𝐱,𝐮).\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}, \\mathbf{u}). \\label{eq:Khalil_state_equation} \\end{equation} (Note Khalil actually uses 1-based indexing vector coordinates exposition, vector 𝐱\\mathbf{x}, example, defined  𝐱=[x1x2⋮⋮xn].\\begin{equation*}   \\mathbf{x} = \\begin{bmatrix}                      x_1 \\\\                      x_2 \\\\                      \\vdots \\\\                      \\vdots \\\\                      x_n                \\end{bmatrix}. \\end{equation*} use 0-based indexing instead order consistent parts article.)","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"variants-of-khalils-model","dir":"Articles > Web_only","previous_headings":"An overview of some abstract dynamical system formulations > The Khalil model","what":"Variants of Khalil’s model","title":"BioCro as a Dynamical System","text":"point, worth bringing two restricted versions Khalil model. first equation can written  𝐱̇=𝐟(t,𝐱).\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}). \\label{eq:unforced_state_equation} \\end{equation} Khalil refers unforced state equation: lacks explicit mention inputs. , points , input can specified explicit function time,  $$\\begin{align}   \\mathbf{u} &= \\boldsymbol\\gamma(t), \\\\   \\intertext{explicit function state,}   \\mathbf{u} &= \\boldsymbol\\gamma(\\mathbf{x}), \\\\   \\intertext{explicit function ,}   \\mathbf{u} &= \\boldsymbol\\gamma(t, \\mathbf{x}), \\end{align}$$  equation form can always reduced equation form . Khalil goes mention one particular special case class systems described equation : namely, autonomous time-invariant. system autonomous function ff depend explicitly tt, ,  𝐱̇=𝐟(𝐱).\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(\\mathbf{x}). \\label{eq:autonomous_state_equation} \\end{equation} behavior autonomous system invariant shifts time origin. (Formally, however, shall see later Section , non-autonomous system can made automous one introducing time-related variable state.) falling body system considered autonomous: motion body follow pattern independent released. hand, realistic biological models tend non-autonomous time-varying. largely due influence weather environmental factors; example, matters whether seeds sown March May.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"the-giunti-mazzola-model","dir":"Articles > Web_only","previous_headings":"An overview of some abstract dynamical system formulations","what":"The Giunti-Mazzola model","title":"BioCro as a Dynamical System","text":"model due Giunti Mazzola generalization autonomous version Khalil model, though cast somewhat different form. autonomous, respects restrictive general model given ; respects considerably general. highlight model two reasons: First, mentioned supplementary materials Lochocki et al. (2022). Second, generalizes concept time used dynamical systems real numbers (Khalil model assumes) monoid. particular, may consider time domains consisting non-negative integers, fixed multiple , non-negative even integers. one natural ways view time discrete-time systems, often arise practice continuous-time systems discretized applying numeric solution methods (Section ). quote Giunti Mazzola’s definition dynamical system verbatim ( Giunti Mazzola (2012)): DSLDS_L dynamical system LL iff DSLDS_L pair (M,(gt)t∈T)(M,(g^t)_{t \\T}) LL pair (T,+)(T, +) L=(T,+)L = (T, +) monoid. t∈Tt \\T called duration system, TT called time set, LL time model; MM non-empty set. x∈Mx \\M called state system, MM called state space; (gt)t∈T(g^t)_{t \\T} family indexed TT functions MM MM. t∈Tt\\T, function gtg^t called state transition duration tt (briefly, tt-transition, tt-advance) system; v,t∈Tv,t\\T, x∈Mx\\M, g0(x)=xg^0(x) = x, 00 unity LL; gv+t(x)=gv(gt(x))g^{v+t}(x) = g^v(g^t(x)). Notice can time model now monoid, state space can now non-empty set: longer required subset Euclidean space. needn’t even continuum! fortiori, longer requirement state transitions differential equation based. Instead differential equations, condition (iv.b), sometimes called semi-group property, relates structure time model class state transitions. Just TT monoid operation ++ additive identity 00, collection (gt)t∈T(g^t)_{t \\T} state transitions, monoid operation function composition identity element identity function. Condition (iv) asserts mapping (T,+)(T, +) ((gt)t∈T,∘)((g^t)_{t \\T}, \\circ) whereby t↦gtt \\mapsto g^t monoid homomorphism. Condition (iv) fact crux definition dynamical system. Without , structure way system evolves: system may pass one state next willy-nilly without constraint relationship states time.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"the-barreira-valls-model","dir":"Articles > Web_only","previous_headings":"An overview of some abstract dynamical system formulations","what":"The Barreira-Valls model","title":"BioCro as a Dynamical System","text":"briefly mention one model discrete time case, mainly formulation epitome simplicity. Definition 1.1 Barreira (2019) states simply map f:𝐗→𝐗f: \\mathbf{X}\\\\mathbf{X} called dynamical system discrete time. definition goes define higher-order mappings: define recursively fn=f∘fn−1\\begin{equation*}     f^n = f\\circ f^{n-1} \\end{equation*} n∈𝐙+n\\\\mathbf{Z}^+, convention f0=idf^0 = \\operatorname{id}. ff invertible, also define f−n=(f−1)nf^{-n} = (f^{-1})^n n∈𝐙+n\\\\mathbf{Z}^+. entirely homologous Giunti-Mazzola model case monoid chosen time model either 𝐙\\mathbf{Z} 𝐍\\mathbf{N}. Note recursion equation derived applying Euler’s method falling body problem fits nicely model: take 𝐗\\mathbf{X} Euclidean 2-space function ff defined rule (x,y)↦(x+δy,y−δg).\\begin{equation*}     (x, y) \\mapsto (x + \\delta y, y - \\delta g). \\end{equation*} (Barreira Valls go define “dynamical system continuous time” (Barreira 2019, Definition 1.7) precisely way Giunti Mazzola (case time model 𝐑\\mathbf{R} 𝐑≥0\\mathbf{R}_{\\geq 0})—, family mappings indexed time satisfying semi-group property.)","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"the-biocro-model","dir":"Articles > Web_only","previous_headings":"","what":"The BioCro model","title":"BioCro as a Dynamical System","text":"BioCro system determined specification five entities: set initial values set (constant) parameter values set drivers set direct modules set differential modules five entities tell us everything dynamics system need order “solve” . (, precisely, solved determined specifying solver.)3 Aside differences concept state (Section ), Khalil model fits well idealized version BioCro model time considered continuous.4 see section , discuss two models side--side. first, must elaborate bit Khalil model.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"elaboration-on-the-khalil-model","dir":"Articles > Web_only","previous_headings":"The BioCro model","what":"Elaboration on the Khalil model","title":"BioCro as a Dynamical System","text":"Recall Khalil model expresses derivative d𝐱/dtd\\mathbf{x}/dt state function time tt, state 𝐱\\mathbf{x}, input 𝐮\\mathbf{u}:  𝐱̇=𝐟(t,𝐱,𝐮).\\begin{equation*}   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}, \\mathbf{u}). \\end{equation*} Let us denote domains 𝐱\\mathbf{x} 𝐮\\mathbf{u} (vis-à-vis function 𝐟\\mathbf{f}) 𝐗\\mathbf{X} 𝐔\\mathbf{U}. 𝐗\\mathbf{X} 𝐔\\mathbf{U} vector spaces reals, following conventions set Section , may view sets mappings finite index sets reals. Thus  $$\\begin{align}     \\mathbf{X} = \\mathbf{R}^X \\\\     \\intertext{}     \\mathbf{U} = \\mathbf{R}^U \\end{align}$$  finite sets XX UU, assume XX UU disjoint.5 Furthermore, recall Khalil model, value 𝐮\\mathbf{u} may given function time /state:  $$\\begin{align*}   \\mathbf{u} &= \\boldsymbol\\gamma(t), \\\\   \\mathbf{u} &= \\boldsymbol\\gamma(\\mathbf{x}), \\\\   \\intertext{}   \\mathbf{u} &= \\boldsymbol\\gamma(t, \\mathbf{x}). \\end{align*}$$  Thinking terms individual components 𝐮\\mathbf{u}, component uiu_i 𝐮\\mathbf{u} can expressed function γi\\gamma_i tt 𝐱\\mathbf{x} :  $$\\begin{align*}   u_i &= \\gamma_i(t), \\\\   u_i &= \\gamma_i(\\mathbf{x}), \\\\   \\intertext{}   u_i &= \\gamma_i(t, \\mathbf{x}). \\end{align*}$$  also possible uiu_i doesn’t actually depend either time state, fact constant:  ui=kfor k∈𝐑.\\begin{equation}   u_i = k \\quad \\text{$k\\\\mathbf{R}$}. \\end{equation} can, fact, partition variables u0,u1,…,−1u_0, u_1, \\dots, u_{p-1} comprising varying input 𝐮\\mathbf{u} three groups: Let uiu_i group KK value uiu_i depends neither tt 𝐱\\mathbf{x}; , always value, matter state time. Let uiu_i group DD value uiu_i depends tt alone. Let uiu_i group WW otherwise, value uiu_i depends value 𝐱\\mathbf{x} (possibly also tt). Thus U=K∪D∪WU=K\\cup D\\cup W, KK, DD, WW pairwise disjoint. allows us partition vector space 𝐔\\mathbf{U} corresponding sub-vector spaces 𝐊\\mathbf{K}, 𝐃\\mathbf{D}, 𝐖\\mathbf{W}; ,  𝐔=𝐊×𝐃×𝐖,\\begin{equation*}   \\mathbf{U} = \\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{W}, \\end{equation*} 𝐊=𝐑K\\mathbf{K}=\\mathbf{R}^K, 𝐃=𝐑D\\mathbf{D}=\\mathbf{R}^D, 𝐖=𝐑W\\mathbf{W} = \\mathbf{R}^W. input 𝐮\\mathbf{u} may now written triplet (𝐤,𝐝,𝐰)(\\mathbf{k}, \\mathbf{d}, \\mathbf{w}) 𝐤∈𝐊\\mathbf{k}\\\\mathbf{K}, 𝐝∈𝐃\\mathbf{d}\\\\mathbf{D}, 𝐰∈𝐖\\mathbf{w}\\\\mathbf{W}.6 Moreover, exist functions γ𝐃:T→𝐃\\gamma^\\mathbf{D}: T\\\\mathbf{D} γ𝐖:T×𝐗→𝐖\\gamma^\\mathbf{W}: T\\times\\mathbf{X}\\\\mathbf{W} constant function γ𝐊\\gamma^\\mathbf{K} codomain 𝐊\\mathbf{K}  $$\\begin{align}   \\mathbf{k} &= \\gamma^\\mathbf{K}(),       \\label{eq:k} \\\\   \\mathbf{d} &= \\gamma^\\mathbf{D}(t),      \\label{eq:d} \\\\   \\intertext{}   \\mathbf{w} &= \\gamma^\\mathbf{W}(t, \\mathbf{x}) \\label{eq:s} \\end{align}$$  moment life system. Since 𝐮=(𝐤,𝐝,𝐰)\\mathbf{u} = (\\mathbf{k}, \\mathbf{d}, \\mathbf{w}), can rewrite state equation  𝐱̇=𝐟(t,𝐱,𝐤,𝐝,𝐰).\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}, \\mathbf{k}, \\mathbf{d}, \\mathbf{w}). \\label{eq:BioCro_state_equation} \\end{equation} using equations , , , can eliminate 𝐤\\mathbf{k}, 𝐝\\mathbf{d}, 𝐰\\mathbf{w} get 𝐟\\mathbf{f} function tt 𝐱\\mathbf{x} alone:  𝐱̇=𝐟(t,𝐱,γ𝐊(),γ𝐃(t),γ𝐖(t,𝐱)).\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(t, \\mathbf{x}, \\gamma^\\mathbf{K}(), \\gamma^\\mathbf{D}(t), \\gamma^\\mathbf{W}(t, \\mathbf{x})). \\end{equation} words,  𝐱̇=𝐟*(t,𝐱)\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}^{\\,*}(t, \\mathbf{x}) \\end{equation} suitable function 𝐟*\\mathbf{f}^{\\,*}, now unforced state equation equation .","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"biocro-viewed-in-terms-of-the-khalil-model","dir":"Articles > Web_only","previous_headings":"The BioCro model","what":"BioCro viewed in terms of the Khalil model","title":"BioCro as a Dynamical System","text":"BioCro, noted , system determined specify initial values, parameters, drivers, direct modules, differential modules. relate version Khalil model just discussed? initial values correspond state 𝐱\\mathbf{x} initial time t0t_0, convenience, always take 0. (Thus time always amount time elapsed since start simulation.) denote initial state 𝐱0=(x0,0,x1,0,…,xn−1,0)\\mathbf{x}_0 = (x_{0,0}, x_{1,0}, \\dots, x_{n-1,0}). BioCro, state variables referred differential quantities, since evolve according differential equations. initial values specification determines variables comprise state, dimension state space 𝐗\\mathbf{X} equal number variables 𝐱0\\mathbf{x}_0. now, shall consider initial values part definition system far determine set variables comprising state space system. specification values variables time t0t_0 considered something associated particular run system something inherent system . make comparison Khalil Giunti models easier, since models don’t specify anything analogous initial state. follows, need make distinction, shall refer dynamical system together specified initial state run system. also noted, discussed Section , actually running system (, allowing state evolve initial values) requires use numerical methods effectively discretize continous system differential equations Khalil system. Whether consider development new discrete dynamical system continuous one just matter practical convenience mostly matter perspective. parameters correspond sole value codomain constant function γ𝐊\\gamma^\\mathbf{K}. qq-tuple values 𝐤=(k0,k1,…,kq−1)\\mathbf{k} = (k_0, k_1, \\dots, k_{q-1}), qq number parameters, dimension vector subspace 𝐊\\mathbf{K}. drivers correspond function γ𝐃:T→𝐑r\\gamma^\\mathbf{D}:T\\\\mathbf{R}^r, giving value 𝐝\\mathbf{d} function time. Writing 𝐝\\mathbf{d} (d0,d1,…,dr−1)(d_0, d_1, \\dots, d_{r-1}), rr number driver variables (dimension 𝐃\\mathbf{D}), can decompose γ𝐃(t)\\gamma^\\mathbf{D}(t) scalar-valued functions γ0𝐃(t)\\gamma^\\mathbf{D}_0(t), γ1𝐃(t)\\gamma^\\mathbf{D}_1(t), , γr−1𝐃(t)\\gamma^\\mathbf{D}_{r-1}(t). noted driver functions γi𝐃\\gamma^\\mathbf{D}_i rarely functions can easily specified computed formula. example shown Appendix 1 Lochocki et al. (2022), function giving value driver variable QQ corresponding photosynthetic photon flux density based function  Q=sin(t12⋅3600π)⋅2000×10−6.\\begin{equation}   Q = \\sin(\\frac{t}{12\\cdot 3600} \\pi)\\cdot 2000 \\times 10^{-6}. \\end{equation} , tt meant represent elapsed time seconds, example, actual values fed BioCro system constructor values QQ set integral values tt, namely, t=0,1,2,…,43200t = 0, 1, 2, \\dots, 43200. acknowledged appendix, highly artificial example. Usually, driver variable function can defined via equation7 form  γi𝐃(t)={0.046if t=t0,0.023if t=t1,……1151.541if t=t4000,747.040if t=t4001,……0.621if t=t8758,0.874if t=t8759.\\begin{equation}     \\gamma^\\mathbf{D}_i(t) = \\begin{cases}         0.046 & \\text{$t = t_0$}, \\\\         0.023 & \\text{$t = t_1$}, \\\\         \\dots \\\\         \\dots \\\\         1151.541 & \\text{$t = t_{4000}$}, \\\\         747.040 & \\text{$t = t_{4001}$}, \\\\         \\dots \\\\         \\dots \\\\         0.621 & \\text{$t = t_{8758}$}, \\\\         0.874 & \\text{$t = t_{8759}$}.     \\end{cases} \\end{equation} , t0,t1,…,t8759t_0, t_1, \\dots, t_{8759} sequence times representing amount time elapsed since beginning simulation, t0=0t_0 = 0, fixed positive value Δt\\Delta t, tj+1=tj+Δtt_{j+1} = t_j + \\Delta t 0≤j<87590 \\leq j < 8759. practice, BioCro, equation usually specified implicitly via R data frame: γi𝐃\\gamma^\\mathbf{D}_i corresponds column data frame, value column row jj value γi𝐃\\gamma^\\mathbf{D}_i time tj−1t_{j-1}. (numerical methods, need know values γi𝐃(t)\\gamma^\\mathbf{D}_i(t) values ttbetween time points given definition. principle, many approaches available type interpolation, cubic splines. moment, BioCro offers linear interpolation neighboring time points. words, additional case added rule:  γi𝐃(t)=tj+1−tΔtγi𝐃(tj)+t−tjΔtγi𝐃(tj+1)tj<t<tj+1\\begin{equation}   \\gamma^\\mathbf{D}_i(t) = \\frac{t_{j + 1} - t}{\\Delta t}\\,\\gamma^\\mathbf{D}_i(t_j)                        + \\frac{t - t_j}{\\Delta t}\\,\\gamma^\\mathbf{D}_i(t_{j+1})                        \\quad\\text{$t_j < t < t_{j+1}$} \\end{equation} makes γi𝐃(t)\\gamma^\\mathbf{D}_i(t) piecewise-linear continuous function.) Now modules. show later (Section ), BioCro system equivalent BioCro system single module type, initial values, parameters, drivers.8 Thus, simplicity, consider case single module type.9 Later, consider single module may broken multiple modules (Section ). direct module corresponds function γ𝐖:T×𝐗→𝐖\\gamma^\\mathbf{W}: T\\times\\mathbf{X} \\\\mathbf{W}. point fact, usually think direct module corresponding function *γ𝐖:𝐗×𝐊×𝐃→𝐖{}^*\\gamma^\\mathbf{W}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D} \\\\mathbf{W}, using equations substituting, can derive function γ𝐖\\gamma^\\mathbf{W} gives value 𝐰\\mathbf{w} function tt 𝐱\\mathbf{x} alone. Note particular number output variables direct module gives dimension 𝐖\\mathbf{W} component 𝐔\\mathbf{U}. call variables direct quantities system (lack better term) since outputs direct module. Two observations made . First, general case, multiple direct modules ℳ1,ℳ2,…\\mathcal{M}_1, \\mathcal{M}_2, \\dots used construction system, modules may depend outputs direct modules. case, module ℳi\\mathcal{M}_i corresponds function form  γ𝐖i:𝐗×𝐊×𝐃×𝐖¯→𝐖i,\\begin{equation}   \\gamma^{\\mathbf{W}_i}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{\\overline{W}}_i \\\\mathbf{W}_i, \\end{equation} 𝐖i\\mathbf{W}_i subspace 𝐖\\mathbf{W} generated variables output module ℳi\\mathcal{M}_i 𝐖¯\\mathbf{\\overline{W}}_i subspace 𝐖\\mathbf{W} generated inputs module ℳi\\mathcal{M}_i XX, KK, DD. (direct module’s inputs outputs required disjoint. Thus 𝐖¯\\mathbf{\\overline{W}}_i complementary 𝐖i\\mathbf{W}_i, 𝐖i×𝐖¯\\mathbf{W}_i \\times \\mathbf{\\overline{W}}_i subspace 𝐖\\mathbf{W}.) discuss section modularization (Section ). Second, mentioned Khalil model allows inclusion output function  𝐲=𝐡(t,𝐱,𝐮).\\begin{equation}   \\mathbf{y} = \\mathbf{h}(t, \\mathbf{x}, \\mathbf{u}). \\end{equation} Khalil says output vector 𝐲\\mathbf{y} “comprises variables particular interest analysis dynamical systems .” Khalil model, variables, unlike variables comprise 𝐮\\mathbf{u}, part state equation. informational purposes . closest analogue variables BioCro variables outputs direct module system inputs differential module. example variables BioCro library kinetic energy, spring energy, total energy outputs harmonic energy module (class harmonic_energy). exist give information system using module since (least writing) existing modules use inputs. differential module corresponds function 𝐟\\mathbf{f} equation . Khalil state equation, 𝐮\\mathbf{u} divided components 𝐤\\mathbf{k}, 𝐝\\mathbf{d}, 𝐰\\mathbf{w}. primary constraint differential module output variables must differential quantities (, equivalently, state variables), determined initial values specification discussed . (BioCro doesn’t require state variables included differential module outputs: state variable xix_i , assumed ẋ=0\\dot{x}_i = 0; , component state remains constant throughout life system.)","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"biocros-concept-of-time","dir":"Articles > Web_only","previous_headings":"The BioCro model","what":"BioCro’s concept of time","title":"BioCro as a Dynamical System","text":"C++ interface BioCro library, one required user-facing time-related variable—namely, quantity timestep, must provided one (possibly ) parameters setting system.10 (R interface, also necessary provide time part drivers setting running system; time can supplied implicitly providing values doy hour.) timestep quantity, however, gives rise implicit quantity, elapsed time, corresponds well time variable used Khalil Giuli-Mazzola models.11 timestep, fact, denotes amount time elapses successive values driver variables.12 Time often shows explicitly BioCro system form specific date time, value driver variable date time; example, information drivers parameter may able make assertions  “3 p.m. April 15, 2005” sort time Giunti model deals. Times—durations—Giunti model members monoid, can add together get another time monoid. can add   meaningful way get date-time. can, however, add durations: can, example, look state system one hour initial state system, look state two hours later, second observation three hours time corresponding system’s initial state (since 2+1=32 + 1 = 3). hinted , timestep quantity generates monoid: value timestep δ\\delta, members monoid 0,δ,δ+δ,δ+δ+δ,δ+δ+δ+δ,…0, \\delta, \\delta + \\delta, \\delta + \\delta + \\delta, \\delta + \\delta + \\delta + \\delta, \\dots, ad infinitum. course, BioCro, don’t let system simulations run forever, set times dealt given run system doesn’t really quite form monoid add δ\\delta final time point simulation, get time outside domain simulation. Conceptually, can deal problem (reconciling BioCro’s concept time Giunti model) imagining system simulations run forever let (knowledge infinitely far future driver variables happened using); imagine instead, choose look behavior system finite period time.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"biocros-concept-of-state","dir":"Articles > Web_only","previous_headings":"The BioCro model","what":"BioCro’s concept of state","title":"BioCro as a Dynamical System","text":"BioCro, level module, input quantities considered uniformly. good reasons , reasons go beyond mere programmatic convenience. example, input module might one system determined mechanistically output module; different system, might come data observations thereby one drivers. module using input doesn’t care comes . set system, however, quantity falls neatly one four categories: either parameter, driver, differential quantity, direct quantity. (correspond, respectively, subspaces 𝐊\\mathbf{K}, 𝐃\\mathbf{D}, 𝐗\\mathbf{X}, 𝐖\\mathbf{W} discussed Sections arguments 𝐤\\mathbf{k}, 𝐝\\mathbf{d}, 𝐱\\mathbf{x}, 𝐰\\mathbf{w} state equation form given equation .) uniform treatment quantities module level reflected C++ code used implement BioCro simulations: quantity used given system incorporated C++ structure user-defined type called state_map, maps names quantities value quantities particular time. naturally leads referring aggregate values quantities system particular point time state system time. Thus, Khalil’s model distinguishes betwee state inputs, term state used BioCro refers parameters, drivers, differential quantities, direct quantities whole (equivalent Khalil’s state drivers). section attempts reconcile conception state commonly used dynamical systems theory, particular, formulations presented chapter . Elsewhere document, use term state exclusively reference usual definition employed Khalil, Giuli-Mazzola, Barreira-Valls models. discussing BioCro, refer state variables differential quantities avoid misrepresenting BioCro’s idea state. section, however, must necessarily use state refer conceptions, try clarify definition meant whenever unclear context.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"biocro-state-and-the-khalil-model","dir":"Articles > Web_only","previous_headings":"The BioCro model > BioCro’s concept of state","what":"BioCro state and the Khalil model","title":"BioCro as a Dynamical System","text":"Khalil remarks state variables “represent memory dynamical system past.” Laplace (Dale 1995) remarks, “consider present state universe effect previous state cause follow.” inputs model, hand, general completely arbitrary. determined state past future values. help determine, determined , evolution state system. sense, like hand experimenter-god touching influencing otherwise mechanistically-determined system. BioCro, inputs considered part state, partly matter convenience; , convenience aside, also philosophical justification : many systems, inputs may clearly thought somehow external system. studying electrical circuit, example, experimenter may apply electrical inputs system see system responds. Even controlled plant-growth experiment conducted climate-controlled greenhouse, environmental inputs may applied somewhat arbitrarily. BioCro, contrast, inputs (drivers) usually related weather aspects environment—temperature, humidity, radiation, . Unlike controlled experiment, environmental variables evolve according laws; control experimenter. truly comprehensive model, laws evolution included right alongside laws determining plant growth. generally, overly complicate model, large, given inherently chaotic nature meteorological processes vast amounts additional data required, feasible . BioCro, regard part system—part state system—part taken given rather part derived general rules governing evolution natural systems. None say, course, BioCro can’t also used model controlled experiments, carried greenhouse; model “thought experiments” “” scenarios: happen used weather data 2005 assumed much higher CO2\\text{CO}_\\text{2} concentration?","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"biocro-state-and-the-giunti-model","dir":"Articles > Web_only","previous_headings":"The BioCro model > BioCro’s concept of state","what":"BioCro state and the Giunti model","title":"BioCro as a Dynamical System","text":"Giunti Mazzola’s model definition cited supplementary materials Lochocki et al. (2022) justification considering quantities involved system (except time) part state. Whatever merits argument, retrospect, possibly amounts sort cherry-picking Giunti-Mazzola definition altogether clear whether BioCro dynamical systems, envisioned paper, , general, collection well-defined transition functions (gt)t∈T(g^t)_{t \\T}. Whether turns question interpret stipulation, given supplement, “term state used refer quantities involved system, except time.” demonstrate , BioCro system drivers include time-like variable amongst drivers , general, conform Giunti model. see , let us consider typical BioCro system driver component consists values number weather-related variables course year, suppose variables happen values two different times; example, suppose weather 1 p.m. April 12, 2008 exactly weather 3 p.m. May 16, 2008 extent weather captured attributes model. Moreover, suppose system might typical array differential variables—namely, describe state growth plant subjected environment described driver variables system. Consider now two identical states—one, s1s_1, corresponding seedling planted 1 p.m. April 12, 2008, one, s2s_2, corresponding identical seedling planted 3 p.m. May 16, 2008. states identical attributes seedlings, described differential variables, identical, attributes weather, described driver variables, also identical; parameters (constant) identical, values “direct” variables, functions three components, also identical. (Recall specifically excluding date time notion state .) words, s1=s2s_1 = s_2. Now consider one transition functions gtg^t—say, example, function gug^u, uu corresponds duration 30 days. gu(s1)g^u(s_1) state corresponding attributes seedling planted April 12 environment one month later, May 12, 2008. gu(s2)g^u(s_2) state corresponding attributes seedling planted May 16 environment approximately one month later, June 15. weather 1 p.m. May 12, 2008 identical 3 p.m. June 15, 2008? According Giunti model, , since s1=s2s_1 = s_2 implies state gu(s1)g^u(s_1) equals state gu(s2)g^u(s_2); two states equal, components state describe weather equal well. know something wrong , even weather occurs two different times, can’t expect weather patterns going forward develop way. Moreover, likelyhood identical seedlings planted April 12 May 16 longer identical 30 days later likely subjected different weather conditions. two ways (least) predicament. One ensure driver component state never repeats . monotonically-increasing driver variable trick, natural way ensuring repetitions probably include representation time, calendar date time, Julian date, reduced Julian date, Unix time part driver component state. (R interface BioCro fact requires either day--year hour day driver variables requires monotonically-increasing variable called time. C++ interface, however, requires neither .) second way, one makes system formally time-independent, modify driver component notion state. scheme, driver component state just array values driver variables happen particular time. Now, instead, encapsulation future driver variable values indefinitely far future. One way imagine , thinking drivers corresponding weather, think driver component state particular time weather prediction giving weather time every future time, .e., weather one day now, two days now, ; moreover, just prediction, 100% accurate one. state now, without include date time, encapsulates information need order know state xx amount time future. bring show even presence drivers (inputs, Khalil’s terminology), notion autonomous system possible. can systems conform Giunti model without requiring states different dates distinct. example, imagine greenhouse experiment climate conditions greenhouse repeat exactly pattern one day next. system, driver state noon—“weather” prediction moment going forward (one hour later, 10 hours later, 10 days later)—exactly one day next. evolution generic seedling: evolution seedling planted noon one day evolution identical seedling planted noon twenty days later. practical terms, however, rather complicated model. state space longer Euclidean space, since 𝐃\\mathbf{D}, driver component state space, longer Euclidean space 𝐑r\\mathbf{R}^r instead set (𝐑r)T(\\mathbf{R}^r)^T functions γ𝐃:T→𝐑r\\gamma^\\mathbf{D}: T \\\\mathbf{R}^r. (Note state transition duration uu restricted 𝐃\\mathbf{D} component state least easily defined: γ\\gamma 𝐃\\mathbf{D} component state 𝐬\\mathbf{s}, gu(γ)g^u(\\gamma) function defined rule t↦γ(u+t)t \\mapsto \\gamma(u + t).) upshot Giunti model naturally describe BioCro system drivers unless proxy time allowed component drivers. also noted BioCro make use two important generalizations Giunti model: BioCro, state space always subset (fact, connected subset) Euclidean space, state transitions (using state Khalil’s sense) always differential equation based. Thus, find Khalil’s model provides better description BioCro systems.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"the-state-space-as-a-manifold","dir":"Articles > Web_only","previous_headings":"The BioCro model > BioCro’s concept of state","what":"The state space as a manifold","title":"BioCro as a Dynamical System","text":"One arguments given supplementary materials Lochocki et al. (2022) considering variables state variables “division state auxiliary variables arbitrary.” Whether compelling argument considering “quantities equal”, statement , least formal level, largely true, least case variables mutually determine one another. stated conclusion Appendix II Mesarović Takahara (1975), starting point modeling observations assumption existence relationships . primary concept system definable just much data. Whether relationship can described transition state space point needs proven. Even possible, state space unique, indicates secondary nature concept state [emphasis mine]. , authors presumably using state less comprehensive sense, distinguished system inputs outputs, though conceivably simply mean attributes choose observe codify notion state unique; sake argument, ’ll assume mean least former. (authors, fact, hint altogether different view meant state system. view, everything can observed system encompassed system’s inputs outputs: system essentially black box, responds given inputs particular time always . unobservable aspects system come play. unobservables constitute state system, responds given time given inputs depends state happens . helpful analogy might notion person’s state mind determinant might react particular event.) However expansive choose make notion state, one thing clear: choose regard parameters, drivers, relationship quantities embodied direct modules constraints state space systems, given state lies state space, can fully specify state using values -called differential variables (plus time); values quantities can determined . Thus, total number quantites system (including time) nn, number differential variables kk, state space may viewed k+1k+1-dimensional manifold embedded Euclidean nn-space 𝐑n\\mathbf{R}^n. Put another way, matter many variables use describe state system, still k+1k+1 degrees freedom: parameters can take one value, time variable determines values driver variables, values together values differential variables determine values remaining variables, direct variables. analogy may help make clearer: Say wish consider points earth. don’t limit points surface, specify points three coordinates—longitude, latitude, altitude. Large values altitude correspond points earth’s surface, negative values usually correspond points earth’s interior. considering arbitrary points three-dimensional space, makes sense need three coordinates fully specify point. suppose now say want consider points earth’s surface. Given constraint, understanding going try describe points surface earth, can get two coordinates: need specify longitude latitude. include third number, altitude, well (provided know ), now necessary, understood point lies earth’s surface. consider system whose state comprises location given object surface earth, state space surface, two-dimensional space embedded Euclidean 3-space. Note example, matters two coordinates choose describing states. Generally, , example, suffice know altitude longitude, since, given choice altitude longitude, may many points various latitudes match. (exceptional cases, course: specify altitude 8848.86 (meters), even without specified longitude latitude (let alone ), know object top Mount Everest.13)","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"modularization-in-biocro","dir":"Articles > Web_only","previous_headings":"The BioCro model","what":"Modularization in BioCro","title":"BioCro as a Dynamical System","text":"mentioned Section , BioCro system can replaced equivalent system using single module type. merely write one direct module one differential module, (respectively) combines effects individual direct differential modules used original system. use “merely” advisedly , one main strengths BioCro ability modularize, wide repertoire modules choose , can choose combine whatever way useful, without write new module time want tweak aspect system whole. section, look combining modules formal level, delineating requirements using two modules place one effects . start differential module case since simpler two.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"modularization-of-the-derivative-function","dir":"Articles > Web_only","previous_headings":"The BioCro model > Modularization in BioCro","what":"Modularization of the derivative function","title":"BioCro as a Dynamical System","text":"mentioned Section , BioCro system uses single differential module, module corresponds function 𝐟\\mathbf{f} Khalil state equation . shall henceforth refer 𝐟\\mathbf{f} derivative function system. turns , BioCro, derivative function never depends tt directly; temporal dependence function 𝐟\\mathbf{f}, always via driver variable differential variable. (Recall tt represents elapsed time BioCro system; although calculations may depend time year time day, depend elapsed time.) Therefore, can rewrite equation  𝐱̇=𝐟(𝐱,𝐤,𝐝,𝐰).\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(\\mathbf{x}, \\mathbf{k}, \\mathbf{d}, \\mathbf{w}). \\end{equation} Thus, 𝐟:𝐗×𝐊×𝐃×𝐖→𝐗\\mathbf{f}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{W}\\\\mathbf{X}. , shall adopt BioCro’s notion state space denote 𝐒\\mathbf{S},  𝐒=𝐗×𝐊×𝐃×𝐖.\\begin{equation*}     \\mathbf{S} = \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{W}. \\end{equation*}𝐟\\mathbf{f} function 𝐟:𝐒→𝐗\\mathbf{f}: \\mathbf{S} \\\\mathbf{X}, state equation, shall now refer derivative equation, just  𝐱̇=𝐟(𝐬),\\begin{equation}   \\dot{\\mathbf{x}} = \\mathbf{f}(\\mathbf{s}), \\end{equation} 𝐬\\mathbf{s} denotes state state space 𝐒\\mathbf{S}. general, can write state 𝐬\\mathbf{s} terms coordinate variables describing component spaces; ,  𝐬=(x0,x1,…,xn−1,k0,k1,…,kq−1,d0,d1,…,dr−1,w0,w1,…,ws−1)\\begin{equation*}     \\mathbf{s} = (x_0, x_1, \\dots, x_{n-1}, k_0, k_1, \\dots,                k_{q-1}, d_0, d_1, \\dots, d_{r-1}, w_0, w_1, \\dots, w_{s-1}) \\end{equation*} nn, qq, rr, ss dimensions component spaces 𝐗\\mathbf{X}, 𝐊\\mathbf{K}, 𝐃\\mathbf{D}, 𝐖\\mathbf{W}, respectively. talk decomposing derivative function system, first describe mean valid differential module BioCro system. Let X={x0,x1,…,xn−1}X = \\{x_0, x_1, \\dots, x_{n-1}\\} set differential variables system, let  S={x0,x1,…,xn−1,k0,k1,…,kq−1,d0,d1,…,dr−1,w0,w1,…,ws−1}\\begin{equation*}     S = \\{x_0, x_1, \\dots, x_{n-1}, k_0, k_1, \\dots, k_{q-1},           d_0, d_1, \\dots, d_{r-1}, w_0, w_1, \\dots, w_{s-1}\\} \\end{equation*} set coordinate variables needed specify state state space system. ℳ\\mathcal{M} valid differential module system input variables contained SS output variables contained XX. Let 𝐌in\\mathbf{M}_\\text{} vector subspace 𝐒\\mathbf{S} generated input variables ℳ\\mathcal{M} let 𝐌out\\mathbf{M}_\\text{} vector subspace 𝐗\\mathbf{X} generated output variables ℳ\\mathcal{M}. derivative function ℳ\\mathcal{M} function  𝐟̂𝐌:𝐌in→𝐌out.\\begin{equation*}     \\hat{\\mathbf{f}}_\\mathbf{M}: \\mathbf{M}_\\text{} \\\\mathbf{M}_\\text{}. \\end{equation*} function, may associate unique function 𝐟𝐌:𝐒→𝐗\\mathbf{f}_\\mathbf{M}: \\mathbf{S} \\\\mathbf{X} follows: Let 𝛑\\pmb{\\pi} projection 𝐒\\mathbf{S} onto 𝐌in\\mathbf{M}_\\text{}, let 𝛊\\pmb{\\iota} injective function 𝐌out\\mathbf{M}_\\text{} 𝐗\\mathbf{X} assigns coordinate XX output variable ℳ\\mathcal{M} value zero. define  𝐟𝐌=𝛊∘𝐟̂𝐌∘𝛑:𝐒→𝛑𝐌in→𝐟̂𝐌𝐌out→𝛊𝐗.\\begin{equation*}     \\mathbf{f}_\\mathbf{M} = \\pmb{\\iota} \\circ \\hat{\\mathbf{f}}_\\mathbf{M} \\circ \\pmb{\\pi}:         \\mathbf{S} \\stackrel{\\pmb{\\pi}}{\\} \\mathbf{M}_\\text{}                \\stackrel{\\hat{\\mathbf{f}}_\\mathbf{M}}{\\longrightarrow} \\mathbf{M}_\\text{}                \\stackrel{\\pmb{\\iota}}{\\} \\mathbf{X}. \\end{equation*} shall call function 𝐟𝐌\\mathbf{f}_\\mathbf{M} system-complete derivative function ℳ\\mathcal{M}. Now suppose collection {ℳ1,ℳ2,…,ℳm}\\{\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_m\\} differential modules assumed consistent (rest ) system, let {𝐟𝐌𝟏,𝐟𝐌𝟏,…,𝐟𝐌𝐦}\\{\\mathbf{f}_\\mathbf{M_1}, \\mathbf{f}_\\mathbf{M_1}, \\dots, \\mathbf{f}_\\mathbf{M_m}\\} corresponding system-complete derivative functions. combined derivative function {ℳ1,ℳ2,…,ℳm}\\{\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_m\\} function  𝐟=∑∈{1,2,…,m}𝐟𝐌𝐢,\\begin{equation*}     \\mathbf{f} = \\sum_{\\\\{1, 2, \\dots, m\\}} \\mathbf{f}_\\mathbf{M_i}, \\end{equation*} defined rule 𝐬↦∑∈{1,2,…,m}𝐟𝐌𝐢(𝐬).\\begin{equation*}     \\mathbf{s} \\mapsto \\sum_{\\\\{1, 2, \\dots, m\\}} \\mathbf{f}_\\mathbf{M_i}(\\mathbf{s}). \\end{equation*} {ℳ1,ℳ2,…,ℳm}\\{\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_m\\} comprise differential modules system, 𝐟\\mathbf{f} system’s derivative function. words, outputs individual differential module treated terms must added together form full derivative. module, system-complete derivative function defined calculates values elements XX, setting rest 0. , output system-complete derivative function can added together form full derivative. operation performed combined derivative function. always write single differential module ℳ\\mathcal{M} 𝐟\\mathbf{f} system-complete derivative function use place collection modules {ℳ1,ℳ2,…,ℳm}\\{\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_m\\} system uses . module likely combine several mechanistic bio-systems concepts, one strengths BioCro ability tweak one mechanistic model without rewrite multiple modules might use .","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"decomposing-the-direct-module-function","dir":"Articles > Web_only","previous_headings":"The BioCro model > Modularization in BioCro","what":"Decomposing the direct module function","title":"BioCro as a Dynamical System","text":"Let 𝒮\\mathcal{S} BioCro system, let 𝐒=𝐗×𝐊×𝐃×𝐖\\mathbf{S} = \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D} \\times \\mathbf{W} state space 𝒮\\mathcal{S}. mentioned Section , direct module component BioCro system 𝒮\\mathcal{S} corresponds function  γ𝐖:𝐗×𝐊×𝐃→𝐖\\begin{equation}     \\gamma^\\mathbf{W}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D} \\\\mathbf{W} \\label{eq:dir_mod_component_fn} \\end{equation} determines value “direct variable” component state value components. convenience follows, shall write 𝐇\\mathbf{H} abbreviate cross product 𝐗×𝐊×𝐃\\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}. Thus may write  γ𝐖:𝐇→𝐖.\\begin{equation*}     \\gamma^\\mathbf{W}: \\mathbf{H} \\\\mathbf{W}. \\end{equation*} general, however, direct module component system subdivided two submodules. section, show ordered sum two modules (notion defined ) module; key understanding modularize direct module function. mentioned Section , system one direct module, constituent module ℳi\\mathcal{M}_i corresponds function  γ𝐖i:𝐗×𝐊×𝐃×𝐖¯→𝐖i,\\begin{equation}   \\gamma^{\\mathbf{W}_i}: \\mathbf{X}\\times\\mathbf{K}\\times\\mathbf{D}\\times\\mathbf{\\overline{W}}_i \\\\mathbf{W}_i, \\end{equation} , using abbreviation used ,  γ𝐖i:𝐇×𝐖¯→𝐖i.\\begin{equation}   \\gamma^{\\mathbf{W}_i}: \\mathbf{H}\\times\\mathbf{\\overline{W}}_i \\\\mathbf{W}_i. \\label{eq:dir_mod_fn} \\end{equation} Letting HH denote set variables corresponding 𝐇\\mathbf{H} denoting input output variables module ℳi\\mathcal{M}_i 𝐈𝐧ℳi\\operatorname{\\mathbf{}}\\mathcal{M}_i 𝐎𝐮𝐭ℳi\\operatorname{\\mathbf{}}\\mathcal{M}_i respectively, can write  $$\\begin{align*}     \\mathbf{W}_i &= \\mathbf{R}^{\\operatorname{\\mathbf{}}\\mathcal{M}_i} \\\\     \\intertext{}     \\mathbf{\\overline{W}}_i &= \\mathbf{R}^{\\operatorname{\\mathbf{}}\\mathcal{M}_i\\smallsetminus H}, \\end{align*}$$  𝐈𝐧ℳi\\operatorname{\\mathbf{}}\\mathcal{M}_i 𝐎𝐮𝐭ℳi\\operatorname{\\mathbf{}}\\mathcal{M}_i disjoint, since direct modules never share inputs outputs.14 Note may case 𝐈𝐧ℳi⊆H\\operatorname{\\mathbf{}}\\mathcal{M}_i\\subseteq H; case 𝐖¯\\mathbf{\\overline{W}}_i 0-dimensional reduces  γ𝐖i:𝐇→𝐖i.\\begin{equation*}     \\gamma^{\\mathbf{W}_i}: \\mathbf{H} \\\\mathbf{W}_i. \\end{equation*} HH corresponds union differential variables, parameters, driver variables system. Usually, case given direct module system use variables HH: variables HH affect value output, even listed list returned module’s get_inputs() function. always potentially available use direct module, follows, convenient assume direct module inputs include variables HH; , 𝐈𝐧ℳi⊇H\\operatorname{\\mathbf{}}\\mathcal{M}_i\\supseteq H, direct modules ℳi\\mathcal{M}_i. way, thing changes domain module function various direct modules 𝐖¯\\mathbf{\\overline{W}}_i component 𝐇×𝐖¯\\mathbf{H}\\times\\mathbf{\\overline{W}}_i. simplify exposition follows. (take simple example formal dependence versus actual dependence, consider two-variable function f(x,y)f(x,y) defined rule (x,y)↦x2(x,y)\\mapsto x^2. Formally, function two variables xx yy. value function never actually depends value yy.)","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"the-ordered-sum-of-two-direct-modules","dir":"Articles > Web_only","previous_headings":"The BioCro model > Modularization in BioCro > Decomposing the direct module function","what":"The ordered sum of two direct modules","title":"BioCro as a Dynamical System","text":"Suppose ℳi\\mathcal{M}_i ℳj\\mathcal{M}_j two direct modules disjoint sets output variables (, 𝐎𝐮𝐭ℳi∩𝐎𝐮𝐭ℳj=∅\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset), suppose also none outputs ℳj\\mathcal{M}_j inputs ℳi\\mathcal{M}_i; , 𝐈𝐧ℳi∩𝐎𝐮𝐭ℳj=∅\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset. Let ff gg corresponding functions. convenience, put  $$\\begin{align*}     &=\\operatorname{\\mathbf{}}\\mathcal{M}_i \\\\     B &=\\operatorname{\\mathbf{}}\\mathcal{M}_i \\\\     C &=\\operatorname{\\mathbf{}}\\mathcal{M}_j \\\\     \\intertext{}     D &=\\operatorname{\\mathbf{}}\\mathcal{M}_j, \\end{align*}$$   $$\\begin{align*}     f&: \\mathbf{R}^\\\\mathbf{R}^B \\\\     \\intertext{}     g&: \\mathbf{R}^C \\\\mathbf{R}^D, \\end{align*}$$  ∩B=C∩D=∩D=B∩D=∅\\cap B=C\\cap D=\\cap D=B\\cap D=\\emptyset. point, possible see might combine two direct modules come something module; key think terms module inputs outputs: Given mappings values AA values CC aren’t BB, can obtain mappings values BB DD follows: Since know inputs AA module ℳi\\mathcal{M}_i, can use module obtain outputs BB. Now know inputs CC module ℳj\\mathcal{M}_j—aren’t BB (given outset), BB (obtained applying module ℳi\\mathcal{M}_i). yields outputs DD module ℳj\\mathcal{M}_j. can also describe formally, now proceed . define ℳi+ℳj\\mathcal{M}_i + \\mathcal{M}_j, ordered sum ℳi\\mathcal{M}_i ℳj\\mathcal{M}_j, direct module whose corresponding function  f*g:𝐑A∪(C∖B)→𝐑B∪D\\begin{equation}     f\\ast g: \\mathbf{R}^{ \\cup (C\\smallsetminus B)}\\\\mathbf{R}^{ B\\cup D} \\label{eq:ordered_sum_function} \\end{equation} defined  f*g=(f∘πA∪(C∖B)→)∪(g∘(πA∪(C∖B)→C∖B∪(πB→C∩B∘f∘πA∪(C∖B)→))).\\begin{equation}     f\\ast g = (f\\circ\\pi^{ \\cup (C\\smallsetminus B)\\})               \\cup               (g\\circ(                 \\pi^{ \\cup (C\\smallsetminus B)                      \\C\\smallsetminus B}                   \\cup                 (\\pi^{ B\\C\\cap B}\\circ                 f\\circ                 \\pi^{ \\cup (C\\smallsetminus B)\\}))). \\label{eq:ordered_sum} \\end{equation} (Note B∩C=∅B\\cap C=\\emptyset, C∖B=CC\\smallsetminus B=C, reduces  f*g=(f∘πA∪C→)∪(g∘πA∪C→C).\\begin{equation}     f\\ast g = (f\\circ\\pi^{ \\cup C\\})               \\cup               (g\\circ\\pi^{ \\cup C \\C}). \\end{equation} case, ordering immaterial, ℳj+ℳi=ℳi+ℳj\\mathcal{M}_j+\\mathcal{M}_i=\\mathcal{M}_i+\\mathcal{M}_j, g*f=f*gg\\ast f=f\\ast g.) Recalling inputs outputs direct module function must disjoint, can check indeed case sum. First note whenever can take ordered sum two modules ℳi\\mathcal{M}_i ℳj\\mathcal{M}_j,  $$\\begin{align}     \\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) &= \\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup (\\operatorname{\\mathbf{}}M_j\\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\label{eq:input_of_sum} \\\\     \\intertext{}     \\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) &= \\operatorname{\\mathbf{}}\\mathcal{M}_i\\cup\\operatorname{\\mathbf{}}\\mathcal{M}_j. \\label{eq:output_of_sum} \\end{align}$$  (fact set inputs ordered sum 𝐈𝐧ℳi∪(𝐈𝐧Mj∖𝐎𝐮𝐭ℳi)\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup (\\operatorname{\\mathbf{}}M_j\\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) readily apparent : domain f*gf\\ast g 𝐑A∪(C∖B)\\mathbf{R}^{ \\cup (C\\smallsetminus B)} corresponds inputs corresponding module ∪(C∖B)\\cup (C\\smallsetminus B), just 𝐈𝐧ℳi∪(𝐈𝐧Mj∖𝐎𝐮𝐭ℳi)\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup (\\operatorname{\\mathbf{}}M_j\\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i). Similarly outputs.) Using ,  $$\\begin{alignat*}{2}     \\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) \\cap \\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) &=\\;&&         (\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup (\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i)) \\cap         (\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup \\operatorname{\\mathbf{}}\\mathcal{M}_j)             \\quad \\text{\\ref{eq:input_of_sum} \\ref{eq:output_of_sum}} \\\\         &= &&(\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\\\            &&&        \\cup               (\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_j) \\\\            &&&        \\cup               ((\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\\\            &&&        \\cup               ((\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_j)                  \\qquad \\text{distributivity $\\cap$ $\\cup$} \\\\         &= &&\\emptyset \\cup \\emptyset \\cup \\emptyset \\cup \\emptyset \\\\         &= &&\\emptyset \\end{alignat*}$$  intersections distributive expansion empty easily verified: 𝐈𝐧ℳi∩𝐎𝐮𝐭ℳi\\operatorname{\\mathbf{}}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_i (𝐈𝐧Mj∖𝐎𝐮𝐭ℳi)∩𝐎𝐮𝐭ℳj)(\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_j) empty consequence direct modules non-overlapping inputs outputs. (𝐈𝐧Mj∖𝐎𝐮𝐭ℳi)∩𝐎𝐮𝐭ℳi(\\operatorname{\\mathbf{}}M_j \\smallsetminus \\operatorname{\\mathbf{}}\\mathcal{M}_i) \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_i must empty since member 𝐈𝐧MJ\\operatorname{\\mathbf{}}M_J 𝐎𝐮𝐭ℳi\\operatorname{\\mathbf{}}\\mathcal{M}_i can’t also 𝐎𝐮𝐭ℳi\\operatorname{\\mathbf{}}\\mathcal{M}_i. Finally, 𝐈𝐧ℳi∩𝐎𝐮𝐭ℳj=∅\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset stipulation made defining ordered sum ℳi\\mathcal{M}_i ℳj\\mathcal{M}_j. Equation perhaps requires little explication order comprehended. Suppose given value 𝐱\\mathbf{x} 𝐑A∪(C∖B)\\mathbf{R}^{ \\cup (C\\smallsetminus B)}, domain f*gf\\ast g. can describe (f*g)(𝐱)∈𝐑B∪D(f\\ast g)(\\mathbf{x})\\\\mathbf{R}^{ B\\cup D} describing way compute (f*g)(𝐱)(f\\ast g)(\\mathbf{x}) maps y∈B∪Dy\\B\\cup D 𝐑\\mathbf{R}. First suppose y∈\\B. need look first component union right-hand side —namely, f∘πA∪(C∖B)→Af\\circ\\pi^{ \\cup (C\\smallsetminus B)\\}. projection πA∪(C∖B)→(𝐱)=𝐱|\\pi^{ \\cup (C\\smallsetminus B)\\}(\\mathbf{x}) = \\mathbf{x}|𝐱\\mathbf{x} 𝐑A\\mathbf{R}^tells us need consider coordinates 𝐱\\mathbf{x} correspond members AA. vector 𝐑A\\mathbf{R}^, can apply function ff obtain value 𝐑B\\mathbf{R}^B. need, since yy BB. Now suppose y∈Dy\\D. need look somewhat complicated second component right-hand side , , g∘(πA∪(C∖B)→C∖B∪(πB→C∩B∘f∘πA∪(C∖B)→))g\\circ(\\pi^{ \\cup (C\\smallsetminus B) \\C\\smallsetminus B} \\cup (\\pi^{ B\\C\\cap B}\\circ f\\circ \\pi^{ \\cup (C\\smallsetminus B)\\})). Since g:𝐑C→𝐑Dg: \\mathbf{R}^C\\\\mathbf{R}^D, need feed gg value 𝐑C\\mathbf{R}^C obtain mapping 𝐑\\mathbf{R} values (yy) DD. 𝐱\\mathbf{x} 𝐑A∪(C∖B)\\mathbf{R}^{\\cup(C\\smallsetminus B)}, 𝐱\\mathbf{x} tells values CC aren’t also BB mapped. mapping values corresponds projection πA∪(C∖B)→C∖B(𝐱)=𝐱|(C∖B)\\pi^{ \\cup (C\\smallsetminus B) \\C\\smallsetminus B}(\\mathbf{x}) = \\mathbf{x}|(C\\smallsetminus B), value 𝐑C∖B\\mathbf{R}^{C\\smallsetminus B}. find portion mapping need belongs 𝐑C∩B\\mathbf{R}^{C\\cap B}, look πB→C∩B∘f∘πA∪(C∖B)→\\pi^{ B\\C\\cap B}\\circ f\\circ \\pi^{ \\cup (C\\smallsetminus B)\\}. just seen, f∘πA∪(C∖B)→Af\\circ \\pi^{ \\cup (C\\smallsetminus B)\\} maps 𝐱\\mathbf{x} member 𝐑B\\mathbf{R}^B. can apply projection πB→C∩B\\pi^{ B\\C\\cap B} obtain member 𝐑C∩B\\mathbf{R}^{C\\cap B}. Taking union components 𝐑C∖B\\mathbf{R}^{C\\smallsetminus B} 𝐑C∩B\\mathbf{R}^{C\\cap B} gives us value 𝐑C\\mathbf{R}^C, can apply function gg. result function 𝐑D\\mathbf{R}^D telling values (yy) DD mapped.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"general-ordered-sum","dir":"Articles > Web_only","previous_headings":"The BioCro model > Modularization in BioCro > Decomposing the direct module function","what":"General ordered sum","title":"BioCro as a Dynamical System","text":"now generalize notion ordered sum two direct modules ordered sum finite number direct modules. Suppose ordered collection (ℳ1,ℳ2,…,ℳn)(\\mathcal{M}_1, \\mathcal{M}_2, \\dots, \\mathcal{M}_n) direct modules. case direct modules, 𝐈𝐧ℳi∩𝐎𝐮𝐭ℳi=∅\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_i=\\emptyset ii. , assume 𝐎𝐮𝐭ℳi∪𝐎𝐮𝐭ℳj=∅\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cup\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset ≠ji\\neq j, 𝐈𝐧ℳi∩𝐎𝐮𝐭ℳj=∅\\operatorname{\\mathbf{}}\\mathcal{M}_i\\cap\\operatorname{\\mathbf{}}\\mathcal{M}_j=\\emptyset whenever <ji<j. define ordered sum ∑=1nℳi\\sum_{=1}^n\\mathcal{M}_i recursively follows:  $$\\begin{alignat}{2}     \\sum_{=1}^k\\mathcal{M}_i &= M_1 && \\qquad\\text{$k=1$} \\notag \\\\     \\sum_{=1}^k\\mathcal{M}_i &= \\sum_{=1}^{k-1}\\mathcal{M}_i                         + \\mathcal{M}_k && \\qquad                         \\text{$1<k\\leq n$}\\label{eq:recursive_module_sum} \\end{alignat}$$ Things quite simple , however, since must show ordered sum given right-hand side always defined. Specifically, must show  $$\\begin{align}     \\operatorname{\\mathbf{}}\\sum_{=1}^{k-1}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_k &= \\emptyset         \\label{eq:general_sum_disjoint_outputs} \\\\ \\intertext{}     \\operatorname{\\mathbf{}}\\sum_{=1}^{k-1}\\mathcal{M}_i \\cap \\operatorname{\\mathbf{}}\\mathcal{M}_k &= \\emptyset. \\label{eq:general_sum_general_condition} \\end{align}$$ easily follows induction equation  𝐎𝐮𝐭∑=1k−1ℳi=⋃=1k−1𝐎𝐮𝐭ℳi,\\begin{equation*}     \\operatorname{\\mathbf{}}\\sum_{=1}^{k-1}\\mathcal{M}_i = \\bigcup_{=1}^{k-1}\\operatorname{\\mathbf{}}\\mathcal{M}_i, \\end{equation*} easily follows , distributivity ∩\\cap ∪\\cup, assumption outputs modules pairwise disjoint. prove , first observe follows immediately 𝐈𝐧(ℳi+ℳj)⊆𝐈𝐧ℳi∪𝐈𝐧Mj\\operatorname{\\mathbf{}}(\\mathcal{M}_i+\\mathcal{M}_j) \\subseteq \\operatorname{\\mathbf{}}\\mathcal{M}_i \\cup \\operatorname{\\mathbf{}}M_j, easy show induction  𝐈𝐧∑=1k−1ℳi⊆⋃=1k−1𝐈𝐧ℳi.\\begin{equation}     \\operatorname{\\mathbf{}}\\sum_{=1}^{k-1}\\mathcal{M}_i \\subseteq \\bigcup_{=1}^{k-1}\\operatorname{\\mathbf{}}\\mathcal{M}_i. \\end{equation} Since stipulation defining ordered sum modules output module ordered collection disjoint inputs module occuring earlier ordering, light distributivity ∩\\cap ∪\\cup, desired result immediately follows.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"appendix-degenerate-biocro-systems","dir":"Articles > Web_only","previous_headings":"","what":"Appendix: Degenerate BioCro systems","title":"BioCro as a Dynamical System","text":"appendix meant demonstrate certain edge cases “-label” uses BioCro systems. systems set using R interface. similar set systems use C++ library directly written C++.","code":""},{"path":"/articles/web_only/dynamical_systems.html","id":"a-minimal-system","dir":"Articles > Web_only","previous_headings":"Appendix: Degenerate BioCro systems","what":"A minimal system","title":"BioCro as a Dynamical System","text":"system contains absolute minimum number quantities. Since single time point, timestep present satisfy formal requirement validity checker; otherwise meaningless. formal requirement R interface (C++ interface) set driver variables either contains time contains doy hour. latter case, time automatically calculated doy hour. Note ncalls always shows output data frame, even though constant even though system variable. Note also time driver, dominates: doy hour (present) overwritten. time present, doy hour must ; one , time calculated get error:","code":"library(BioCro) run_biocro(parameters = list(timestep=1), drivers = data.frame(time=45.625)) ##   ncalls   time ## 1      1 45.625 run_biocro(parameters = list(timestep=1), drivers = data.frame(doy=80, hour=14.25)) ##   doy fractional_doy  hour ncalls    time ## 1  80       80.59375 14.25      1 1910.25 run_biocro(     parameters = list(timestep=1),     differential_module_names = 'BioCro:harmonic_oscillator',     drivers = data.frame(doy=80) ) ## Error: No `time` variable found in the `drivers` dataframe."},{"path":"/articles/web_only/dynamical_systems.html","id":"a-system-having-a-differential-variable-but-no-differential-module","dir":"Articles > Web_only","previous_headings":"Appendix: Degenerate BioCro systems","what":"A system having a differential variable but no differential module","title":"BioCro as a Dynamical System","text":"noted Section , initial_values parameter determines variables differential variables. Usually, differential variable output one differential modules, required. Differential variables output differential module assumed derivative zero; , constant. system exhibits case.","code":"run_biocro(initial_values = list(x = 52),            parameters = list(timestep=1),            drivers = data.frame(time=0:4)) ##   ncalls time  x ## 1      5    0 52 ## 2      5    1 52 ## 3      5    2 52 ## 4      5    3 52 ## 5      5    4 52"},{"path":"/articles/web_only/dynamical_systems.html","id":"an-off-label-use-of-run_biocro","dir":"Articles > Web_only","previous_headings":"Appendix: Degenerate BioCro systems","what":"An off-label use of run_biocro","title":"BioCro as a Dynamical System","text":"example might called “-label” use BioCro system. system really doesn’t deserve called dynamical system . Although drivers parameter contains five rows temporal spacial data (row specifies time place), rows inherent relationship one another: represent sort evolution system time. times specified rows aren’t even chronological order: although timestep variable supposed indicate temporal relationship successive rows drivers parameter value, convention , enforced. Nevertheless, system useful: uses BioCro:solar_position_michalsky module compute cosine zenith angle sun noon various terrestrial locations various days year. gotten information using five calls run_biocro drivers single row, one call convenient.","code":"result <- run_biocro(parameters = list(timestep=1),                      drivers = data.frame(doy = c(355, 172, 80, 80, 80),                                           hour = 12,                                           time_zone_offset = -6,                                           year = 2022,                                           lat = c(40, 40, 40, 0, 89),                                           longitude = -88),                      direct_module_names = 'BioCro:solar_position_michalsky') result[c('lat', 'longitude', 'doy', 'hour', 'cosine_zenith_angle')] ##   lat longitude doy hour cosine_zenith_angle ## 1  40       -88 355   12          0.44655908 ## 2  40       -88 172   12          0.95824629 ## 3  40       -88  80   12          0.77093280 ## 4   0       -88  80   12          0.99996308 ## 5  89       -88  80   12          0.02509952"},{"path":"/articles/web_only/dynamical_systems.html","id":"a-system-having-only-drivers-and-the-obligatory-timestep-parameter","dir":"Articles > Web_only","previous_headings":"Appendix: Degenerate BioCro systems","what":"A system having only drivers (and the obligatory timestep parameter)","title":"BioCro as a Dynamical System","text":"Like minimal system shown first example, system differential variables modules. drivers include driver variables aren’t time related. Like systems modules, doesn’t really anything. weather information run displays just easily displayed using","code":"result <- run_biocro(parameters = list(timestep=1),                      drivers = weather$`2005`[1000:1010,]) result[c('year', 'doy', 'hour', 'precip', 'rh', 'solar', 'temp', 'windspeed')] ##    year doy hour precip   rh solar  temp windspeed ## 1  2005  42   15 0.0106 0.74   756 4.530      7.48 ## 2  2005  42   16 0.0106 0.70   421 5.080      7.45 ## 3  2005  42   17 0.0106 0.73   102 4.370      5.94 ## 4  2005  42   18 0.0106 0.80     1 2.460      4.78 ## 5  2005  42   19 0.0106 0.83     0 1.650      4.12 ## 6  2005  42   20 0.0106 0.84     0 1.210      3.57 ## 7  2005  42   21 0.0106 0.87     0 0.635      3.26 ## 8  2005  42   22 0.0106 0.86     0 0.550      3.76 ## 9  2005  42   23 0.0106 0.85     0 0.890      4.82 ## 10 2005  43    0 0.0000 0.82     0 1.250      4.96 ## 11 2005  43    1 0.0000 0.83     0 1.030      5.67 weather$`2005`[1000:1010,                c('year', 'doy', 'hour', 'precip', 'rh', 'solar', 'temp', 'windspeed')]"},{"path":[]},{"path":"/articles/web_only/energy_balance.html","id":"generalEB","dir":"Articles > Web_only","previous_headings":"","what":"Canopy Energy Balance","title":"Energy Balance, Transpiration, and Leaf Temperature","text":"Energy balance discussed many sources, Thornley Johnson (1990) Campbell Norman (1998), two main references BioCro models. begin general discussion, mostly using notation Chapter 14 Thornley Johnson (1990), also borrowing bit Chapters 12 14 Campbell Norman (1998). First, total light energy (shortwave longwave) absorbed canopy (\\(J_a\\)) dissipated stored following processes: Long-wave energy loss environment Convective heat transfer canopy air Evaporation water interior surfaces leaves Conductive heat transfer canopy ground Canopy metabolism Heat storage canopy Mathematically, can express idea \\[\\begin{equation}     J_a - R_L - H - \\lambda E - G - M = q, \\tag{1.1} \\end{equation}\\] \\(R_L\\) rate long-wave energy loss, \\(H\\) rate conductive heat transfer, \\(\\lambda\\) latent heat vaporization water, \\(E\\) transpiration rate, \\(G\\) rate heat loss ground, \\(M\\) rate energy used canopy metabolism, \\(q\\) rate heat storage canopy. quantities energy flux densities typical units J m\\(^{-2}\\) s\\(^{-1}\\). exception \\(\\lambda\\), typically units J kg\\(^{-1}\\). Equation (1.1) crop-specific version general principle conservation energy, already begins highlight connection energy transpiration. term “energy balance” synonymous “steady-state energy flow.” Thus, energy balance calculations always made assumption \\(q = 0\\). Another simplification metabolic processes photosynthesis respiration dissipate small fraction incident energy, can thus ignored. Finally, can combine \\(J_a\\), \\(R_L\\), \\(G\\) single term (\\(\\phi_N\\)): \\[\\begin{equation}     \\phi_N = J_a - R_L - G. \\tag{1.2} \\end{equation}\\] changes, (1.1) becomes \\[\\begin{equation}     \\phi_N - H - \\lambda E = 0. \\tag{1.3} \\end{equation}\\] words, \\(\\phi_N\\) net energy available crop driving transpiration sensible heat loss. terms \\(H\\) \\(E\\) related conductance heat water vapor canopy ambient environment. fact, can expressed using one-dimensional diffusion equations: \\[\\begin{equation}     H = \\rho c_p \\left( T_l - T_a \\right) g_H \\tag{1.4} \\end{equation}\\] \\[\\begin{equation}     E = \\left(\\rho_{vl} - \\rho_{va} \\right) g_W, \\tag{1.5} \\end{equation}\\] \\(\\rho\\) density dry air (kg m\\(^{-3}\\)), \\(c_p\\) specific heat capacity dry air (J kg\\(^{-1}\\) K\\(^{-1}\\)), \\(T_a\\) \\(T_l\\) temperatures ambient air leaves canopy, respectively (K), \\(\\rho_{va}\\) \\(\\rho_{vl}\\) water vapor densities ambient air within leaves, respectively (kg water m\\(^{-3}\\)), \\(g_H\\) \\(g_W\\) conductances heat water vapor (m s\\(^{-1}\\)). Note temperatures expressed K ensure product \\(\\rho c_p T\\) energy density units J m\\(^{-3}\\) (even though temperature difference \\(T_l - T_a\\) numerically identical whether K \\(^{\\deg}\\)C used temperatures). Thus, Equation (1.4) (1.5) express flux density product conductance density gradient. healthy leaf sufficient access water, environment reasonably low vapor pressure deficit, air intercellular spaces close full saturation (Wong et al. 2022). Thus, make simplifying assumption \\(\\rho_{vl} = \\rho_{sat}(T_l)\\), \\(\\rho_{sat}(T_l)\\) saturation water vapor density leaf temperature. assumption, Equation (1.5) can expressed \\[\\begin{equation}     E = \\left[ \\rho_{sat}(T_l) - \\rho_{va} \\right] g_W. \\tag{1.6} \\end{equation}\\] Combining Equations (1.3), (1.4), (1.6), can now express energy balance requirement \\[\\begin{equation}     \\phi_N - \\rho c_p \\left( T_l - T_a \\right) g_H -         \\lambda \\left[ \\rho_{sat}(T_l) - \\rho_{va} \\right] g_W = 0. \\tag{1.7} \\end{equation}\\] powerful equation terms either () can taken constant given set environmental conditions (ii) known dependence leaf temperature. , can consider Equation (1.7) way calculate temperature leaves canopy. \\(T_l\\) known, Equation (1.6) can used calculate transpiration rate \\(E\\). Often main goal energy balance calculation, since transpiration rate determines crop water use. However, Equation (1.7) solved analytically written. One main option solve using numerical approach, another approximate terms way enables analytical expression \\(T_l\\) \\(E\\). following sections discuss different approaches problem varying levels complexity.","code":""},{"path":"/articles/web_only/energy_balance.html","id":"pmthornley","dir":"Articles > Web_only","previous_headings":"","what":"A Penman-Monteith Equation","title":"Energy Balance, Transpiration, and Leaf Temperature","text":"continue following Chapter 12 Thornley Johnson (1990), derives analytical expressions \\(T_l\\) \\(E\\) based energy balance (Equation (1.7)). approach, make assumptions: treat diffusion path water vapor consisting two sequential components: () diffusion intercellular spaces across stomata leaf surfaces (conductance \\(g_c\\)) (ii) diffusion leaf surfaces across boundary layer bulk atmosphere (conductance \\(g_a\\)). assume flows water vapor heat across boundary layer driven mechanical processes. assume \\(\\phi_N\\), \\(g_a\\), \\(g_c\\) depend \\(T_l\\). assume temperature difference ambient air leaves canopy (\\(\\Delta T = T_l - T_a\\)) small. \\(\\Delta T\\) small, possible linearize equation saturation water vapor density \\(\\rho_{sat}(T)\\). approach first taken Penman. , first express \\(\\rho_{sat}(T_l)\\) Taylor series centered \\(T_a\\): \\[\\begin{equation}     \\rho_{sat}(T_l) = \\rho_{sat}(T_a) +         \\frac{d \\rho_{sat}}{d T} \\bigg\\rvert_{T_a} \\cdot \\Delta T +         \\frac{1}{2!} \\cdot \\frac{d^2 \\rho_{sat}}{d T^2} \\bigg\\rvert_{T_a} \\cdot \\left( \\Delta T \\right)^2 + ... \\end{equation}\\] \\(\\Delta T\\) small, \\((\\Delta T)^2\\) even smaller, can consider higher-order terms negligable. case, can keep just first two terms Taylor series: \\[\\begin{equation}     \\rho_{sat}(T_l) \\approx \\rho_{sat}(T_a) + s \\Delta T \\tag{2.1}, \\end{equation}\\] \\(s = \\frac{d \\rho_{sat}}{d T} \\bigg\\rvert_{T_a}\\) slope \\(\\rho_{sat}(T)\\) \\(T = T_a\\). simplification, Equation (1.6) becomes \\[\\begin{equation}     E = \\left[ \\rho_{sat}(T_a) + s \\left( \\Delta T \\right) - \\rho_{va} \\right] g_W =         \\left( \\Delta \\rho_{va} + s \\Delta T \\right) g_W \\tag{2.2} \\end{equation}\\] \\(\\Delta \\rho_{va} = \\rho_{sat}(T_a) - \\rho_{va}\\) vapor density deficit ambient air. stomata boundary layer series, total conductance water vapor (\\(g_W\\)) related \\(g_a\\) \\(g_c\\) according \\[\\begin{equation}     \\frac{1}{g_W} = \\frac{1}{g_a} + \\frac{1}{g_c}, \\tag{2.3} \\end{equation}\\] Additionally, mechanisms conduction convection drive flow water vapor heat boundary layer, conductances identical: \\[\\begin{equation}     g_H = g_a. \\tag{2.4} \\end{equation}\\] Combining Equations (1.7), (2.1), (2.3), (2.4), can arrive expression conservation energy crop canopy water vapor conductances used: \\[\\begin{equation}     \\phi_N - \\rho c_p \\Delta T g_a -         \\frac{\\lambda \\left( \\Delta \\rho_{va} + s \\Delta T \\right)}{1 / g_a + 1 / g_c} = 0. \\tag{2.5} \\end{equation}\\] may look simple. Nevertheless, algebra, Equation (2.5) can solved temperature difference \\(\\Delta T\\): \\[\\begin{equation}     \\Delta T = \\frac{\\phi_N \\left( 1 / g_a + 1 / g_c \\right) - \\lambda \\Delta \\rho_{va}}{\\lambda \\left[ s + \\gamma \\left( 1 + g_a / g_c \\right) \\right]} \\tag{2.6} \\end{equation}\\] \\(\\gamma = \\frac{\\rho c_p}{\\lambda}\\) “psychrometric parameter.” Equation 14.11e Thornley Johnson (1990). Note assumption, everything right-hand side independent leaf temperature. Values \\(s\\), \\(\\rho\\), \\(c_p\\), etc can found reference tables, values \\(\\phi_N\\), \\(g_a\\), etc, known can estimated, Equation (2.6) can used calculate \\(\\Delta T\\) (hence \\(T_l\\)). can also plugged Equation (2.2) calculate canopy transpiration rate \\(E\\): \\[\\begin{equation}     E = \\frac{s \\phi_N + \\lambda \\gamma g_a \\Delta \\rho_{va}}{\\lambda \\left[ s + \\gamma \\left(1 + g_a / g_c \\right) \\right]}, \\tag{2.7} \\end{equation}\\] Equation 14.4k Thornley Johnson (1990), described “Penman-Monteith equation.” However, just one page later, Thornley Johnson (1990) gives alternate version (Equation 14.5d). turns , many different equations referred “Penman-Monteith equation” throughout textbooks plant physiology literature. Thus, prefer call “Penman-Monteith equation” indicate just one example group potential Penman-Monteith equations. next section, discuss another version.","code":""},{"path":"/articles/web_only/energy_balance.html","id":"pmcampbell","dir":"Articles > Web_only","previous_headings":"","what":"Another Penman-Monteith Equation","title":"Energy Balance, Transpiration, and Leaf Temperature","text":"assumptions given start previous section way build analytical expressions \\(\\Delta T\\) \\(E\\) Equation (1.7). fact, different approach can found Chapter 14 Campbell Norman (1998). make alternate assumptions: assume \\(J_a\\) \\(G\\) depend leaf temperature, use Stefan-Boltzmann law calculate \\(R_L\\) \\(T_l\\). assume \\(g_H\\) \\(g_W\\) depend leaf temperature. assume temperature difference ambient air leaves canopy (\\(\\Delta T = T_l - T_a\\)) small. Applying Stefan-Boltzmann law, now expression \\(R_L\\): \\[\\begin{equation}     R_L = \\epsilon_s \\sigma T_l^4, \\end{equation}\\] \\(\\epsilon_s\\) canopy surface emissivity \\(\\sigma\\) Stefan-Boltzmann constant. \\(\\Delta T\\) small, can linearize saturation water vapor density (Equation (2.1)). can also linearize \\(R_L\\) noting \\[\\begin{equation}     T_L^4 = (T_a + \\Delta T)^4 = T_a^4 + 4 T_a^3 \\Delta T +         6 T_a^2 (\\Delta T)^2 + 4 T_a (\\Delta T)^3 + (\\Delta T)^4. \\end{equation}\\] can neglect terms \\(\\Delta T^2\\) higher powers, yielding \\[\\begin{equation}     R_L \\approx \\epsilon_s \\sigma \\left( T_a^4 + 4 T_a^3 \\Delta T \\right) =         \\epsilon_s \\sigma T_a^4 - \\rho c_p \\Delta T g_r, \\tag{3.1} \\end{equation}\\] \\(g_r = 4 \\epsilon_s \\sigma T_a^3 / ( \\rho c_p)\\) “radiative conductance” units m s\\(^{-1}\\). Substituing linearization Equation (1.2) yields \\[\\begin{equation}     \\phi_N = J_a - \\epsilon_s \\sigma T_a^4 - \\rho c_p \\Delta T g_r  - G, \\tag{3.2} \\end{equation}\\] Combining Equations (1.7), (2.1), (3.2), yet another new version canopy energy balance equation: \\[\\begin{equation}     J_a - \\epsilon_s \\sigma T_a^4 - \\rho c_p \\Delta T g_r  - G - \\rho c_p \\Delta T g_H -         \\lambda \\left( \\Delta \\rho_{va} + s \\Delta T \\right) g_W = 0. \\end{equation}\\] can also written \\[\\begin{equation}     J_a - \\epsilon_s \\sigma T_a^4 - G - \\rho c_p g_{Hr} \\Delta T -         \\lambda \\left( \\Delta \\rho_{va} + s \\Delta T \\right) g_W = 0, \\tag{3.3} \\end{equation}\\] \\(g_{Hr} = g_r + g_H\\) combined conductance radiation heat. expression energy balance can now solved \\(\\Delta T\\) produce equation analgous Equation (2.6): \\[\\begin{equation}     \\Delta T = \\frac{\\left( J_a - \\epsilon_s \\sigma T_a^4  - G \\right) / g_W - \\lambda \\Delta \\rho_{va}}{\\lambda \\left[ s + \\gamma (g_{Hr} / g_W) \\right]}. \\tag{3.4} \\end{equation}\\] Equation (3.4) can substituted Equation (2.2) calculate canopy transpiration rate \\(E\\): \\[\\begin{equation}     E = \\frac{s \\left( J_a - \\epsilon_s \\sigma T_a^4  - G \\right) + \\lambda \\gamma g_{Hr} \\Delta \\rho_{va}}{\\lambda \\left[ s + \\gamma (g_{Hr} / g_W) \\right]}. \\tag{3.5} \\end{equation}\\] equation analagous , different , Equation (2.7). Disregarding differences notation, also identical Equation 14.12 Campbell Norman (1998), described follows: well known widely used Penman-Monteith equation estimating evapotranspiration plant communities. Yet, substantially different Penman-Monteith equation given Thornley Johnson (1990) due different assumptions linearizations made deriving .","code":""},{"path":"/articles/web_only/energy_balance.html","id":"the-penman-monteith-approach","dir":"Articles > Web_only","previous_headings":"","what":"The Penman-Monteith Approach","title":"Energy Balance, Transpiration, and Leaf Temperature","text":"Sections 2 3 illustrate two possible ways make approximations enable Equations (1.7) (1.6) solved \\(T_l\\) \\(E\\). However, many possible choices , principle, lead slightly different versions equations: Energy balance can considered canopy leaf scale. Water vapor concentrations can expressed vapor densities, partial pressures, mole fractions. \\(R_L\\) can linearized considered leaf-temperature-independent component \\(\\phi_N\\). diffusion path water vapor can separated distinct sequential steps treated single process. list necessarily exhaustive, serves illustrate idea one single Penman-Monteith equation. However, potential version equation includes linearization \\(p_{sat}(T_l)\\) possibly \\(R_L(T_l)\\), approximating linear function \\(\\Delta T\\). linearization enables energy balance equation solved \\(T_l\\). Thus, “Penman-Monteith approach” common equations even differences equations .","code":""},{"path":"/articles/web_only/energy_balance.html","id":"energy-balance-in-biocro","dir":"Articles > Web_only","previous_headings":"","what":"Energy Balance in BioCro","title":"Energy Balance, Transpiration, and Leaf Temperature","text":"Sections 1, 2, 3, canopy transpiration rate \\(E\\) depends canopy-level conductances: \\(g_H\\), \\(g_W\\), \\(g_a\\), \\(g_c\\), \\(g_r\\). practice, conductances difficult estimate priori depend gradients wind speed, light intensity, factors within plant canopy. BioCro, take alternate approach transpiration rates estimated leaf level scaled canopy level. enables us use models leaf-level conductance (Ball-Berry model stomatal conductance) also account variations key inputs like \\(J_a\\) throughout canopy. framework, total canopy transpiration rate given \\[\\begin{equation}     E_{canopy} = \\int_{\\ell = 0}^{L} \\left( E_{leaf}^{sunlit}(\\ell) \\cdot f_{sunlit}(\\ell) +         E_{leaf}^{shaded}(\\ell) \\cdot f_{shaded}(\\ell) \\right) d \\ell, \\tag{5.1} \\end{equation}\\] \\(E_{leaf}^{sunlit}(\\ell)\\) \\(E_{leaf}^{shaded}(\\ell)\\) leaf-level transpiration rates per leaf area sunlit shaded leaves cumulative leaf area index (cLAI) \\(\\ell\\), \\(f_{sunlit}(\\ell)\\) \\(f_{shaded}(\\ell)\\) fractions sunlit shaded leaf area \\(\\ell\\), \\(L\\) total canopy leaf area index (LAI). equations derived using Penman-Monteith approach assume \\(g_W\\) independent leaf temperature incident light intensity. Realistically, assumption likely violated stomatal conductance changes dynamically photosynthesis, turn changes dynamically leaf temperature incident light intensity. also buoyancy component boundary layer conductance depends leaf temperature. equations used calculate conductances complex readily amenable types linearizations employed Penman-Monteith approach. , BioCro, take hybrid approach energy balance \\(T_l\\) varied iteratively simultaneously determine \\(g_W\\), \\(T_l\\), \\(E\\) using Equation (2.6). See leaf_energy_balance() function BioCro’s C++ code details. \\(E_{leaf}\\) calculated numerically BioCro, possible obtain analytical expression \\(E_{canopy}\\) using Equation (5.1). Instead, integral approximated using Riemann sum: \\[\\begin{equation}     E_{canopy} = \\sum_{= 0}^{N-1} \\left( E_{leaf}^{sunlit}(\\ell_i) \\cdot f_{sunlit}(\\ell_i) +         E_{leaf}^{shaded}(\\ell_i) \\cdot f_{shaded}(\\ell_i) \\right) \\cdot \\frac{L}{N}. \\tag{5.2} \\end{equation}\\] cLAI interval \\((0, L)\\) divided \\(N\\) sub-intervals equal width (\\(L / N\\)) \\(\\ell_i = (+ 0.5) \\cdot L / N\\) midpoint \\(^{th}\\) sub-interval. Values \\(T_l\\) \\(E\\) calculated energy balance sensitive conductances across stomata boundary layer. Yet, boundary layer conductance particular difficult estimate depends details wind speed, leaf shape, factors change dynamically realistic conditions easily quantified. BioCro, consider flow water vapor leaf’s intercellular spaces bulk air atmosphere consist three sequential steps gas crosses stomata, leaf boundary layer, finally canopy boundary layer. latter two conductances combine form overall boundary layer conductance: \\[\\begin{equation}     \\frac{1}{g_b} = \\frac{1}{g_{b,leaf}} + \\frac{1}{g_{b,canopy}}, \\end{equation}\\] \\(g_{b,leaf}\\) \\(g_{g,canopy}\\) conductances across leaf canopy boundary layers. \\(g_{b,leaf}\\) calculated using model described Nikolov et al. (1995). treats leaves canopy individual flat objects moving air stream, considers free forced convection, free convection driven wind forced convection driven temperature gradients. BioCro, wind speed within canopy modeled exponential decay cumulative leaf area index, depth-dependent wind speed used calculate \\(g_{b,leaf}\\). , dependence stomatal conductance, \\(g_{b,leaf}\\) changes throughout canopy different sunlit shaded leaves. hand, \\(g_{b,canopy}\\) calculated using model described Thornley Johnson (1990). treats canopy infinitely wide rough surface covering ground, considers turbulent flow, \\(g_{b,canopy}\\) primarily depends wind speed measured canopy. model equations predict \\(g_{b,canopy} = 0\\) wind speed zero. reality, temperature-driven convection occur low wind speeds, setting lower limit \\(g_{b,canopy}\\) model \\(g_{b,leaf}\\). account simple way, minimum value \\(g_{b,canopy}\\) enforced BioCro. minimum conductance parameter can varied user. \\(g_{b,canopy}\\) sunlit shaded leaves depths within canopy. numeric technique used solve \\(T_l\\) BioCro (fixed-point iteration) always converge reasonable solution. prevent extremely high low leaf temperatures, \\(\\Delta T\\) restricted lie -30\\(^{\\circ}\\)C 30\\(^{\\circ}\\)C. restriction tends enforced unusual situations stomatal conductance low (hence assimilation low well), thus little impact overall result simulation.","code":""},{"path":"/articles/web_only/energy_balance.html","id":"biocro-examples","dir":"Articles > Web_only","previous_headings":"5 Energy Balance in BioCro","what":"BioCro Examples","title":"Energy Balance, Transpiration, and Leaf Temperature","text":"BioCro’s leaf-level energy balance model:   BioCro’s model canopy boundary layer conductance:  BioCro’s model leaf boundary layer conductance:","code":"library(BioCro) library(lattice) transpiration_res <- module_response_curve(     'BioCro:leaf_evapotranspiration',     list(         absorbed_shortwave = 250,         atmospheric_pressure = 101325,         temp = 25,         canopy_height = 1,         leafwidth = 0.1,         min_gbw_canopy = 0.005,         rh = 0.6,         wind_speed_height = 10     ),     expand.grid(         windspeed = seq(0, 2, by = 0.005),         Gs = c(0.05, 0.1, 0.2, 0.4, 0.8)     ) )  xyplot(     TransR ~ windspeed,     group = Gs,     data = transpiration_res,     type = 'l',     auto = TRUE,     xlab = 'Wind speed (m / s)',     ylab = 'Transpiration rate (mmol / m^2 / s)',     ylim = c(0, 5),     main = 'Transpiration rate for different\\nstomatal conductances (mol / m^2 / s)' ) xyplot(     leaf_temperature ~ windspeed,     group = Gs,     data = transpiration_res,     type = 'l',     auto = TRUE,     xlab = 'Wind speed (m / s)',     ylab = 'Leaf temperature (degrees C)',     ylim = c(0, 100),     main = 'Leaf temperature for different\\nstomatal conductances (mol / m^2 / s)' ) canopy_gbw_res <- module_response_curve(     'BioCro:canopy_gbw_thornley',     list(         min_gbw_canopy = 0,         windspeed_height = 10     ),     expand.grid(         windspeed = seq(0, 2, by = 0.025),         canopy_height = seq(0.5, 2, by = 0.5)     ) )  xyplot(     gbw_canopy ~ windspeed,     group = canopy_height,     data = canopy_gbw_res,     type = 'l',     auto = TRUE,     xlab = 'Wind speed (m / s)',     ylab = 'Canopy boundary layer conductance (m / s)',     ylim = c(0, 0.02),     main = 'Canopy gbw for different canopy heights' ) leaf_gbw_res <- module_response_curve(     'BioCro:leaf_gbw_nikolov',     list(         air_pressure = 101325,         leafwidth = 0.1,         temp = 25,         leaf_temperature = 26,         rh = 0.6     ),     expand.grid(         windspeed = seq(0, 1, by = 0.005),         Gs = c(0.05, 0.1, 0.2, 0.4, 0.8)     ) )  xyplot(     gbw_leaf ~ windspeed,     group = Gs,     data = leaf_gbw_res,     type = 'l',     auto = TRUE,     xlab = 'Wind speed (m / s)',     ylab = 'Leaf boundary layer conductance (m / s)',     ylim = c(0, 0.02),     main = 'Leaf gbw for different stomatal conductances\\n(Gs; mol / m^2 / s)' )"},{"path":[]},{"path":"/articles/web_only/pdf_vignette_index.html","id":"a-practical-guide-to-biocro","dir":"Articles > Web_only","previous_headings":"","what":"A Practical Guide to BioCro","title":"PDF Vignettes","text":"R code Practical Guide BioCro","code":""},{"path":"/articles/web_only/pdf_vignette_index.html","id":"quantitative-comparison-between-two-photosynthesis-models","dir":"Articles > Web_only","previous_headings":"","what":"Quantitative Comparison Between Two Photosynthesis Models","title":"PDF Vignettes","text":"R code Quantitative Comparison Two Photosynthesis Models","code":""},{"path":[]},{"path":"/articles/web_only/thick_layer_absorption.html","id":"overview","dir":"Articles > Web_only","previous_headings":"","what":"Overview","title":"Light Absorption by a Thick Layer","text":"vignette explains understanding formula used thick_layer_absorption function found C++ source code file src/module_library/sunML.cpp. Although used BioCro, equation seems rarely discussed plant biology literature. far can tell, ultimately based Equation (1) Saeki (1960). However, description paper short sparse regarding details. tried add explanatory comments fill math steps skipped. tried follow “spirit” paper, although made notational changes. See Section 4 information tracking equation various references.","code":""},{"path":"/articles/web_only/thick_layer_absorption.html","id":"absorption-by-a-generic-material","dir":"Articles > Web_only","previous_headings":"","what":"Absorption by a Generic Material","title":"Light Absorption by a Thick Layer","text":"Suppose light intensity \\(I_0\\) (representing flux density photons energy, expressed units photons per area per time, energy per area per time) incident perfectly flat surface infinitely thick piece material reflects, absorbs, transmits light. Assume optical properties density material constant along plane parallel material’s surface, although may vary depth within material. situation, light intensity point within material depend distance material’s surface, can reduce number relevant dimensions three one, important simplification. light passes material, intensity gradually diminish eventually reaches zero. can express mathematically via one-dimensional expression \\[\\begin{equation}     (x) = I_0 \\cdot f(x), \\end{equation}\\] \\(x\\) coordinate represents amount material light passed , \\(f(x)\\) fraction original light received material \\(x\\). Note material uniform density, \\(x\\) spatial coordinate, instead non-linear dependence distance. Although know particular form \\(f(x)\\), can safely assume : \\(f\\) monotonic. \\(f(0) = 1\\) (incident light material’s surface \\(I_0\\)). \\(f(x)\\) approaches 0 \\(x\\) approaches infinity (light intensity fully diminished deep within material). Now consider two points \\(x\\) \\(x + \\Delta x\\) within material, separated amount material \\(\\Delta x\\). change light intensity per unit material two points, \\(\\Delta /\\Delta x\\), can expressed \\[\\begin{equation}     \\frac{\\Delta }{\\Delta x} = \\frac{(x + \\Delta x) - (x)}{\\Delta x}. \\end{equation}\\] Rewriting using \\(f(x)\\), \\[\\begin{equation}     \\frac{\\Delta }{\\Delta x} = I_0 \\cdot \\frac{f(x + \\Delta x) - f(x)}{\\Delta x}. \\end{equation}\\] assume change intensity due absorption reflection light pass point \\(x\\) point \\(x + \\Delta x\\), can also write \\[\\begin{equation}     \\frac{\\Delta }{\\Delta x} \\approx - (x) \\cdot \\left( (x) + R(x) \\right), \\end{equation}\\] \\((x)\\) \\(R(x)\\) fractions incident light absorbed reflected thin layer material \\(x\\) negative sign indicates overall light intensity decreases due absorption reflection. Thus, can equate two expressions \\(\\Delta / \\Delta x\\) find \\[\\begin{equation}     I_0 \\cdot \\frac{f(x + \\Delta x) - f(x)}{\\Delta x} \\approx         - I_0 \\cdot f(x) \\cdot \\left( (x) + R(x) \\right) \\end{equation}\\] , equivalently, \\[\\begin{equation}     \\frac{f(x + \\Delta x) - f(x)}{\\Delta x} \\approx         - f(x) \\cdot \\left( (x) + R(x) \\right) \\end{equation}\\] \\(\\Delta x\\) approaches 0, approximation becomes exact can recognize left-hand side equation derivative \\(f(x)\\) respect \\(x\\): \\[\\begin{equation}     \\frac{df}{dx}(x) = - f(x) \\cdot \\left( (x) + R(x) \\right). \\end{equation}\\] Rearranging, can express \\(f(x)\\) terms derivative material’s optical properties: \\[\\begin{equation}     f(x) = - \\frac{\\frac{df}{dx}(x)}{(x) + R(x)}. \\end{equation}\\] Noting light received thin layer material must reflected, absorbed, transmitted, can use \\((x) + R(x) + T(x) = 1\\) rewrite equation terms fraction transmitted light \\(T(x)\\): \\[\\begin{equation}     f(x) = - \\frac{\\frac{df}{dx}(x)}{1 - T(x)} \\tag{2.1} \\end{equation}\\]","code":""},{"path":"/articles/web_only/thick_layer_absorption.html","id":"additional-considerations-especially-for-plant-biology","dir":"Articles > Web_only","previous_headings":"2 Absorption by a Generic Material","what":"Additional Considerations (Especially for Plant Biology)","title":"Light Absorption by a Thick Layer","text":"simple model calculating light intensities within material first applied context plant biology Monsi Saeki (1953), used calculate light levels within plant canopy. application main reason describe \\(x\\) amount material rather depth; plant canopies, leaves uniformly distributed depth, cumulative leaf area index better independent variable light absorption. Monsi Saeki (1953) difficult find written German, parts reproduced English easier access (Saeki 1960, 1963; Hirose 2004). Saeki (1960) notes following equation: must noted equations \\(m\\) includes fraction resulting light transmitted leaf blades also fraction reflected downward inclined leaves. \\(m\\) constant increases depth foliage, light particular wavelengths liable reflected transmitted, increases proportion deeper positions. (original notation, \\(m\\) used place \\(T(x)\\) use .) Thus, \\(T\\), \\(R\\), \\(\\) exactly corresponding optical properties isolated layer material (leaf).","code":""},{"path":"/articles/web_only/thick_layer_absorption.html","id":"total-absorption","dir":"Articles > Web_only","previous_headings":"","what":"Total Absorption","title":"Light Absorption by a Thick Layer","text":"consider light sufficiently narrow wavelength band, may reasonable suppose \\(T\\), \\(R\\), \\(\\) constant throughout material. case, possible estimate total amount light absorbed material. , first calculate absorbed light depth \\(x\\) per unit material (\\(d I_\\text{abs}(x) / dx\\)), using \\(d I_\\text{abs}(x) / dx = (x) \\cdot \\). Substituting Equation (2.1) recalling \\(= 1 - T - R\\), \\[\\begin{equation}     \\frac{d I_\\text{abs}}{dx}(x) =         - I_0 \\cdot \\frac{1 - R - T}{1 - T} \\cdot \\frac{df}{dx}(x). \\end{equation}\\] Now can integrate across entire range \\(x\\) (0 \\(\\infty\\)) find total amount light absorbed material (\\(I_\\text{abs (total)}\\)): \\[\\begin{equation}         I_\\text{abs (total)} = I_0 \\cdot \\frac{1 - R - T}{1 - T} \\cdot (f(0) - f(\\infty)). \\end{equation}\\] assumption, \\(f(0) = 1\\) \\(f(\\infty) = 0\\), evaluates \\[\\begin{equation}         I_\\text{abs (total)} = I_0 \\cdot \\frac{1 - R - T}{1 - T} \\tag{3.1} \\end{equation}\\] Note Equation (3.1) agrees intuition two extreme situations: material reflect light (\\(R = 0\\)), Equation (3.1) reduces \\(I_\\text{abs (total)} = I_0\\). makes sense even thin layers material transmit light, way light avoid absorbed infinitely thick layer reflection. situation material transmit light (\\(T = 0\\)). case, Equation (3.1) reduces \\(I_\\text{abs (total)} = I_0 \\cdot (1 - R)\\). makes sense optical properties material transmission determined surface; surface optical properties thin layer, reflecting fraction \\(R\\) light absorbing rest.","code":""},{"path":"/articles/web_only/thick_layer_absorption.html","id":"additional-considerations-especially-for-plant-biology-1","dir":"Articles > Web_only","previous_headings":"3 Total Absorption","what":"Additional Considerations (Especially for Plant Biology)","title":"Light Absorption by a Thick Layer","text":"Although Equation (2.1) originally developed plant canopies, rely specific properties canopies can principle apply material. (fact, written derivation material-agnostic way emphasize .) Thus, Equation (3.1) can also apply wide variety materials. absorption reflection light soil another situation Equation (3.1) may useful, assumption thick layer transmit light certainly justified scenario. assumes thick layer homogeneous light-absorbing material, Equation (3.1) appropriate use layered canopy model one makes distinctions different leaf classes (sunlit shaded). best used situations estimating whole-canopy transpiration soil evaporation, useful know total solar energy absorbed thick layer leaves soil. Care must taken even case, however, since equation still appropriate small canopies young plants, certainly transmit significant fraction incident light.","code":""},{"path":"/articles/web_only/thick_layer_absorption.html","id":"sec:caveat","dir":"Articles > Web_only","previous_headings":"","what":"Caveats From the Author","title":"Light Absorption by a Thick Layer","text":"Although Equation (2.1) can found Monsi Saeki (1953), Saeki (1960), Saeki (1963), Equation (3.1) included references. , although derivation makes sense , still chance might correct. Equation (3.1) can found Humphries (2002), WIMOVAC code, BioCro code. places, variously attributed John H. M. Thornley Johnson (1990) Monteith Unsworth (1990). Unfortunately, textbooks available electronic form. looked library copy Monteith Unsworth (1990) electronic versions newer editions, able find equation. attempted find explanation Equation (3.1) elsewhere successful far. J. H. M. Thornley (2002) discusses Equation (2.1), ultimately just references (currently inaccessible) textbook John H. M. Thornley Johnson (1990).","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Justin M. McGrath. Maintainer, author. Edward B. Lochocki. Author. Yufeng . Author. Scott W. Oswald. Author. Scott Rohde. Author. Deepak Jaiswal. Author. Megan L. Matthews. Author. Fernando E. Miguez. Author. Stephen P. Long. Author. Dan Wang. Contributor. David LeBauer. Contributor. BioCro authors. Copyright holder. Boost Organization. Copyright holder.           Copyright holder included Boost library","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McGrath J, Lochocki E, Y, Oswald S, Rohde S, Jaiswal D, Matthews M, Miguez F, Long S (2025). BioCro: Modular Crop Growth Simulations. R package version 3.2.0, https://biocro.github.io, https://github.com/biocro/biocro. Lochocki E, Rohde S, Jaiswal D, Matthews M, Miguez F, Long S, McGrath J (2022). “BioCro II: software package modular crop growth simulations.” silico Plants, 4(1), diac003. doi:10.1093/insilicoplants/diac003. Miguez F, Zhu X, Humphries S, Bollero G, Long S (2009). “semimechanistic model predicting growth production bioenergy crop Miscanthus x giganteus: description, parameterization validation.” GCB Bioenergy, 1(4), 282 296. doi:10.1111/j.1757-1707.2009.01019.x.","code":"@Manual{,   title = {BioCro: Modular Crop Growth Simulations},   author = {Justin M. McGrath and Edward B. Lochocki and Yufeng He and Scott W. Oswald and Scott Rohde and Deepak Jaiswal and Megan L. Matthews and Fernando E. Miguez and Stephen P. Long},   year = {2025},   note = {R package version 3.2.0, https://biocro.github.io},   url = {https://github.com/biocro/biocro}, } @Article{,   author = {Edward B Lochocki and Scott Rohde and Deepak Jaiswal and Megan L. Matthews and Fernando E. Miguez and Stephen P. Long and Justin M. McGrath},   doi = {10.1093/insilicoplants/diac003},   journal = {in silico Plants},   number = {1},   pages = {diac003},   title = {BioCro II: a software package for modular crop growth simulations},   volume = {4},   year = {2022}, } @Article{,   author = {Fernando E. Miguez and Xinguang Zhu and Stephen Humphries and German A. Bollero and Stephen P. Long},   doi = {10.1111/j.1757-1707.2009.01019.x},   journal = {GCB Bioenergy},   number = {4},   pages = {282 296},   title = {A semimechanistic model predicting the growth and production of the bioenergy crop Miscanthus x giganteus: description, parameterization and validation},   volume = {1},   year = {2009}, }"},{"path":"/index.html","id":"biocro","dir":"","previous_headings":"","what":"BioCro","title":"Modular Crop Growth Simulations","text":"BioCro model predicts plant growth time given crop-specific parameters environmental data input. uses models key physiological biophysical processes underlying plant growth (Humphries Long, 1995), previously used predicting biomass yield leaf area index switchgrass miscanthus (Miguez et al., 2009). 2022, BioCro reorganized take truly modular approach modeling (Lochocki et al., 2022) new soybean model developed (Matthews et al., 2022). BioCro also integrated suite tools link model directly crop trait yield data (LeBauer et al., 2013). Predictive Ecosystem Analyzer (PEcAn) couples BioCro Biofuel Ecophysiological Traits Yields database. See References full list scientific publications using BioCro framework.","code":""},{"path":"/index.html","id":"an-example","dir":"","previous_headings":"BioCro","what":"An example","title":"Modular Crop Growth Simulations","text":"run_biocro() function accepts initial values, parameters, climate variables, sets modules run. returns results data frame. parameters modules soybean (Glycine max), miscanthus (Miscanthus x giganteus), willow (Saliceae salix).","code":"library(BioCro) library(lattice)  result <- with(soybean, {run_biocro(   initial_values,   parameters,   soybean_weather$'2002',   direct_modules,   differential_modules,   ode_solver )})  xyplot(Stem + Leaf ~ TTc, data = result, type='l', auto = TRUE)"},{"path":"/index.html","id":"simple-installation","dir":"","previous_headings":"BioCro","what":"Simple installation","title":"Modular Crop Growth Simulations","text":"BioCro available CRAN, can installed R follows:","code":"install.packages('BioCro')"},{"path":[]},{"path":"/index.html","id":"requirements","dir":"","previous_headings":"BioCro > Installation from source","what":"Requirements","title":"Modular Crop Growth Simulations","text":"R environment version 3.6.0 greater. Windows, version Rtools appropriate version R. Linux, gcc g++ version 4.9.3 greater (consult documentation distribution installation instructions). MacOS, Xcode.","code":""},{"path":"/index.html","id":"installation-steps","dir":"","previous_headings":"BioCro > Installation from source","what":"Installation steps","title":"Modular Crop Growth Simulations","text":"new Git, easiest way get local copy install GitHub Desktop use “Open GitHub Desktop” option “Code” dropdown GitHub page repository. Alternatively, clone repository using Git command line usual fashion running git clone https://github.com/biocro/biocro repository contains Git submodule, need take additional step running git submodule update --init obtain . install command line: install within R:","code":"cd path_to_source_code_parent_directory R CMD INSTALL biocro setwd('path_to_source_code_parent_directory') install.packages('biocro', repos=NULL, type='SOURCE')"},{"path":"/index.html","id":"making-contributions","dir":"","previous_headings":"BioCro","what":"Making contributions","title":"Modular Crop Growth Simulations","text":"Please see contribution guidelines submitting changes. may found Chapter One Developer’s Manual public BioCro Documentation web site.","code":""},{"path":"/index.html","id":"software-documentation","dir":"","previous_headings":"BioCro","what":"Software Documentation","title":"Modular Crop Growth Simulations","text":"See public BioCro Documentation web site. found usual package documentation, also documentation C++ code, including notes biological models used BioCro implementation. Also included documentation BioCro package developers maintainers. also separate page documents quantities used Standard BioCro Module Library.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"BioCro","what":"License","title":"Modular Crop Growth Simulations","text":"BioCro R package licensed MIT license, BioCro C++ framework licensed version 3 greater GNU Lesser General Public License (LGPL). scheme allows people freely develop models use (public private) MIT license, changes framework assembles solves models must make source code changes available users LGPL. See LICENSE.note details.","code":""},{"path":"/index.html","id":"citing-biocro","dir":"","previous_headings":"BioCro","what":"Citing BioCro","title":"Modular Crop Growth Simulations","text":"Appropriate references BioCro Miguez et al. (2009) Lochocki et al. (2022), details given . cite package , use citation('BioCro') R get details current installed version.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"BioCro","what":"References","title":"Modular Crop Growth Simulations","text":"Humphries S Long SP (1995) WIMOVAC: software package modelling dynamics plant leaf canopy photosynthesis. Computer Applications Biosciences 11(4): 361-371. Miguez FE, Zhu XG, Humphries S, Bollero GA, Long SP (2009) semimechanistic model predicting growth production bioenergy crop Miscanthus × giganteus: description, parameterization validation. Global Change Biology Bioenergy 1: 282-296. LeBauer D, Wang D, Richter K, Davidson C, Dietze M (2013) Facilitating feedbacks field measurements ecosystem models. Ecological Monographs 83(2): 133-154. Wang D, Jaiswal D, Lebauer DS, Wertin TM, Bollero GA, Leakey ADB, Long SP (2015) physiological biophysical model coppice willow (Salix spp.) production yields contiguous USA current future climate scenarios. Plant, Cell & Environment 38(9): 1850-1865. Larsen S, Jaiswal D, Bentsen NS, Wang D, Long SP (2015) Comparing predicted yield yield stability willow Miscanthus across Denmark. GCB Bioenergy 8(6): 1061-1070. Jaiswal D, de Souza AP, Larsen S, LeBauer D, Miguez FE, Sparovek G, Bollero G, Buckeridge MS, Long SP (2017) Brazilian sugarcane ethanol expandable green alternative crude oil use. Nature Climate Change 7(11): 788-792. Lochocki EB, Rohde S, Jaiswal D, Matthews ML, Miguez FE, Long SP, McGrath JM (2022) BioCro II: software package modular crop growth simulations. silico Plants 4(1): diac003. Matthews ML, Marshall-Colón , McGrath JM, Lochocki EB, Long SP (2022) Soybean-BioCro: semi-mechanistic model soybean growth. silico Plants 4(1): diab032. Y, Jaiswal D, Liang XZ, Sun C, Long SP (2022) Perennial biomass crops marginal land improve regional climate agricultural productivity. GCB Bioenergy 14(5): 558-571. Y, Matthews ML (2023) Seasonal climate conditions impact effectiveness improving photosynthesis increase soybean yield. Field Crops Research 296: 108907. Holland B, Matthews ML, Bota P, Sweetlove LJ, Long SP, diCenzo GC (2023) genome-scale metabolic reconstruction soybean Bradyrhizobium diazoefficiens reveals cost–benefit nitrogen fixation. New Phytologist 240(2): 744-756.","code":""},{"path":"/reference/add_time_to_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a time component to input — add_time_to_weather_data","title":"Add a time component to input — add_time_to_weather_data","text":"Ensure, possible, input data varies time \"time\"   component. See documentation time information   quantity. rare users call function directly called   internally run_biocro.","code":""},{"path":"/reference/add_time_to_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a time component to input — add_time_to_weather_data","text":"","code":"add_time_to_weather_data(drivers)"},{"path":"/reference/add_time_to_weather_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a time component to input — add_time_to_weather_data","text":"drivers list dataframe representing known system parameters vary     time, weather data.","code":""},{"path":"/reference/add_time_to_weather_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a time component to input — add_time_to_weather_data","text":"drivers doy hour columns, assumed   represent weather data, modified follows: new time column computed doy           hour. original doy hour columns removed. case, expected BioCro:format_time direct module   used re-compute doy hour time. drivers doy hour columns,   drivers returned -.","code":""},{"path":"/reference/add_time_to_weather_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add a time component to input — add_time_to_weather_data","text":"Preconditions:  drivers list, values vectors equal           length. drivers already contains time component,           contain either doy hour component           unless contains values mutually           consistent. 'BioCro:format_time' module necessary? values doy hour supplied run_biocro   drivers, undesired results may happen interpolation. example,   two sequential rows (time = 3599, doy = 150, hour = 23)   (time = 3600, doy = 151, hour = 0), results returned   half-hour time intervals, linear interpolation rows   produce (time = 3599.5, doy = 150.5, hour = 11.5). Typically   expected doy takes integer values, may cause   issues. Using BioCro:format_time module calculate doy   hour time ensure result includes   (time = 3599.5, doy = 150, hour = 23.5) instead.","code":""},{"path":"/reference/add_time_to_weather_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a time component to input — add_time_to_weather_data","text":"","code":"# Add a time column to the buit-in 2002 weather data   new_weather <- add_time_to_weather_data(weather[['2002']])    # Compare column names   colnames(weather[['2002']]) #> [1] \"year\"             \"doy\"              \"hour\"             \"time_zone_offset\" #> [5] \"precip\"           \"rh\"               \"solar\"            \"temp\"             #> [9] \"windspeed\"          colnames(new_weather) #> [1] \"year\"             \"time_zone_offset\" \"precip\"           \"rh\"               #> [5] \"solar\"            \"temp\"             \"windspeed\"        \"time\""},{"path":"/reference/annualDB.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus dry biomass data. — annualDB","title":"Miscanthus dry biomass data. — annualDB","text":"first column thermal time. second, third, fourth, fifth     columns miscanthus stem, leaf, root, rhizome dry biomass Mg     ha-1 (root missing). sixth column leaf area index.     annualDB.c version altered root biomass     missing LAI smaller. purpose last modification     testing functions.","code":""},{"path":"/reference/annualDB.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus dry biomass data. — annualDB","text":"Data frame dimensions 5 6.","code":""},{"path":"/reference/annualDB.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus dry biomass data. — annualDB","text":"Clive Beale Stephen Long. 1997. Seasonal dynamics nutrient     accumulation partitioning perennial C4 grasses Miscanthus x     giganteus Spartina cynosuroides. Biomass Bioenergy 12 (6): 419–428.","code":""},{"path":"/reference/catm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Global annual mean atmopspheric CO2 levels — catm_data","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"Multiple years globally averaged annual mean atmospheric CO2 levels   uncertainties. data included BioCro package users can reproduce   calculations Lochocki et al. (2022)   [doi:10.1093/insilicoplants/diac003 ] exploratory purposes;   likely BioCro studies require different data sets,   attempt made exhaustive.","code":""},{"path":"/reference/catm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"","code":"catm_data"},{"path":"/reference/catm_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"Data frame 3 columns 44 rows: year: year Catm: CO2 concentration (micromol / mol) unc: uncertainty associated CO2 concentration           (micromol / mol)","code":""},{"path":"/reference/catm_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Global annual mean atmopspheric CO2 levels — catm_data","text":"Data obtained National Oceanic Atmospheric Administration's   Global Monitoring Laboratory (https://gml.noaa.gov/ccgg/trends/data.html)   2024-02-07. exact link used   https://gml.noaa.gov/webdata/ccgg/trends/co2/co2_annmean_gl.txt. Alternatively, data can accessed   https://gml.noaa.gov/ccgg/trends/gl_data.html clicking link   Globally averaged marine surface annual mean data (CSV). Note: globally averaged value 2023 yet available,   2023 Mauna Loa value used instead temporary fix. value likely   slightly higher global value (around 1 ppm). data provided convenience BioCro users; please visit   NOAA GML webpage guidelines regarding use data   intending include publication.","code":""},{"path":"/reference/cmi_soybean_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"Champaign, IL weather data specified hourly intervals CST time zone   years 2002, 2004, 2005, 2006. data includes typical inputs   required BioCro simulations, addition day_length,   specifically required soybean simulations. Although quantity can   calculated modules course simulation, included   weather data speed simulations. time range restricted   SoyFACE growing season used year. weather data included BioCro package users can reproduce   calculations Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ] exploratory purposes;   likely BioCro studies require different data sets,   attempt made exhaustive.","code":""},{"path":"/reference/cmi_soybean_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"","code":"soybean_weather"},{"path":"/reference/cmi_soybean_weather_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"list 4 named elements, element data frame corresponding   one year weather data name element year,   example '2004'. data frame 2952 - 3384 observations   (representing hourly time points) 14 variables: year: year doy: day year hour: hour time_zone_offset: time zone offset relative UTC (hr) precip: preciptation rate (mm / hr) rh: ambient relative humidity (dimensionless) dw_solar: downwelling global solar radiation (J / m^2 / s) up_solar: upwelling global solar radiation (J / m^2 / s) netsolar: net global solar radiation (downwelling - upwelling)           (J / m^2 /s) solar: incoming photosynthetically active photon flux           density (PPFD) measured ground area basis including direct           diffuse sunlight light just outside crop canopy           (micromol / m^2 / s) temp: ambient air temperature (degrees Celsius) windspeed: wind speed ambient air just outside           canopy (m / s) zen: solar zenith angle (degrees) day_length: length daily photoperiod (hours)","code":""},{"path":"/reference/cmi_soybean_weather_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Champaign, IL weather data for Soybean-BioCro — cmi_soybean_weather_data","text":"Weather data obtained public SURFRAD WARM databases   processed according method described Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ]. See paper full description   data processing. brief, columns data frames determined SURFRAD WARM   variables follows: precip: precip variable WARM data set rh: rh variable SURFRAD data set dw_solar: dw_solar variable SURFRAD data           set up_solar: uw_solar variable SURFRAD data           set netsolar: netsolar variable SURFRAD data           set solar: par variable SURFRAD data set;           values available, netsolar           up_solar variables used make estimate;           values also available, dw_solar variable used           make estimate temp: temp variable SURFRAD data set windspeed: windspd variable SURFRAD data           set zen: zen variable SURFRAD data set day_length: calculated solar using           oscillator-based circadian clock WARM data set includes daily values. Hourly values precipitation   derived daily totals assuming constant rate precipitation   throughout day. SURFRAD data set includes values 1 3 minute intervals. Hourly values   determined averaging hourly intervals, value hour   h average hour. values missing; missing   entries filled interpolating neighboring hours. create data frame, hourly values columns except   day_length extracted WARM SURFRAD data. , BioCro   used run circadian clock model determines photoperiod length.   (See page additional information clock model:   soybean_clock.) result calculation   appended weather data frame new column. time_zone_offset set constant value -6 since data   specified CST time zone (.e., UTC-6). Since value   quantity change, principle considered parameter   rather driver; however, included weather data   convenience. reduce size BioCro repository, raw data values rounded.   done using commands script included BioCro   package. script can located typing   system.file('BioCro', 'extdata', 'get_soybean_weather_data.R').","code":""},{"path":"/reference/cmi_weather_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Champaign, IL weather data — cmi_weather_data","title":"Champaign, IL weather data — cmi_weather_data","text":"Champaign, IL weather data specified hourly intervals CST time zone   years 1995–2023. data includes typical inputs required BioCro   imulations. Note: values missing near start 1995 since   time points available SURFRAD. weather data included BioCro package users can reproduce   calculations Lochocki et al. (2022)   [doi:10.1093/insilicoplants/diac003 ] exploratory purposes;   likely BioCro studies require different data sets,   attempt made exhaustive.","code":""},{"path":"/reference/cmi_weather_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Champaign, IL weather data — cmi_weather_data","text":"","code":"weather"},{"path":"/reference/cmi_weather_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Champaign, IL weather data — cmi_weather_data","text":"list 29 named elements, element data frame corresponding   one year weather data name element year,   example '2004'. data frame 8760 8784 observations   (representing hourly time points) 9 variables: year: year doy: day year hour: hour time_zone_offset: time zone offset relative UTC (hr) precip: preciptation rate (mm / hr) rh: ambient relative humidity (dimensionless) solar: incoming photosynthetically active photon flux           density (PPFD) measured ground area basis including direct           diffuse sunlight light just outside crop canopy           (micromol / m^2 / s) temp: ambient air temperature (degrees Celsius) windspeed: wind speed ambient air just outside           canopy (m / s)","code":""},{"path":"/reference/cmi_weather_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Champaign, IL weather data — cmi_weather_data","text":"Weather data obtained public SURFRAD WARM databases   processed according method described Lochocki et al. (2022)   [doi:10.1093/insilicoplants/diac003 ]. See version 1.2.0   eloch216/oscillator-based-circadian-clock-analysis   GitHub repository   full description data processing. brief, columns data frames determined SURFRAD WARM   variables follows: precip: precip variable WARM data set rh: rh variable SURFRAD data set solar: par variable SURFRAD data set;           values available, direct_n,           diffuse, zen variables used make estimate temp: temp variable SURFRAD data set windspeed: windspd variable SURFRAD data           set WARM data set includes daily values. Hourly values precipitation   derived daily totals assuming constant rate precipitation   throughout day. SURFRAD data set includes values 1 3 minute intervals. Hourly values   determined averaging hourly intervals, value hour   h average hour-long interval centered h.   values missing; missing entries filled via interpolation   procedure based assumption values hour sequential   days similar. time_zone_offset set constant value -6 since data   specified CST time zone (.e., UTC-6). Since value   quantity change, principle considered parameter   rather driver; however, included weather data   convenience. reduce size BioCro repository, raw data values rounded.   done using commands script included BioCro   package. script can located typing   system.file('BioCro', 'extdata', 'rounding_weather_values.R').","code":""},{"path":"/reference/compare_model_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare new and stored results for a BioCro model test case — compare_model_output","title":"Compare new and stored results for a BioCro model test case — compare_model_output","text":"BioCro models can tested using test cases, sets known outputs   correspond particular inputs. compare_model_output   function facilitates manual comparisons new stored results. Note model tests distinct module tests   described module_testing.","code":""},{"path":"/reference/compare_model_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare new and stored results for a BioCro model test case — compare_model_output","text":"","code":"compare_model_output(mtc, columns_to_keep = NULL)"},{"path":"/reference/compare_model_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare new and stored results for a BioCro model test case — compare_model_output","text":"mtc single module test case, created using     model_test_case. columns_to_keep vector column names included return value.     columns_to_keep NULL, columns     new stored result included.","code":""},{"path":"/reference/compare_model_output.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare new and stored results for a BioCro model test case — compare_model_output","text":"compare_model_output function key part BioCro   model testing system. See model_testing information. function run model get new result, load stored   result associated test case. two data frames combined   using rbind, new column named version indicates   whether row new stored result. intended quantities resulting data frame plotted   visually look changes model output.","code":""},{"path":"/reference/compare_model_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare new and stored results for a BioCro model test case — compare_model_output","text":"data frame described .","code":""},{"path":[]},{"path":"/reference/compare_model_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare new and stored results for a BioCro model test case — compare_model_output","text":"","code":"# Define a test case for the miscanthus model and save the model output to a # temporary directory miscanthus_test_case <- model_test_case(     'miscanthus_x_giganteus',     miscanthus_x_giganteus,     get_growing_season_climate(weather$'2005'),     TRUE,     tempdir() )  update_stored_model_results(miscanthus_test_case)  # Now we can use `compare_model_output` to compare the saved result to a new one comparison_df <- compare_model_output(miscanthus_test_case)  # This will be a boring example because the new and stored results will be # exactly the same lattice::xyplot(   Leaf + Stem + Root ~ time,   group = version,   data = comparison_df,   type = 'l',   auto = TRUE,   grid = TRUE )"},{"path":"/reference/crop_model_definitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop model definitions — crop_model_definitions","title":"Crop model definitions — crop_model_definitions","text":"BioCro, crop model defined sets direct modules, differential   modules, initial values, parameters, along ordinary differential   equation (ODE) solver. run model, values, along set   weather data, passed run_biocro function.   convenience, several crop model definitions included BioCro R   package. full list can obtained typing ??crop_models R   terminal.","code":""},{"path":"/reference/crop_model_definitions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crop model definitions — crop_model_definitions","text":"crop model definition stored list following named   elements: direct_modules: list direct module names; can passed     run_biocro direct_module_names argument. differential_modules: list differential module names; can     passed run_biocro     differential_module_names argument. ode_solver: list specifying details numerical ODE     solver; can passed run_biocro ode_solver     argument. initial_values: list named quantity values; can passed     run_biocro initial_values argument. parameters: list named quantity values; can passed     run_biocro parameters argument, also can     passed evaluate_module     module_response_curve investigating behavior one     crop's modules. model definitions sufficient running simulation   run_biocro also requires drivers; crop growth models,   drivers sets weather data. soybean model   intended used along specialized soybean weather data   (see cmi_soybean_weather_data). crops used   weather data (see cmi_weather_data). quantities crop model definitions, values   photosynthetic parameters, remain location; others,   latitude longitude, need change simulating crop growth   different locations. Care must taken understand input quantity   attempting run simulations places cultivars. Typically, modules crop model definition defined lists   named elements; names facilitate --fly module swapping via   within function. example, change soybean canopy   photosynthesis module BioCro:ten_layer_rue_canopy module, one   pass within(soybean$direct_modules, {canopy_photosynthesis =   \"BioCro:ten_layer_rue_canopy\"}) direct_module_names argument   calling run_biocro instead   soybean$direct_modules. crop model definition stored list named elements,   possible use function save typing   calling run_biocro related functions   partial_run_biocro   validate_dynamical_system_inputs. example, compare   Example 1 Example 2 . Besides shortening code,   using also makes easy modify command simulate   growth different crop; two models can use drivers,   switch can accomplished one small change (Example 3).","code":""},{"path":[]},{"path":"/reference/crop_model_definitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crop model definitions — crop_model_definitions","text":"","code":"# Example 1: Simulating Miscanthus growth using its model definition list result1 <- run_biocro(   miscanthus_x_giganteus$initial_values,   miscanthus_x_giganteus$parameters,   get_growing_season_climate(weather$'2002'),   miscanthus_x_giganteus$direct_modules,   miscanthus_x_giganteus$differential_modules,   miscanthus_x_giganteus$ode_solver )  # Example 2: Performing the same simulation as in Example 1, but making use of # the `with` command to reduce repeated references to the model definition list result2 <- with(miscanthus_x_giganteus, {run_biocro(   initial_values,   parameters,   get_growing_season_climate(weather$'2002'),   direct_modules,   differential_modules,   ode_solver )})  # Example 3: Simulating willow growth using the same weather data as Examples 1 # and 2, which just requires one change relative to Example 2 result3 <- with(willow, {run_biocro(   initial_values,   parameters,   get_growing_season_climate(weather$'2002'),   direct_modules,   differential_modules,   ode_solver )})"},{"path":"/reference/default_ode_solvers.html","id":null,"dir":"Reference","previous_headings":"","what":"Default ODE solver settings — default_ode_solvers","title":"Default ODE solver settings — default_ode_solvers","text":"collection reasonable settings use ODE solver type. Users   may need wish modify particular applications.","code":""},{"path":"/reference/default_ode_solvers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default ODE solver settings — default_ode_solvers","text":"","code":"default_ode_solvers"},{"path":"/reference/default_ode_solvers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Default ODE solver settings — default_ode_solvers","text":"list 6 named elements, name one possible ODE solver   types. element list 5 named elements can passed   run_biocro ode_solver input argument.","code":""},{"path":"/reference/default_ode_solvers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default ODE solver settings — default_ode_solvers","text":"full list solver types can obtained   get_all_ode_solvers function.","code":""},{"path":"/reference/dynamical_system.html","id":null,"dir":"Reference","previous_headings":"","what":"Validating dynamical system inputs — dynamical_system","title":"Validating dynamical system inputs — dynamical_system","text":"Utility function checking inputs run_biocro without running ","code":""},{"path":"/reference/dynamical_system.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validating dynamical system inputs — dynamical_system","text":"","code":"validate_dynamical_system_inputs(       initial_values = list(),       parameters = list(),       drivers,       direct_module_names = list(),       differential_module_names = list(),       verbose = TRUE   )"},{"path":"/reference/dynamical_system.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validating dynamical system inputs — dynamical_system","text":"initial_values Identical corresponding argument run_biocro. parameters Identical corresponding argument run_biocro. drivers Identical corresponding argument run_biocro. direct_module_names Identical corresponding argument run_biocro. differential_module_names Identical corresponding argument run_biocro. verbose Identical corresponding argument run_biocro.","code":""},{"path":"/reference/dynamical_system.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validating dynamical system inputs — dynamical_system","text":"validate_dynamical_system_inputs accepts input arguments   run_biocro exception ode_solver (  required check validity dynamical system). validate_dynamical_system_inputs checks set parameters, drivers,   modules, initial values see can properly define dynamical   system can therefore used inputs run_biocro.   Although run_biocro function performs validity   checks, validate_dynamical_system_inputs includes additional   information, list parameters whose values used inputs   modules, since principle parameters removed   clarity. using one pre-defined crop growth models, may helpful   use command pass arguments   validate_dynamical_system_inputs; see documentation   crop_model_definitions information.","code":""},{"path":"/reference/dynamical_system.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validating dynamical system inputs — dynamical_system","text":"boolean indicating whether inputs valid.","code":""},{"path":[]},{"path":"/reference/dynamical_system.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validating dynamical system inputs — dynamical_system","text":"","code":"# Example 1: missing a parameter and an initial value validate_dynamical_system_inputs(   within(soybean$initial_values, rm(Leaf)),         # remove the initial `Leaf` value   within(soybean$parameters, rm(leaf_reflectance)), # remove `leaf_reflectance`   soybean_weather$'2002',   soybean$direct_modules,   soybean$differential_modules ) #> Warning: object 'leaf_reflectance' not found #>  #> Checking the validity of the system inputs: #>  #> [pass] No quantities were defined multiple times in the inputs #>  #> [fail] The following module inputs were not defined: #>  Leaf from the 'parameter_calculator' module #>  Leaf from the 'senescence_logistic' module #>  Leaf from the 'maintenance_respiration' module #>  Leaf from the 'partitioning_growth' module #>  #> [fail] The following differential module outputs were not part of the initial values: #>  Leaf from the 'senescence_logistic' module #>  Leaf from the 'maintenance_respiration' module #>  Leaf from the 'partitioning_growth' module #>  #> [pass] There are no cyclic dependencies among the direct modules. #>  #> System inputs are not valid #>  #> Printing additional information about the system inputs: #>  #> The direct modules need to be re-ordered before evaluation. #> (This will be done automatically during dynamical_system construction.) #> Here is a suitable ordering: #>  senescence_coefficient_logistic #>  stefan_boltzmann_longwave #>  partitioning_coefficient_logistic #>  leaf_water_stress_exponential #>  sla_linear #>  parameter_calculator #>  height_from_lai #>  canopy_gbw_thornley #>  soil_evaporation #>  stomata_water_stress_linear #>  format_time #>  soybean_development_rate_calculator #>  solar_position_michalsky #>  shortwave_atmospheric_scattering #>  incident_shortwave_from_ground_par #>  ten_layer_canopy_properties #>  ten_layer_c3_canopy #>  ten_layer_canopy_integrator #>  carbon_assimilation_to_biomass #>  no_leaf_resp_neg_assim_partitioning_growth_calculator #>  #> The following quantities were each required by at least one module: #>  Catm #>  DVI #>  Grain #>  GrossAssim_CO2 #>  Gs_min #>  Gstar_Ea #>  Gstar_c #>  Jmax_Ea #>  Jmax_c #>  Kc_Ea #>  Kc_c #>  Ko_Ea #>  Ko_c #>  Leaf #>  LeafN #>  LeafN_0 #>  LeafWS #>  O2 #>  Rd #>  Rd_Ea #>  Rd_c #>  Rhizome #>  Rmax_emrV0 #>  Root #>  Shell #>  Sp #>  Sp_thermal_time_decay #>  Stem #>  StomataWS #>  TTc #>  TTemr_threshold #>  Tbase_emr #>  Tmax_R0R1 #>  Tmax_R1R7 #>  Tmax_emrV0 #>  Tmin_R0R1 #>  Tmin_R1R7 #>  Tmin_emrV0 #>  Topt_R0R1 #>  Topt_R1R7 #>  Topt_emrV0 #>  Tp_Ha #>  Tp_Hd #>  Tp_S #>  Tp_c #>  Vcmax_Ea #>  Vcmax_c #>  absorbed_longwave #>  alpha1 #>  alphaLeaf #>  alphaRoot #>  alphaSeneLeaf #>  alphaSeneRhizome #>  alphaSeneRoot #>  alphaSeneStem #>  alphaShell #>  alphaStem #>  alphab1 #>  atmospheric_pressure #>  atmospheric_scattering #>  atmospheric_transmittance #>  b0 #>  b1 #>  betaLeaf #>  betaRoot #>  betaSeneLeaf #>  betaSeneRhizome #>  betaSeneRoot #>  betaSeneStem #>  betaShell #>  betaStem #>  beta_PSII #>  canopy_assimilation_rate #>  canopy_assimilation_rate_CO2 #>  canopy_height #>  canopy_photorespiration_rate_CO2 #>  canopy_transpiration_rate #>  chil #>  cosine_zenith_angle #>  cws1 #>  cws2 #>  day_length #>  development_rate_per_hour #>  dry_biomass_per_carbon #>  electrons_per_carboxylation #>  electrons_per_oxygenation #>  emissivity_sky #>  fractional_doy #>  gbw_canopy #>  grc_root #>  grc_stem #>  growth_respiration_fraction #>  height_layer_0 #>  height_layer_1 #>  height_layer_2 #>  height_layer_3 #>  height_layer_4 #>  height_layer_5 #>  height_layer_6 #>  height_layer_7 #>  height_layer_8 #>  height_layer_9 #>  heightf #>  hydrDist #>  iSp #>  irradiance_diffuse_fraction #>  irradiance_direct_fraction #>  jmax #>  kGrain #>  kLeaf #>  kRhizome #>  kRhizome_emr #>  kRoot #>  kSeneLeaf #>  kSeneRhizome #>  kSeneRoot #>  kSeneStem #>  kShell #>  kStem #>  k_diffuse #>  kpLN #>  lai #>  lat #>  leaf_reflectance_nir #>  leaf_reflectance_par #>  leaf_transmittance_nir #>  leaf_transmittance_par #>  leafwidth #>  lnfun #>  longitude #>  maturity_group #>  min_gbw_canopy #>  mrc_grain #>  mrc_leaf #>  mrc_root #>  mrc_stem #>  net_assimilation_rate_grain #>  net_assimilation_rate_leaf #>  net_assimilation_rate_rhizome #>  net_assimilation_rate_root #>  net_assimilation_rate_shell #>  net_assimilation_rate_stem #>  par_energy_content #>  par_energy_fraction #>  par_incident_diffuse #>  par_incident_direct #>  phi1 #>  phi2 #>  phi_PSII_0 #>  phi_PSII_1 #>  phi_PSII_2 #>  precip #>  rateSeneLeaf #>  rateSeneRhizome #>  rateSeneRoot #>  rateSeneStem #>  remobilization_fraction #>  retrans #>  retrans_rhizome #>  rfl #>  rh #>  rsdf #>  rsec #>  shaded_Assim_layer_0 #>  shaded_Assim_layer_1 #>  shaded_Assim_layer_2 #>  shaded_Assim_layer_3 #>  shaded_Assim_layer_4 #>  shaded_Assim_layer_5 #>  shaded_Assim_layer_6 #>  shaded_Assim_layer_7 #>  shaded_Assim_layer_8 #>  shaded_Assim_layer_9 #>  shaded_GrossAssim_layer_0 #>  shaded_GrossAssim_layer_1 #>  shaded_GrossAssim_layer_2 #>  shaded_GrossAssim_layer_3 #>  shaded_GrossAssim_layer_4 #>  shaded_GrossAssim_layer_5 #>  shaded_GrossAssim_layer_6 #>  shaded_GrossAssim_layer_7 #>  shaded_GrossAssim_layer_8 #>  shaded_GrossAssim_layer_9 #>  shaded_Gs_layer_0 #>  shaded_Gs_layer_1 #>  shaded_Gs_layer_2 #>  shaded_Gs_layer_3 #>  shaded_Gs_layer_4 #>  shaded_Gs_layer_5 #>  shaded_Gs_layer_6 #>  shaded_Gs_layer_7 #>  shaded_Gs_layer_8 #>  shaded_Gs_layer_9 #>  shaded_Rp_layer_0 #>  shaded_Rp_layer_1 #>  shaded_Rp_layer_2 #>  shaded_Rp_layer_3 #>  shaded_Rp_layer_4 #>  shaded_Rp_layer_5 #>  shaded_Rp_layer_6 #>  shaded_Rp_layer_7 #>  shaded_Rp_layer_8 #>  shaded_Rp_layer_9 #>  shaded_TransR_layer_0 #>  shaded_TransR_layer_1 #>  shaded_TransR_layer_2 #>  shaded_TransR_layer_3 #>  shaded_TransR_layer_4 #>  shaded_TransR_layer_5 #>  shaded_TransR_layer_6 #>  shaded_TransR_layer_7 #>  shaded_TransR_layer_8 #>  shaded_TransR_layer_9 #>  shaded_absorbed_ppfd_layer_0 #>  shaded_absorbed_ppfd_layer_1 #>  shaded_absorbed_ppfd_layer_2 #>  shaded_absorbed_ppfd_layer_3 #>  shaded_absorbed_ppfd_layer_4 #>  shaded_absorbed_ppfd_layer_5 #>  shaded_absorbed_ppfd_layer_6 #>  shaded_absorbed_ppfd_layer_7 #>  shaded_absorbed_ppfd_layer_8 #>  shaded_absorbed_ppfd_layer_9 #>  shaded_absorbed_shortwave_layer_0 #>  shaded_absorbed_shortwave_layer_1 #>  shaded_absorbed_shortwave_layer_2 #>  shaded_absorbed_shortwave_layer_3 #>  shaded_absorbed_shortwave_layer_4 #>  shaded_absorbed_shortwave_layer_5 #>  shaded_absorbed_shortwave_layer_6 #>  shaded_absorbed_shortwave_layer_7 #>  shaded_absorbed_shortwave_layer_8 #>  shaded_absorbed_shortwave_layer_9 #>  shaded_fraction_layer_0 #>  shaded_fraction_layer_1 #>  shaded_fraction_layer_2 #>  shaded_fraction_layer_3 #>  shaded_fraction_layer_4 #>  shaded_fraction_layer_5 #>  shaded_fraction_layer_6 #>  shaded_fraction_layer_7 #>  shaded_fraction_layer_8 #>  shaded_fraction_layer_9 #>  soil_air_entry #>  soil_b_coefficient #>  soil_clod_size #>  soil_depth1 #>  soil_depth2 #>  soil_depth3 #>  soil_field_capacity #>  soil_reflectance #>  soil_sand_content #>  soil_saturated_conductivity #>  soil_saturation_capacity #>  soil_transmission #>  soil_water_content #>  soil_wilting_point #>  solar #>  sowing_fractional_doy #>  specific_heat_of_air #>  sunlit_Assim_layer_0 #>  sunlit_Assim_layer_1 #>  sunlit_Assim_layer_2 #>  sunlit_Assim_layer_3 #>  sunlit_Assim_layer_4 #>  sunlit_Assim_layer_5 #>  sunlit_Assim_layer_6 #>  sunlit_Assim_layer_7 #>  sunlit_Assim_layer_8 #>  sunlit_Assim_layer_9 #>  sunlit_GrossAssim_layer_0 #>  sunlit_GrossAssim_layer_1 #>  sunlit_GrossAssim_layer_2 #>  sunlit_GrossAssim_layer_3 #>  sunlit_GrossAssim_layer_4 #>  sunlit_GrossAssim_layer_5 #>  sunlit_GrossAssim_layer_6 #>  sunlit_GrossAssim_layer_7 #>  sunlit_GrossAssim_layer_8 #>  sunlit_GrossAssim_layer_9 #>  sunlit_Gs_layer_0 #>  sunlit_Gs_layer_1 #>  sunlit_Gs_layer_2 #>  sunlit_Gs_layer_3 #>  sunlit_Gs_layer_4 #>  sunlit_Gs_layer_5 #>  sunlit_Gs_layer_6 #>  sunlit_Gs_layer_7 #>  sunlit_Gs_layer_8 #>  sunlit_Gs_layer_9 #>  sunlit_Rp_layer_0 #>  sunlit_Rp_layer_1 #>  sunlit_Rp_layer_2 #>  sunlit_Rp_layer_3 #>  sunlit_Rp_layer_4 #>  sunlit_Rp_layer_5 #>  sunlit_Rp_layer_6 #>  sunlit_Rp_layer_7 #>  sunlit_Rp_layer_8 #>  sunlit_Rp_layer_9 #>  sunlit_TransR_layer_0 #>  sunlit_TransR_layer_1 #>  sunlit_TransR_layer_2 #>  sunlit_TransR_layer_3 #>  sunlit_TransR_layer_4 #>  sunlit_TransR_layer_5 #>  sunlit_TransR_layer_6 #>  sunlit_TransR_layer_7 #>  sunlit_TransR_layer_8 #>  sunlit_TransR_layer_9 #>  sunlit_absorbed_ppfd_layer_0 #>  sunlit_absorbed_ppfd_layer_1 #>  sunlit_absorbed_ppfd_layer_2 #>  sunlit_absorbed_ppfd_layer_3 #>  sunlit_absorbed_ppfd_layer_4 #>  sunlit_absorbed_ppfd_layer_5 #>  sunlit_absorbed_ppfd_layer_6 #>  sunlit_absorbed_ppfd_layer_7 #>  sunlit_absorbed_ppfd_layer_8 #>  sunlit_absorbed_ppfd_layer_9 #>  sunlit_absorbed_shortwave_layer_0 #>  sunlit_absorbed_shortwave_layer_1 #>  sunlit_absorbed_shortwave_layer_2 #>  sunlit_absorbed_shortwave_layer_3 #>  sunlit_absorbed_shortwave_layer_4 #>  sunlit_absorbed_shortwave_layer_5 #>  sunlit_absorbed_shortwave_layer_6 #>  sunlit_absorbed_shortwave_layer_7 #>  sunlit_absorbed_shortwave_layer_8 #>  sunlit_absorbed_shortwave_layer_9 #>  sunlit_fraction_layer_0 #>  sunlit_fraction_layer_1 #>  sunlit_fraction_layer_2 #>  sunlit_fraction_layer_3 #>  sunlit_fraction_layer_4 #>  sunlit_fraction_layer_5 #>  sunlit_fraction_layer_6 #>  sunlit_fraction_layer_7 #>  sunlit_fraction_layer_8 #>  sunlit_fraction_layer_9 #>  tbase #>  temp #>  theta_0 #>  theta_1 #>  theta_2 #>  time #>  time_zone_offset #>  tpu_rate_max #>  vmax1 #>  vmax_n_intercept #>  windspeed #>  windspeed_height #>  windspeed_layer_0 #>  windspeed_layer_1 #>  windspeed_layer_2 #>  windspeed_layer_3 #>  windspeed_layer_4 #>  windspeed_layer_5 #>  windspeed_layer_6 #>  windspeed_layer_7 #>  windspeed_layer_8 #>  windspeed_layer_9 #>  wsFun #>  year #>  #> The following parameters were not used as inputs to any module: #>  jmax_mature #>  km_leaf_litter #>  sf_jmax #>  soil_bulk_density #>  soil_clay_content #>  soil_silt_content #> You may want to consider removing them for clarity #>  #> The following drivers were not used as inputs to any module: #>  dw_solar #>  netsolar #>  up_solar #>  zen #> You may want to consider removing them for clarity #>  #> All quantities in the initial values have associated derivatives #>  #> Derivatives for the following quantities are each determined by more than one module: #>  Grain #>  Grain #>  Leaf #>  Leaf #>  Rhizome #>  Rhizome #>  Root #>  Root #>  Shell #>  Shell #>  Stem #>  Stem #>  #> No direct modules require a fixed step size Euler ode_solver #>  #> No differential modules require a fixed step size Euler ode_solver #>  #> All modules in the direct module list are direct modules #>  #> All modules in the differential module list are differential modules #>  #> [1] FALSE  # Example 2: a valid set of input arguments validate_dynamical_system_inputs(   soybean$initial_values,   soybean$parameters,   soybean_weather$'2002',   soybean$direct_modules,   soybean$differential_modules ) #>  #> Checking the validity of the system inputs: #>  #> [pass] No quantities were defined multiple times in the inputs #>  #> [pass] All module inputs were properly defined #>  #> [pass] All differential module outputs were included in the initial values #>  #> [pass] There are no cyclic dependencies among the direct modules. #>  #> System inputs are valid #>  #> Printing additional information about the system inputs: #>  #> The direct modules need to be re-ordered before evaluation. #> (This will be done automatically during dynamical_system construction.) #> Here is a suitable ordering: #>  senescence_coefficient_logistic #>  stefan_boltzmann_longwave #>  partitioning_coefficient_logistic #>  leaf_water_stress_exponential #>  sla_linear #>  parameter_calculator #>  height_from_lai #>  canopy_gbw_thornley #>  soil_evaporation #>  stomata_water_stress_linear #>  format_time #>  soybean_development_rate_calculator #>  solar_position_michalsky #>  shortwave_atmospheric_scattering #>  incident_shortwave_from_ground_par #>  ten_layer_canopy_properties #>  ten_layer_c3_canopy #>  ten_layer_canopy_integrator #>  carbon_assimilation_to_biomass #>  no_leaf_resp_neg_assim_partitioning_growth_calculator #>  #> The following quantities were each required by at least one module: #>  Catm #>  DVI #>  Grain #>  GrossAssim_CO2 #>  Gs_min #>  Gstar_Ea #>  Gstar_c #>  Jmax_Ea #>  Jmax_c #>  Kc_Ea #>  Kc_c #>  Ko_Ea #>  Ko_c #>  Leaf #>  LeafN #>  LeafN_0 #>  LeafWS #>  O2 #>  Rd #>  Rd_Ea #>  Rd_c #>  Rhizome #>  Rmax_emrV0 #>  Root #>  Shell #>  Sp #>  Sp_thermal_time_decay #>  Stem #>  StomataWS #>  TTc #>  TTemr_threshold #>  Tbase_emr #>  Tmax_R0R1 #>  Tmax_R1R7 #>  Tmax_emrV0 #>  Tmin_R0R1 #>  Tmin_R1R7 #>  Tmin_emrV0 #>  Topt_R0R1 #>  Topt_R1R7 #>  Topt_emrV0 #>  Tp_Ha #>  Tp_Hd #>  Tp_S #>  Tp_c #>  Vcmax_Ea #>  Vcmax_c #>  absorbed_longwave #>  alpha1 #>  alphaLeaf #>  alphaRoot #>  alphaSeneLeaf #>  alphaSeneRhizome #>  alphaSeneRoot #>  alphaSeneStem #>  alphaShell #>  alphaStem #>  alphab1 #>  atmospheric_pressure #>  atmospheric_scattering #>  atmospheric_transmittance #>  b0 #>  b1 #>  betaLeaf #>  betaRoot #>  betaSeneLeaf #>  betaSeneRhizome #>  betaSeneRoot #>  betaSeneStem #>  betaShell #>  betaStem #>  beta_PSII #>  canopy_assimilation_rate #>  canopy_assimilation_rate_CO2 #>  canopy_height #>  canopy_photorespiration_rate_CO2 #>  canopy_transpiration_rate #>  chil #>  cosine_zenith_angle #>  cws1 #>  cws2 #>  day_length #>  development_rate_per_hour #>  dry_biomass_per_carbon #>  electrons_per_carboxylation #>  electrons_per_oxygenation #>  emissivity_sky #>  fractional_doy #>  gbw_canopy #>  grc_root #>  grc_stem #>  growth_respiration_fraction #>  height_layer_0 #>  height_layer_1 #>  height_layer_2 #>  height_layer_3 #>  height_layer_4 #>  height_layer_5 #>  height_layer_6 #>  height_layer_7 #>  height_layer_8 #>  height_layer_9 #>  heightf #>  hydrDist #>  iSp #>  irradiance_diffuse_fraction #>  irradiance_direct_fraction #>  jmax #>  kGrain #>  kLeaf #>  kRhizome #>  kRhizome_emr #>  kRoot #>  kSeneLeaf #>  kSeneRhizome #>  kSeneRoot #>  kSeneStem #>  kShell #>  kStem #>  k_diffuse #>  kpLN #>  lai #>  lat #>  leaf_reflectance_nir #>  leaf_reflectance_par #>  leaf_transmittance_nir #>  leaf_transmittance_par #>  leafwidth #>  lnfun #>  longitude #>  maturity_group #>  min_gbw_canopy #>  mrc_grain #>  mrc_leaf #>  mrc_root #>  mrc_stem #>  net_assimilation_rate_grain #>  net_assimilation_rate_leaf #>  net_assimilation_rate_rhizome #>  net_assimilation_rate_root #>  net_assimilation_rate_shell #>  net_assimilation_rate_stem #>  par_energy_content #>  par_energy_fraction #>  par_incident_diffuse #>  par_incident_direct #>  phi1 #>  phi2 #>  phi_PSII_0 #>  phi_PSII_1 #>  phi_PSII_2 #>  precip #>  rateSeneLeaf #>  rateSeneRhizome #>  rateSeneRoot #>  rateSeneStem #>  remobilization_fraction #>  retrans #>  retrans_rhizome #>  rfl #>  rh #>  rsdf #>  rsec #>  shaded_Assim_layer_0 #>  shaded_Assim_layer_1 #>  shaded_Assim_layer_2 #>  shaded_Assim_layer_3 #>  shaded_Assim_layer_4 #>  shaded_Assim_layer_5 #>  shaded_Assim_layer_6 #>  shaded_Assim_layer_7 #>  shaded_Assim_layer_8 #>  shaded_Assim_layer_9 #>  shaded_GrossAssim_layer_0 #>  shaded_GrossAssim_layer_1 #>  shaded_GrossAssim_layer_2 #>  shaded_GrossAssim_layer_3 #>  shaded_GrossAssim_layer_4 #>  shaded_GrossAssim_layer_5 #>  shaded_GrossAssim_layer_6 #>  shaded_GrossAssim_layer_7 #>  shaded_GrossAssim_layer_8 #>  shaded_GrossAssim_layer_9 #>  shaded_Gs_layer_0 #>  shaded_Gs_layer_1 #>  shaded_Gs_layer_2 #>  shaded_Gs_layer_3 #>  shaded_Gs_layer_4 #>  shaded_Gs_layer_5 #>  shaded_Gs_layer_6 #>  shaded_Gs_layer_7 #>  shaded_Gs_layer_8 #>  shaded_Gs_layer_9 #>  shaded_Rp_layer_0 #>  shaded_Rp_layer_1 #>  shaded_Rp_layer_2 #>  shaded_Rp_layer_3 #>  shaded_Rp_layer_4 #>  shaded_Rp_layer_5 #>  shaded_Rp_layer_6 #>  shaded_Rp_layer_7 #>  shaded_Rp_layer_8 #>  shaded_Rp_layer_9 #>  shaded_TransR_layer_0 #>  shaded_TransR_layer_1 #>  shaded_TransR_layer_2 #>  shaded_TransR_layer_3 #>  shaded_TransR_layer_4 #>  shaded_TransR_layer_5 #>  shaded_TransR_layer_6 #>  shaded_TransR_layer_7 #>  shaded_TransR_layer_8 #>  shaded_TransR_layer_9 #>  shaded_absorbed_ppfd_layer_0 #>  shaded_absorbed_ppfd_layer_1 #>  shaded_absorbed_ppfd_layer_2 #>  shaded_absorbed_ppfd_layer_3 #>  shaded_absorbed_ppfd_layer_4 #>  shaded_absorbed_ppfd_layer_5 #>  shaded_absorbed_ppfd_layer_6 #>  shaded_absorbed_ppfd_layer_7 #>  shaded_absorbed_ppfd_layer_8 #>  shaded_absorbed_ppfd_layer_9 #>  shaded_absorbed_shortwave_layer_0 #>  shaded_absorbed_shortwave_layer_1 #>  shaded_absorbed_shortwave_layer_2 #>  shaded_absorbed_shortwave_layer_3 #>  shaded_absorbed_shortwave_layer_4 #>  shaded_absorbed_shortwave_layer_5 #>  shaded_absorbed_shortwave_layer_6 #>  shaded_absorbed_shortwave_layer_7 #>  shaded_absorbed_shortwave_layer_8 #>  shaded_absorbed_shortwave_layer_9 #>  shaded_fraction_layer_0 #>  shaded_fraction_layer_1 #>  shaded_fraction_layer_2 #>  shaded_fraction_layer_3 #>  shaded_fraction_layer_4 #>  shaded_fraction_layer_5 #>  shaded_fraction_layer_6 #>  shaded_fraction_layer_7 #>  shaded_fraction_layer_8 #>  shaded_fraction_layer_9 #>  soil_air_entry #>  soil_b_coefficient #>  soil_clod_size #>  soil_depth1 #>  soil_depth2 #>  soil_depth3 #>  soil_field_capacity #>  soil_reflectance #>  soil_sand_content #>  soil_saturated_conductivity #>  soil_saturation_capacity #>  soil_transmission #>  soil_water_content #>  soil_wilting_point #>  solar #>  sowing_fractional_doy #>  specific_heat_of_air #>  sunlit_Assim_layer_0 #>  sunlit_Assim_layer_1 #>  sunlit_Assim_layer_2 #>  sunlit_Assim_layer_3 #>  sunlit_Assim_layer_4 #>  sunlit_Assim_layer_5 #>  sunlit_Assim_layer_6 #>  sunlit_Assim_layer_7 #>  sunlit_Assim_layer_8 #>  sunlit_Assim_layer_9 #>  sunlit_GrossAssim_layer_0 #>  sunlit_GrossAssim_layer_1 #>  sunlit_GrossAssim_layer_2 #>  sunlit_GrossAssim_layer_3 #>  sunlit_GrossAssim_layer_4 #>  sunlit_GrossAssim_layer_5 #>  sunlit_GrossAssim_layer_6 #>  sunlit_GrossAssim_layer_7 #>  sunlit_GrossAssim_layer_8 #>  sunlit_GrossAssim_layer_9 #>  sunlit_Gs_layer_0 #>  sunlit_Gs_layer_1 #>  sunlit_Gs_layer_2 #>  sunlit_Gs_layer_3 #>  sunlit_Gs_layer_4 #>  sunlit_Gs_layer_5 #>  sunlit_Gs_layer_6 #>  sunlit_Gs_layer_7 #>  sunlit_Gs_layer_8 #>  sunlit_Gs_layer_9 #>  sunlit_Rp_layer_0 #>  sunlit_Rp_layer_1 #>  sunlit_Rp_layer_2 #>  sunlit_Rp_layer_3 #>  sunlit_Rp_layer_4 #>  sunlit_Rp_layer_5 #>  sunlit_Rp_layer_6 #>  sunlit_Rp_layer_7 #>  sunlit_Rp_layer_8 #>  sunlit_Rp_layer_9 #>  sunlit_TransR_layer_0 #>  sunlit_TransR_layer_1 #>  sunlit_TransR_layer_2 #>  sunlit_TransR_layer_3 #>  sunlit_TransR_layer_4 #>  sunlit_TransR_layer_5 #>  sunlit_TransR_layer_6 #>  sunlit_TransR_layer_7 #>  sunlit_TransR_layer_8 #>  sunlit_TransR_layer_9 #>  sunlit_absorbed_ppfd_layer_0 #>  sunlit_absorbed_ppfd_layer_1 #>  sunlit_absorbed_ppfd_layer_2 #>  sunlit_absorbed_ppfd_layer_3 #>  sunlit_absorbed_ppfd_layer_4 #>  sunlit_absorbed_ppfd_layer_5 #>  sunlit_absorbed_ppfd_layer_6 #>  sunlit_absorbed_ppfd_layer_7 #>  sunlit_absorbed_ppfd_layer_8 #>  sunlit_absorbed_ppfd_layer_9 #>  sunlit_absorbed_shortwave_layer_0 #>  sunlit_absorbed_shortwave_layer_1 #>  sunlit_absorbed_shortwave_layer_2 #>  sunlit_absorbed_shortwave_layer_3 #>  sunlit_absorbed_shortwave_layer_4 #>  sunlit_absorbed_shortwave_layer_5 #>  sunlit_absorbed_shortwave_layer_6 #>  sunlit_absorbed_shortwave_layer_7 #>  sunlit_absorbed_shortwave_layer_8 #>  sunlit_absorbed_shortwave_layer_9 #>  sunlit_fraction_layer_0 #>  sunlit_fraction_layer_1 #>  sunlit_fraction_layer_2 #>  sunlit_fraction_layer_3 #>  sunlit_fraction_layer_4 #>  sunlit_fraction_layer_5 #>  sunlit_fraction_layer_6 #>  sunlit_fraction_layer_7 #>  sunlit_fraction_layer_8 #>  sunlit_fraction_layer_9 #>  tbase #>  temp #>  theta_0 #>  theta_1 #>  theta_2 #>  time #>  time_zone_offset #>  tpu_rate_max #>  vmax1 #>  vmax_n_intercept #>  windspeed #>  windspeed_height #>  windspeed_layer_0 #>  windspeed_layer_1 #>  windspeed_layer_2 #>  windspeed_layer_3 #>  windspeed_layer_4 #>  windspeed_layer_5 #>  windspeed_layer_6 #>  windspeed_layer_7 #>  windspeed_layer_8 #>  windspeed_layer_9 #>  wsFun #>  year #>  #> The following parameters were not used as inputs to any module: #>  jmax_mature #>  km_leaf_litter #>  sf_jmax #>  soil_bulk_density #>  soil_clay_content #>  soil_silt_content #> You may want to consider removing them for clarity #>  #> The following drivers were not used as inputs to any module: #>  dw_solar #>  netsolar #>  up_solar #>  zen #> You may want to consider removing them for clarity #>  #> All quantities in the initial values have associated derivatives #>  #> Derivatives for the following quantities are each determined by more than one module: #>  Grain #>  Grain #>  Leaf #>  Leaf #>  Rhizome #>  Rhizome #>  Root #>  Root #>  Shell #>  Shell #>  Stem #>  Stem #>  #> No direct modules require a fixed step size Euler ode_solver #>  #> No differential modules require a fixed step size Euler ode_solver #>  #> All modules in the direct module list are direct modules #>  #> All modules in the differential module list are differential modules #>  #> [1] TRUE"},{"path":"/reference/get_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Get lists of modules, quantities, and solvers — get_all","title":"Get lists of modules, quantities, and solvers — get_all","text":"get_all_modules returns fully-qualified names (form   library_name:local_module_name) modules available BioCro   module library package. get_all_quantities returns information quantities used   inputs outputs modules available BioCro module library package. get_all_ode_solvers returns names ordinary differential   equation (ODE) solvers available BioCro framework.","code":""},{"path":"/reference/get_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get lists of modules, quantities, and solvers — get_all","text":"","code":"get_all_modules(library_name)    get_all_quantities(library_name)    get_all_ode_solvers()"},{"path":"/reference/get_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get lists of modules, quantities, and solvers — get_all","text":"library_name name BioCro module library","code":""},{"path":"/reference/get_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get lists of modules, quantities, and solvers — get_all","text":"\"get_all\" functions return modules, quantities, ODE solvers   available within BioCro framework BioCro module library package. Developer details: get_all_modules   get_all_quantities expect module library package include   unexported functions called get_all_modules_internal   get_all_quantities_internal, respectively. functions   input arguments, return values follow   requirements described get_all_modules   get_all_quantities. module library package created forking   skeleton library automatically include functions without   modifications package's R code.","code":""},{"path":"/reference/get_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get lists of modules, quantities, and solvers — get_all","text":"get_all_modules character vector fully-qualified module names get_all_quantities data frame three columns:     quantity_type (input output), quantity_name,     module_name. quantity appear multiple times use     input output, used multiple modules. get_all_ode_solvers character vector ODE solver names","code":""},{"path":[]},{"path":"/reference/get_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get lists of modules, quantities, and solvers — get_all","text":"","code":"# Example 1: Getting a sorted list of distinct quantities defined by modules in # the `BioCro` module library. Doing this can be useful when writing a new # module that is intended to work along with pre-existing modules. all_quantities <- get_all_quantities('BioCro') all_quantity_names <- all_quantities$quantity_name distinct_quantities <- sort(unique(all_quantity_names))  # Example 2: Getting a list of all modules in the `BioCro` module library that # have \"ci\" as an input or output, using `tolower()` to account for any possible # variations in capitalization. all_quantities <- get_all_quantities('BioCro') ci_modules <- subset(all_quantities, tolower(quantity_name) == \"ci\")"},{"path":"/reference/get_growing_season_climate.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate weather data to one growing season — get_growing_season_climate","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"Attempt restrict year weather data growing season; intended   general-use function (see detailed discussion   shortcomings).","code":""},{"path":"/reference/get_growing_season_climate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"","code":"get_growing_season_climate(climate, threshold_temperature = 0)"},{"path":"/reference/get_growing_season_climate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"climate data frame representing one year weather data, typically intended     passed run_biocro drivers argument. data     frame must columns day year (doy) air     temperature degrees C (temp). threshold_temperature value air temperature degrees C use locating beginning     end growing season.","code":""},{"path":"/reference/get_growing_season_climate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"DISCLAIMER: function included primarily reproduce   output older BioCro calculations, used hard-coded   every simulation. several severe limitations discussed ,   intended general-use function subsetting weather data. determine growing season, function locates beginning end   based air temperature data. start growing season set   last day first half year air temperature   (equal ) threshold temperature, day 90, whichever later.   end growing season set first day second half   year air temperature (equal ) threshold   temperature, day 330, whichever earlier. sophisticated function attempt made ensure   output reasonable. example, air temperature never exceeds   threshold value, growing season beginning day 183 (last day   first half year) ending day 184 (first day second   half year) returned. air temperature always exceeds   threshold value, growing season go day 90 day 330. function also assumes air temperature generally increases early   year generally decreases later year, applicable   locations case. therefore unlikely work   properly Southern Hemisphere tropics. general, appropriate threshold temperature depend species   modeled. perennial grass, growth season might said   begin last freeze, requiring threshold temperature 0 degrees   C. course, oversimplification complicated biological   process, plant way knowing experienced last   freezing day year. hand, annual crops like maize soybean typically sown   conditions warmer might require higher threshold. ,   oversimplification complicated process. Farmers typically take   trends temperature, historical data, soil conditions, weather   predictions account deciding sow, may also   constrained external factors like availability machinery, seeds,   labor. also noted threshold temperature increases,   likelihood air temperature occurring night, even middle   summer, also increases. Consequently, threshold set high,   unrealistically short growing season may predicted. example, calling   get_growing_season_climate(weather$'2005', 15) returns two-day   growing season (days 183–184) temperatures late night   day 183 early morning day 184 dip 15 degrees C. Thus, logic encoded oversimplification several ways.   likely appropriate many situations, tailored approaches   required.","code":""},{"path":"/reference/get_growing_season_climate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"copy climate data frame truncated growing season.","code":""},{"path":"/reference/get_growing_season_climate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate weather data to one growing season — get_growing_season_climate","text":"","code":"# Truncate the 2002 Champaign, Illinois weather data to an estimated growing   # season   truncated_weather <- get_growing_season_climate(weather[['2002']])    # We can see which days were included   list(     doy_start = min(truncated_weather$doy),     doy_end = max(truncated_weather$doy)   ) #> $doy_start #> [1] 96 #>  #> $doy_end #> [1] 287 #>"},{"path":"/reference/miscanthus_x_giganteus.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus model definition — miscanthus_x_giganteus","title":"Miscanthus model definition — miscanthus_x_giganteus","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run   Miscanthus x giganteus growth simulations Champaign, Illinois   locations. represent Miscanthus growth Champaign, IL, values must   paired Champaign weather data (cmi_weather_data).   parameters already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"/reference/miscanthus_x_giganteus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscanthus model definition — miscanthus_x_giganteus","text":"","code":"miscanthus_x_giganteus"},{"path":"/reference/miscanthus_x_giganteus.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus model definition — miscanthus_x_giganteus","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"/reference/miscanthus_x_giganteus.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus model definition — miscanthus_x_giganteus","text":"model originally described Miguez et al. (2009)   [doi:10.1111/j.1757-1707.2009.01019.x ] Miguez et al. (2012)   [doi:10.1111/j.1757-1707.2011.01150.x ]. Since original parameterization,   behavior several core modules changed bugs   identified fixed, model likely needs reparameterized   can used realistic simulations.","code":""},{"path":[]},{"path":"/reference/model_test_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Define BioCro model test cases — model_test_case","title":"Define BioCro model test cases — model_test_case","text":"BioCro models can tested using test cases, sets known outputs   correspond particular inputs. model_test_case function   defines test case. Note model tests distinct module tests   described module_testing.","code":""},{"path":"/reference/model_test_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define BioCro model test cases — model_test_case","text":"","code":"model_test_case(     test_case_name,     model_definition,     drivers,     check_outputs,     directory = '.',     quantities_to_ignore = character(),     row_interval = 24,     digits = 5,     relative_tolerance = 1e-3   )"},{"path":"/reference/model_test_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define BioCro model test cases — model_test_case","text":"test_case_name string describing test case. model_definition list defining model, described documentation     crop_model_definitions. drivers set drivers passed run_biocro along     model_definition. check_outputs logical value indicating whether compare simulation output     stored result. directory relative absolute path directory containing stored simulation     result. used check_outputs TRUE. quantities_to_ignore character vector quantities compared     stored results. used check_outputs TRUE. row_interval Determines rows saved compared using     update_stored_model_results,     compare_model_output,     run_model_test_cases. used check_outputs     TRUE. digits Passed signif round values storing saved results.     used check_outputs TRUE. relative_tolerance relative tolerance used comparing new values stored     ones. value passed .equal     tolerance input argument. used check_outputs     TRUE.","code":""},{"path":"/reference/model_test_case.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define BioCro model test cases — model_test_case","text":"model_test_case function forms basis BioCro model   testing system. See model_testing information. default settings: Every 24 rows simulation output stored compared.           using drivers hourly time step, corresponds one           row day. Values stored simulation results rounded five           significant digits. reduces size stored result file. value relative tolerance chosen smallest           value enabled tests pass operating systems. default settings proven useful BioCro   miscanthus_x_giganteus, willow,   soybean models.","code":""},{"path":"/reference/model_test_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define BioCro model test cases — model_test_case","text":"list defines model test case, can passed   update_stored_model_results, compare_model_output,   run_model_test_cases.","code":""},{"path":[]},{"path":"/reference/model_test_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define BioCro model test cases — model_test_case","text":"","code":"# Define a test case for the miscanthus model miscanthus_test_case <- model_test_case(     'miscanthus_x_giganteus',     miscanthus_x_giganteus,     get_growing_season_climate(weather$'2005'),     TRUE,     tempdir(),     'soil_evaporation_rate' )  # The result is a specially formatted list str(miscanthus_test_case) #> List of 13 #>  $ test_case_name      : chr \"miscanthus_x_giganteus\" #>  $ initial_values      :List of 18 #>   ..$ cws1                    : num 0.32 #>   ..$ cws2                    : num 0.32 #>   ..$ Grain                   : num 0 #>   ..$ Shell                   : num 0 #>   ..$ Leaf                    : num 7e-04 #>   ..$ LeafLitter              : num 0 #>   ..$ leaf_senescence_index   : num 0 #>   ..$ Rhizome                 : num 7 #>   ..$ RhizomeLitter           : num 0 #>   ..$ rhizome_senescence_index: num 0 #>   ..$ Root                    : num 0.007 #>   ..$ RootLitter              : num 0 #>   ..$ root_senescence_index   : num 0 #>   ..$ soil_water_content      : num 0.32 #>   ..$ Stem                    : num 0.007 #>   ..$ StemLitter              : num 0 #>   ..$ stem_senescence_index   : num 0 #>   ..$ TTc                     : num 0 #>  $ parameters          :List of 124 #>   ..$ alpha1                     : num 0.04 #>   ..$ alphab1                    : num 0 #>   ..$ atmospheric_pressure       : num 101325 #>   ..$ atmospheric_scattering     : num 0.3 #>   ..$ atmospheric_transmittance  : num 0.6 #>   ..$ b0                         : num 0.08 #>   ..$ b1                         : num 3 #>   ..$ beta                       : num 0.93 #>   ..$ Catm                       : num 400 #>   ..$ chil                       : num 1 #>   ..$ dry_biomass_per_carbon     : num 30 #>   ..$ emissivity_sky             : num 1 #>   ..$ Gs_min                     : num 0.001 #>   ..$ heightf                    : num 1.33 #>   ..$ hydrDist                   : num 0 #>   ..$ iSp                        : num 1.7 #>   ..$ k_diffuse                  : num 0.1 #>   ..$ kGrain1                    : num 0 #>   ..$ kGrain2                    : num 0 #>   ..$ kGrain3                    : num 0 #>   ..$ kGrain4                    : num 0 #>   ..$ kGrain5                    : num 0 #>   ..$ kGrain6                    : num 0 #>   ..$ kLeaf1                     : num 0.33 #>   ..$ kLeaf2                     : num 0.14 #>   ..$ kLeaf3                     : num 0.01 #>   ..$ kLeaf4                     : num 0.01 #>   ..$ kLeaf5                     : num 0.01 #>   ..$ kLeaf6                     : num 0.01 #>   ..$ kparm                      : num 0.7 #>   ..$ kpLN                       : num 0.2 #>   ..$ kRhizome1                  : num -8e-04 #>   ..$ kRhizome2                  : num -5e-04 #>   ..$ kRhizome3                  : num 0.35 #>   ..$ kRhizome4                  : num 0.35 #>   ..$ kRhizome5                  : num 0.35 #>   ..$ kRhizome6                  : num 0.35 #>   ..$ kRoot1                     : num 0.3 #>   ..$ kRoot2                     : num 0.01 #>   ..$ kRoot3                     : num 0.01 #>   ..$ kRoot4                     : num 0.01 #>   ..$ kRoot5                     : num 0.01 #>   ..$ kRoot6                     : num 0.01 #>   ..$ kShell                     : num 0 #>   ..$ kStem1                     : num 0.37 #>   ..$ kStem2                     : num 0.85 #>   ..$ kStem3                     : num 0.63 #>   ..$ kStem4                     : num 0.63 #>   ..$ kStem5                     : num 0.63 #>   ..$ kStem6                     : num 0.63 #>   ..$ lat                        : num 40 #>   ..$ leaf_reflectance_nir       : num 0.38 #>   ..$ leaf_reflectance_par       : num 0.09 #>   ..$ leaf_transmittance_nir     : num 0.45 #>   ..$ leaf_transmittance_par     : num 0.04 #>   ..$ LeafN                      : num 2 #>   ..$ LeafN_0                    : num 2 #>   ..$ leafwidth                  : num 0.04 #>   ..$ lnfun                      : num 0 #>   ..$ longitude                  : num -88 #>   ..$ lowerT                     : num 3 #>   ..$ min_gbw_canopy             : num 0.005 #>   ..$ mrc1                       : num 0.02 #>   ..$ mrc2                       : num 0.03 #>   ..$ nalphab0                   : num 0.0237 #>   ..$ nalphab1                   : num 0.000488 #>   ..$ net_assimilation_rate_shell: num 0 #>   ..$ nileafn                    : num 85 #>   ..$ nkln                       : num 0.5 #>   ..$ nkpLN                      : num 0.17 #>   ..$ nlayers                    : num 10 #>   ..$ nlnb0                      : num -5 #>   ..$ nlnb1                      : num 18 #>   ..$ nRdb0                      : num -4.59 #>   ..$ nRdb1                      : num 0.125 #>   ..$ nvmaxb0                    : num -16.2 #>   ..$ nvmaxb1                    : num 0.694 #>   ..$ par_energy_content         : num 0.219 #>   ..$ par_energy_fraction        : num 0.5 #>   ..$ phi1                       : num 0.01 #>   ..$ phi2                       : num 10 #>   ..$ Rd                         : num 0.8 #>   ..$ remobilization_fraction    : num 0.6 #>   ..$ retrans                    : num 0.9 #>   ..$ retrans_rhizome            : num 1 #>   ..$ rfl                        : num 0.2 #>   ..$ rsdf                       : num 0.44 #>   ..$ rsec                       : num 0.2 #>   ..$ seneLeaf                   : num 3000 #>   ..$ seneRhizome                : num 4000 #>   ..$ seneRoot                   : num 4000 #>   ..$ seneStem                   : num 3500 #>   ..$ soil_air_entry             : num -2.6 #>   ..$ soil_b_coefficient         : num 5.2 #>   ..$ soil_bulk_density          : num 1.35 #>   ..$ soil_clay_content          : num 0.34 #>   ..$ soil_clod_size             : num 0.04 #>   ..$ soil_depth1                : num 0 #>   ..$ soil_depth2                : num 2.5 #>   .. [list output truncated] #>  $ drivers             :'data.frame':\t4296 obs. of  9 variables: #>   ..$ year            : num [1:4296] 2005 2005 2005 2005 2005 ... #>   ..$ doy             : num [1:4296] 123 123 123 123 123 123 123 123 123 123 ... #>   ..$ hour            : num [1:4296] 0 1 2 3 4 5 6 7 8 9 ... #>   ..$ time_zone_offset: num [1:4296] -6 -6 -6 -6 -6 -6 -6 -6 -6 -6 ... #>   ..$ precip          : num [1:4296] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ rh              : num [1:4296] 0.68 0.7 0.71 0.72 0.75 0.79 0.78 0.63 0.49 0.47 ... #>   ..$ solar           : num [1:4296] 0 0 0 0 0 36 277 693 1090 1440 ... #>   ..$ temp            : num [1:4296] 2.12 1.72 1.61 1.13 0.47 -0.435 0.45 3.55 5.71 6.97 ... #>   ..$ windspeed       : num [1:4296] 3.22 2.86 2.7 2.99 2.3 1.46 1.32 1.41 1.53 2.89 ... #>  $ direct_modules      :List of 14 #>   ..$                               : chr \"BioCro:format_time\" #>   ..$ stomata_water_stress          : chr \"BioCro:stomata_water_stress_linear\" #>   ..$                               : chr \"BioCro:leaf_water_stress_exponential\" #>   ..$ specific_leaf_area            : chr \"BioCro:sla_linear\" #>   ..$                               : chr \"BioCro:parameter_calculator\" #>   ..$                               : chr \"BioCro:soil_evaporation\" #>   ..$ solar_coordinates             : chr \"BioCro:solar_position_michalsky\" #>   ..$                               : chr \"BioCro:height_from_lai\" #>   ..$                               : chr \"BioCro:canopy_gbw_thornley\" #>   ..$                               : chr \"BioCro:stefan_boltzmann_longwave\" #>   ..$ canopy_photosynthesis         : chr \"BioCro:c4_canopy\" #>   ..$ partitioning_coefficients     : chr \"BioCro:partitioning_coefficient_selector\" #>   ..$ partitioning_growth_calculator: chr \"BioCro:partitioning_growth_calculator\" #>   ..$                               : chr \"BioCro:carbon_assimilation_to_biomass\" #>  $ differential_modules:List of 4 #>   ..$ senescence  : chr \"BioCro:thermal_time_senescence\" #>   ..$             : chr \"BioCro:partitioning_growth\" #>   ..$ thermal_time: chr \"BioCro:thermal_time_linear\" #>   ..$ soil_profile: chr \"BioCro:two_layer_soil_profile\" #>  $ ode_solver          :List of 5 #>   ..$ type                  : chr \"homemade_euler\" #>   ..$ output_step_size      : num 1 #>   ..$ adaptive_rel_error_tol: num 1e-05 #>   ..$ adaptive_abs_error_tol: num 1e-05 #>   ..$ adaptive_max_steps    : num 200 #>  $ check_outputs       : logi TRUE #>  $ stored_result_file  : chr \"/tmp/RtmpLEUoCw/miscanthus_x_giganteus_simulation.csv\" #>  $ quantities_to_ignore: chr \"soil_evaporation_rate\" #>  $ row_interval        : num 24 #>  $ digits              : num 5 #>  $ relative_tolerance  : num 0.001"},{"path":"/reference/model_testing.html","id":null,"dir":"Reference","previous_headings":"","what":"The BioCro model testing system — model_testing","title":"The BioCro model testing system — model_testing","text":"BioCro provides several functions defining, modifying, running model   test cases. functions together allow model developers easily create   regression tests ensure models continue function correctly. Note model tests distinct module tests   described module_testing.","code":""},{"path":"/reference/model_testing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The BioCro model testing system — model_testing","text":"Together, model_test_case, run_model_test_cases,   update_stored_model_results,   compare_model_output form simple convenient system   defining running model test cases. tests form critical component   BioCro's regression testing system, test cases defined   BioCro models BioCro-related repositories. functions   required order use BioCro package, critical   understand creating modifying models, modules use. model test case consists model definition, set drivers, short   name, additional settings specify testing behavior.   run test, model definition drivers passed   run_biocro ensure model well-defined,   results (optionally) compared saved results ensure model   behavior changed. Multiple test cases can defined single list   passed run_model_test_cases, run . system, stored data test case name 'test_name' must   stored CSV file called 'test_name_simulation.csv'.   update_stored_model_results function can used generate   suitable file. Typically, BioCro-related repository include model testing file   defines test cases runs check issues. example can found   tests/testthat/test.CropModels.R file. associated stored   test results can found tests/testthat/test_data directory. initial values, parameters, modules weather data change,   behavior modules changes, stored data one   model test cases likely need updated. can done using   update_stored_model_results function. Sometimes changes expected alter key outputs like   biomass values. case, helpful visually compare new   old biomass values. can done using   compare_model_output function updating results.","code":""},{"path":[]},{"path":"/reference/module_case_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Define and modify BioCro module test case files — module_case_files","title":"Define and modify BioCro module test case files — module_case_files","text":"Test cases testing modules can stored files. functions   provide ways create update files. initialize_csv helps define test cases module testing   initializing csv file one module based either set   default input values user-supplied ones. add_csv_row helps define test cases module testing adding one   test case module's csv file based user-supplied inputs   description. update_csv_cases helps define cases module testing updating   expected output values case stored module's csv file. Note module tests distinct model tests   described model_testing.","code":""},{"path":"/reference/module_case_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define and modify BioCro module test case files — module_case_files","text":"","code":"initialize_csv(     module_name,     directory,     nonstandard_inputs = list(),     description = \"automatically-generated test case\",     overwrite = FALSE   )    add_csv_row(module_name, directory, inputs, description)    update_csv_cases(module_name, directory)"},{"path":"/reference/module_case_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define and modify BioCro module test case files — module_case_files","text":"module_name string specifying one BioCro module, formatted like     library_name:local_module_name, library_name name     library contains module local name     local_module_name; fully-qualified module names can formed     manually module_paste. directory directory module test case files stored, e.g.     file.path('tests', 'module_test_cases'). inputs list module inputs, .e., list named numeric elements     corresponding module's input quantities. description string describing test case, e.g. \"temp tbase\".     description succinct contain newline characters. nonstandard_inputs optional list input quantities whose values override default     value 1.0; see inputs entry . overwrite logical value indicating whether existing file overwritten.","code":""},{"path":"/reference/module_case_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define and modify BioCro module test case files — module_case_files","text":"Module test case files form critical component BioCro's regression   testing system. details, see help page   module_testing. initialize_csv function evaluate module set input   quantities store results test case csv file. Typically,   optional arguments can omitted. However, modules produce   errors inputs set 1.0. case, necessary   supply nonstandard inputs (possibly) alternate case description. add_csv_row function evaluate module set input   quantities, define test case resulting outputs description,   add module's corresponding csv file. csv   file exists, one initialized new case. update_csv_cases function evaluate module input   values specified csv case file update stored values   corresponding outputs. output columns present file   added automatically filled correct values. Although output   columns optional, description column must exist csv   file. module test fails update_csv_cases used update test,   care taken ensure new outputs sensible.   function used blindly ensure tests pass, since test   failure may indicate real problem module. Note update_csv_cases can used batch-initialize test cases.   , manually create test case csv file proper name   includes columns inputs description; now, calling   update_csv_cases automatically fill outputs case.   method, care must taken manually specifying values   description column; descriptions must double quoted,   contain internal double quotes, quotes must doubled. Generally   safest simply avoid double quotes descriptions. (See qmethod   help file write.csv details quoting.)","code":""},{"path":"/reference/module_case_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define and modify BioCro module test case files — module_case_files","text":"message indicating whether file created, overwritten, written.","code":""},{"path":[]},{"path":"/reference/module_case_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define and modify BioCro module test case files — module_case_files","text":"","code":"# First, we will initialize a test case file for the 'BioCro' library's # 'thermal_time_linear' module, which will be saved in a temporary directory as # 'BioCro_thermal_time_linear.csv'. Then, we will add a new case to the file. # Finally, we will update the file. Note that the call to `update_csv_cases` # will not actually modify the file unless it is manually edited beforehand to # change an input or output value.  td <- tempdir()  initialize_csv(   'BioCro:thermal_time_linear',   td,   nonstandard_inputs = list(temp = -1),   overwrite = TRUE ) #> [1] \"Case file `/tmp/RtmpLEUoCw/BioCro_thermal_time_linear.csv` was initialized; any pre-existing file was overwritten\"  writeLines(readLines(file.path(td, 'BioCro_thermal_time_linear.csv'))) #> input,input,input,input,output,\"description\" #> fractional_doy,sowing_fractional_doy,tbase,temp,TTc,NA #> 1,1,1,-1,0,\"automatically-generated test case\"  add_csv_row(   'BioCro:thermal_time_linear',   td,   list(fractional_doy = 101, sowing_fractional_doy = 100, tbase = 20, temp = 44),   'temp above tbase' ) #> [1] \"Added new case to file `/tmp/RtmpLEUoCw/BioCro_thermal_time_linear.csv`\"  writeLines(readLines(file.path(td, 'BioCro_thermal_time_linear.csv'))) #> input,input,input,input,output,\"description\" #> fractional_doy,sowing_fractional_doy,tbase,temp,TTc,NA #> 1,1,1,-1,0,\"automatically-generated test case\" #> 101,100,20,44,1,\"temp above tbase\"  update_csv_cases('BioCro:thermal_time_linear', td) #> [1] \"Updated case file `/tmp/RtmpLEUoCw/BioCro_thermal_time_linear.csv`\""},{"path":"/reference/module_creators.html","id":null,"dir":"Reference","previous_headings":"","what":"Create instances of modules — module_creators","title":"Create instances of modules — module_creators","text":"Creates pointers module wrapper objects","code":""},{"path":"/reference/module_creators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create instances of modules — module_creators","text":"","code":"module_creators(module_names)"},{"path":"/reference/module_creators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create instances of modules — module_creators","text":"module_names vector module names","code":""},{"path":"/reference/module_creators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create instances of modules — module_creators","text":"function used internally several BioCro functions,   purpose create instances module wrapper pointers using BioCro's   module library return pointers wrappers. turn, module wrappers   can used obtain information module's inputs, outputs,   properties, can also used create module instance. See   Also section contains list functions directly rely   module_creators. Although description externalptr objects sparse,   briefly mentioned R documentation: externalptr-class. function used directly, module library package   must version. reasons, function exported   package namespace can accessed using package name via   ::: operator.","code":""},{"path":"/reference/module_creators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create instances of modules — module_creators","text":"vector R externalptr objects point   module_creator C++ object","code":""},{"path":[]},{"path":"/reference/module_paste.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepend library name to module names — module_paste","title":"Prepend library name to module names — module_paste","text":"Prepends library name set module names create   suitably-formatted set fully-qualified module names can passed   run_biocro BioCro functions.","code":""},{"path":"/reference/module_paste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepend library name to module names — module_paste","text":"","code":"module_paste(lib_name, local_module_names)"},{"path":"/reference/module_paste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepend library name to module names — module_paste","text":"lib_name string specifying module library name. local_module_names vector list module name strings.","code":""},{"path":"/reference/module_paste.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepend library name to module names — module_paste","text":"module_paste convenience function specifying multiple modules   library; prepends library name module name,   preserving names class local_module_names. Note simple call paste0(lib_name, ':', local_module_names)   produce similar output two important differences: (1)   paste0 preserve names local_module_names   named elements (2) paste0 always return character   vector, even local_module_names list.","code":""},{"path":"/reference/module_paste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepend library name to module names — module_paste","text":"vector list fully-qualified module name strings formatted like   lib_name:local_module_name.","code":""},{"path":[]},{"path":"/reference/module_paste.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepend library name to module names — module_paste","text":"","code":"# Example: Specifying several modules from the `BioCro` module library. modules <- module_paste(   'BioCro',   list('total_biomass', canopy_photosynthesis = 'c3_canopy') )  # Compare to the output from `paste0` modules2 <- paste0(   'BioCro',   ':',   list('total_biomass', canopy_photosynthesis = 'c3_canopy') )  str(modules) #> List of 2 #>  $                      : chr \"BioCro:total_biomass\" #>  $ canopy_photosynthesis: chr \"BioCro:c3_canopy\" str(modules2) #>  chr [1:2] \"BioCro:total_biomass\" \"BioCro:c3_canopy\""},{"path":"/reference/module_testing.html","id":null,"dir":"Reference","previous_headings":"","what":"The BioCro module testing system — module_testing","title":"The BioCro module testing system — module_testing","text":"BioCro provides several functions defining, modifying, running module   test cases. functions together allow module developers easily create   regression tests ensure modules continue function correctly. Note module tests distinct model tests   described model_testing.","code":""},{"path":"/reference/module_testing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The BioCro module testing system — module_testing","text":"Together, test_module_library, test_module,   case, cases_from_csv,   initialize_csv, add_csv_row,   update_csv_cases form simple convenient system   defining running module test cases. tests form critical component   BioCro's regression testing system, test cases defined   BioCro modules BioCro module libraries. functions   required order use BioCro package, critical   understand creating modifying modules. module test case consists set module inputs, set module   outputs, short description case. run test, inputs   passed module, calculated outputs compared   expected ones. outputs match, test passed; otherwise, fails.   operation handled test_module function. simple --fly testing, possible define test case using   case function run using test_module.   However, robust method available facilitate regression testing,   module test cases stored suitably-formatted csv files,   allowing multiple test cases defined module easily checked   afterwards. test case files module module library stored   single directory, test cases can checked one call   test_module_library. system, test cases module fully-qualified name   module_name must stored module_name.csv,   colon module name replaced underscore;   example, module named BioCro:total_biomass associated   BioCro_total_biomass.csv. first row test case file must   quantity types (input output), second row must   quantity names, remaining rows must specify input quantity values   along expected output values produce. must also   description column (description first row)   containing short descriptions test cases. formatting requirements   automatically satisfied test case file produced   initialize_csv modified add_csv_row   update_csv_cases. files can read R using   cases_from_csv, resulting case objects can passed   test_module. Although possible, directly editing case files recommended   since initialize_csv, add_csv_row,   update_csv_cases easier use. several exceptions   suggestion: (1) case must deleted, (2) module input   must added removed, (3) initialization test file,   user may wish batch-initialize using update_csv_cases   (see documentation explanation batch-initialization). Case files can easily viewed using Excel spreadsheet viewers,   also nicely formatted viewed GitHub website   repository. Examples module test case files can found   tests/module_test_cases directory, code uses   testthat package automatically run defined   test cases standard BioCro module library via   test_module_library can found   tests/testthat/test.Modules.R file.","code":""},{"path":[]},{"path":"/reference/module_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a BioCro module header file. — module_write","title":"Generate a BioCro module header file. — module_write","text":"facilitate creation new BioCro modules, module_write   generates BioCro module header file. Given set input output   variables, module_write create C++ header file ('.h' file)   filling template input output variables, ensuring   correct C++ syntax BioCro module.","code":""},{"path":"/reference/module_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a BioCro module header file. — module_write","text":"","code":"module_write(     module_name,     module_library,     module_type,     inputs,     outputs,     output_equations = NULL,     input_units = NULL,     output_units = NULL   )"},{"path":"/reference/module_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a BioCro module header file. — module_write","text":"module_name string module's name. module_library string module's library namespace. E.g., 'biocro'. module_type string setting module type: 'direct' 'differential'. inputs character vector module's input variables. outputs character vector module's output variables. output_equations character vector. module's output variables updated     variables. NULL, zero inserted instead. input_units character vector inputs' units. NULL, units     embedded. output_units character vector outputs' units. NULL, units     embedded.","code":""},{"path":"/reference/module_write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a BioCro module header file. — module_write","text":"type either 'direct' 'differential';     however, module_write enforce case new module types     created future.","code":""},{"path":"/reference/module_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a BioCro module header file. — module_write","text":"string containing new BioCro module header file.","code":""},{"path":"/reference/module_write.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate a BioCro module header file. — module_write","text":"function returns string file /O. Use     writeLines print output console, save     output. See examples . Note customary name header     file name module. module_write checks duplicate input output variables,     detected, raise error. theory, check ensure     generated module compile correctly. However, still possible     define module circular pass checks     validate_dynamical_system_inputs. See Example 4.","code":""},{"path":"/reference/module_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a BioCro module header file. — module_write","text":"","code":"# Example 1 # Inputs as character vector xs = c('x1','x2','x3')  # Units xs_units <- c('Mg / ha', 'Mg / ha / hr', 'dimensionless')  # Outputs ys = c('y1','y2')  out <- module_write('testmod', 'testlib', 'direct',     inputs=xs, input_units= xs_units, outputs=ys)  # Use writeLines to print to console writeLines(out) #> #ifndef TESTLIB_TESTMOD_H #> #define TESTLIB_TESTMOD_H #>  #> #include \"../framework/module.h\" #> #include \"../framework/state_map.h\" #>  #> namespace testlib #> { #> /** #>  * @class testmod #>  * #>  * @brief Put documentation here. #>  * #>  */ #> class testmod : public direct_module #> { #>    public: #>     testmod( #>         state_map const& input_quantities, #>         state_map* output_quantities) #>         : direct_module{}, #>  #>           // Get references to input quantities #>           x1{get_input(input_quantities, \"x1\")}, #>           x2{get_input(input_quantities, \"x2\")}, #>           x3{get_input(input_quantities, \"x3\")}, #>  #>           // Get pointers to output quantities #>           y1_op{get_op(output_quantities, \"y1\")}, #>           y2_op{get_op(output_quantities, \"y2\")} #>     { #>     } #>     static string_vector get_inputs(); #>     static string_vector get_outputs(); #>     static std::string get_name() { return \"testmod\"; } #>  #>    private: #>     // References to input quantities #>     double const& x1; #>     double const& x2; #>     double const& x3; #>  #>     // Pointers to output quantities #>     double* y1_op; #>     double* y2_op; #>  #>     // Main operation #>     void do_operation() const; #> }; #>  #> string_vector testmod::get_inputs() #> { #>     return { #>         \"x1\",          // Mg / ha #>         \"x2\",          // Mg / ha / hr #>         \"x3\"           // dimensionless #>     }; #> } #>  #> string_vector testmod::get_outputs() #> { #>     return { #>         \"y1\",          // Put y1 units here #>         \"y2\"           // Put y2 units here #>     }; #> } #>  #> void testmod::do_operation() const #> { #>     // Make calculations here #>  #>     // Use `update` to set outputs #>     update(y1_op, 0); #>     update(y2_op, 0); #> } #>  #> }  // namespace testlib #> #endif #>   if (FALSE) { # \\dontrun{   # Use writeLines to save as a `.h` file   writeLines(out, \"./testmod.h\") } # }  # Example 2: A differential module xs <- c('var_1','var_2') out <- module_write('testmod', 'testlib', 'differential', xs, xs) writeLines(out) #> #ifndef TESTLIB_TESTMOD_H #> #define TESTLIB_TESTMOD_H #>  #> #include \"../framework/module.h\" #> #include \"../framework/state_map.h\" #>  #> namespace testlib #> { #> /** #>  * @class testmod #>  * #>  * @brief Put documentation here. #>  * #>  */ #> class testmod : public differential_module #> { #>    public: #>     testmod( #>         state_map const& input_quantities, #>         state_map* output_quantities) #>         : differential_module{}, #>  #>           // Get references to input quantities #>           var_1{get_input(input_quantities, \"var_1\")}, #>           var_2{get_input(input_quantities, \"var_2\")}, #>  #>           // Get pointers to output quantities #>           var_1_op{get_op(output_quantities, \"var_1\")}, #>           var_2_op{get_op(output_quantities, \"var_2\")} #>     { #>     } #>     static string_vector get_inputs(); #>     static string_vector get_outputs(); #>     static std::string get_name() { return \"testmod\"; } #>  #>    private: #>     // References to input quantities #>     double const& var_1; #>     double const& var_2; #>  #>     // Pointers to output quantities #>     double* var_1_op; #>     double* var_2_op; #>  #>     // Main operation #>     void do_operation() const; #> }; #>  #> string_vector testmod::get_inputs() #> { #>     return { #>         \"var_1\",          // Put var_1 units here #>         \"var_2\"           // Put var_2 units here #>     }; #> } #>  #> string_vector testmod::get_outputs() #> { #>     return { #>         \"var_1\",          // Put var_1 units here #>         \"var_2\"           // Put var_2 units here #>     }; #> } #>  #> void testmod::do_operation() const #> { #>     // Make calculations here #>  #>     // Use `update` to set outputs #>     update(var_1_op, 0); #>     update(var_2_op, 0); #> } #>  #> }  // namespace testlib #> #endif #>   # Example 3: A module with pairwise names # Here we use an outer product to generate pairwise combinations of # tissues and pool types tissues <- c('leaf', 'stem', 'root') pools <- c('carbon', 'nitrogen') xs <- as.vector(outer(tissues, pools, paste, sep = '_')) out <- module_write('testmod', 'testlib', 'differential', xs, xs) writeLines(out) #> #ifndef TESTLIB_TESTMOD_H #> #define TESTLIB_TESTMOD_H #>  #> #include \"../framework/module.h\" #> #include \"../framework/state_map.h\" #>  #> namespace testlib #> { #> /** #>  * @class testmod #>  * #>  * @brief Put documentation here. #>  * #>  */ #> class testmod : public differential_module #> { #>    public: #>     testmod( #>         state_map const& input_quantities, #>         state_map* output_quantities) #>         : differential_module{}, #>  #>           // Get references to input quantities #>           leaf_carbon{get_input(input_quantities, \"leaf_carbon\")}, #>           stem_carbon{get_input(input_quantities, \"stem_carbon\")}, #>           root_carbon{get_input(input_quantities, \"root_carbon\")}, #>           leaf_nitrogen{get_input(input_quantities, \"leaf_nitrogen\")}, #>           stem_nitrogen{get_input(input_quantities, \"stem_nitrogen\")}, #>           root_nitrogen{get_input(input_quantities, \"root_nitrogen\")}, #>  #>           // Get pointers to output quantities #>           leaf_carbon_op{get_op(output_quantities, \"leaf_carbon\")}, #>           stem_carbon_op{get_op(output_quantities, \"stem_carbon\")}, #>           root_carbon_op{get_op(output_quantities, \"root_carbon\")}, #>           leaf_nitrogen_op{get_op(output_quantities, \"leaf_nitrogen\")}, #>           stem_nitrogen_op{get_op(output_quantities, \"stem_nitrogen\")}, #>           root_nitrogen_op{get_op(output_quantities, \"root_nitrogen\")} #>     { #>     } #>     static string_vector get_inputs(); #>     static string_vector get_outputs(); #>     static std::string get_name() { return \"testmod\"; } #>  #>    private: #>     // References to input quantities #>     double const& leaf_carbon; #>     double const& stem_carbon; #>     double const& root_carbon; #>     double const& leaf_nitrogen; #>     double const& stem_nitrogen; #>     double const& root_nitrogen; #>  #>     // Pointers to output quantities #>     double* leaf_carbon_op; #>     double* stem_carbon_op; #>     double* root_carbon_op; #>     double* leaf_nitrogen_op; #>     double* stem_nitrogen_op; #>     double* root_nitrogen_op; #>  #>     // Main operation #>     void do_operation() const; #> }; #>  #> string_vector testmod::get_inputs() #> { #>     return { #>         \"leaf_carbon\",          // Put leaf_carbon units here #>         \"stem_carbon\",          // Put stem_carbon units here #>         \"root_carbon\",          // Put root_carbon units here #>         \"leaf_nitrogen\",          // Put leaf_nitrogen units here #>         \"stem_nitrogen\",          // Put stem_nitrogen units here #>         \"root_nitrogen\"           // Put root_nitrogen units here #>     }; #> } #>  #> string_vector testmod::get_outputs() #> { #>     return { #>         \"leaf_carbon\",          // Put leaf_carbon units here #>         \"stem_carbon\",          // Put stem_carbon units here #>         \"root_carbon\",          // Put root_carbon units here #>         \"leaf_nitrogen\",          // Put leaf_nitrogen units here #>         \"stem_nitrogen\",          // Put stem_nitrogen units here #>         \"root_nitrogen\"           // Put root_nitrogen units here #>     }; #> } #>  #> void testmod::do_operation() const #> { #>     // Make calculations here #>  #>     // Use `update` to set outputs #>     update(leaf_carbon_op, 0); #>     update(stem_carbon_op, 0); #>     update(root_carbon_op, 0); #>     update(leaf_nitrogen_op, 0); #>     update(stem_nitrogen_op, 0); #>     update(root_nitrogen_op, 0); #> } #>  #> }  // namespace testlib #> #endif #>   # Example 4: Circular modules  if (FALSE) { # \\dontrun{   out <- module_write(inputs = c('x' ,'x'))    # Will compile, but will cause a \"circular quantities\" error if it is used   # in a BioCro simulation:   out <- module_write('inconsistent', 'examplelib', type='direct',           inputs = 'x', outputs = 'x') } # }"},{"path":"/reference/modules.html","id":null,"dir":"Reference","previous_headings":"","what":"BioCro module functions — modules","title":"BioCro module functions — modules","text":"BioCro modules named sets equations, module available   BioCro module library. module identified   fully-qualified name   includes name library local name within library.   functions provide ways access information modules   calculate output values sets input values. module_info returns essential information BioCro module. quantity_list_from_names initializes list named numeric elements   set names. evaluate_module runs BioCro module using list input quantity   values. module_response_curve runs BioCro module repeatedly different   input quantity values produce response curve.","code":""},{"path":"/reference/modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BioCro module functions — modules","text":"","code":"module_info(module_name, verbose = TRUE)    quantity_list_from_names(quantity_names)    evaluate_module(module_name, input_quantities)    module_response_curve(module_name, fixed_quantities, varying_quantities)"},{"path":"/reference/modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BioCro module functions — modules","text":"module_name string specifying one BioCro module, formatted like     library_name:local_module_name, library_name name     library contains module local name     local_module_name; fully-qualified module names can formed     manually module_paste. verbose boolean indicating whether print information R console. input_quantities list named numeric elements representing input quantities required     module; extraneous quantities ignored module. quantity_names vector strings. fixed_quantities list named numeric elements representing input quantities required     module whose values considered constant;     extraneous quantities ignored module. varying_quantities data frame column represents input quantity required     module whose value varies across response curve.","code":""},{"path":"/reference/modules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BioCro module functions — modules","text":"providing avenues retrieving information module evaluating   module's equations, module_info evaluate_module   functions form main interface individual BioCro modules within R.   quantity_list_from_names function convenience function   preparing suitable quantity lists pass evaluate_module. module_response_curve function provides convenient way   calculate module response curve. , user must specify module   use, values fixed input quantities (input_quantities),   sequence values quantities vary across response curve   (varying_quantities). returned data frame includes   information required reproduce curve: full-qualified   module name, inputs (including ones constant values),   outputs. Note: one quantity q input output   module, input value stored q column returned   data frame output value stored q.1 column;   renaming performed automatically make.unique function.","code":""},{"path":"/reference/modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BioCro module functions — modules","text":"module_info invisible list several named elements containing     essential information module: module_name: module's (-fully-qualified) name inputs: character vector module's inputs outputs: character vector module's outputs type: module's type represented string (either             'differential' 'direct') euler_requirement: Indicates whether module requires             fixed-step Euler ODE solver used BioCro simulation creation_error_message: Describes errors occurred             creating instance module  quantity_list_from_names list named numeric elements, names set     quantity_names value set 1. evaluate_module list named numeric elements representing values module's     outputs calculated input_quantities according     module's equations. module_response_curve data frame first column fully-qualified name     module produced response curve remaining columns     module's input output quantities. row corresponds row     varying_quantities.","code":""},{"path":[]},{"path":"/reference/modules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BioCro module functions — modules","text":"","code":"# Example 1: printing information about the 'BioCro' module library's # 'c3_assimilation' module to the R console module_info('BioCro:c3_assimilation') #>  #>  #> Module name: #>   c3_assimilation #>  #> Module input quantities: #>   atmospheric_pressure #>   b0 #>   b1 #>   beta_PSII #>   Catm #>   electrons_per_carboxylation #>   electrons_per_oxygenation #>   gbw #>   Gs_min #>   Gstar_c #>   Gstar_Ea #>   jmax #>   Jmax_c #>   Jmax_Ea #>   Kc_c #>   Kc_Ea #>   Ko_c #>   Ko_Ea #>   O2 #>   phi_PSII_0 #>   phi_PSII_1 #>   phi_PSII_2 #>   Qabs #>   Rd #>   Rd_c #>   Rd_Ea #>   rh #>   StomataWS #>   temp #>   theta_0 #>   theta_1 #>   theta_2 #>   Tleaf #>   Tp_c #>   Tp_Ha #>   Tp_Hd #>   Tp_S #>   tpu_rate_max #>   Vcmax_c #>   Vcmax_Ea #>   vmax1 #>  #> Module output quantities: #>   Assim #>   Gs #>   Cs #>   RHs #>   Ci #>   GrossAssim #>   Assim_conductance #>   Rp #>   iterations #>  #> Module type (differential or direct): #>   direct #>  #> Requires a fixed step size Euler ode_solver: #>   no #>   # Example 2: getting the inputs to the 'BioCro' module library's # 'thermal_time_linear' module, generating a default input list, and using it to # run the module info <- module_info('BioCro:thermal_time_linear', verbose = FALSE) inputs <- quantity_list_from_names(info$inputs) # All inputs will be set to 1 outputs <- evaluate_module('BioCro:thermal_time_linear', inputs)  # Example 3: calculating the temperature response of light saturated net # assimilation at several values of relative humidity in the absence of water # stress using the 'BioCro' module library's 'c3_assimilation' module and # the default soybean parameters. Here, the leaf temperature and humidity values # are independent of each other, so we use the `expand.grid` function to form a # data frame of all possible combinations of their values. Then we set the # ambient temperature equal to the leaf temperature. rc <- module_response_curve(   'BioCro:c3_assimilation',   within(soybean$parameters, {Qabs = 2000; StomataWS = 1; gbw = 1.2}),   within(     expand.grid(       Tleaf = seq(from = 0, to = 40, length.out = 201),       rh = c(0.2, 0.5, 0.8)     ),     {temp = Tleaf}   ) )  caption <- paste(   \"Response curves calculated with several RH\\nvalues and Q =\",   unique(rc$Qp),   \"micromol / m^2 / s\\nusing the\",   unique(rc$module_name),   \"module\" )  lattice::xyplot(   Assim ~ Tleaf,   group = rh,   data = rc,   auto = TRUE,   type = 'l',   main = caption )"},{"path":"/reference/obsBea.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus assimilation field data — obsBea","title":"Miscanthus assimilation field data — obsBea","text":"Assimilation Miscanthus measured Beale, Bint, Long 1996.      first column observed net assimilation rate (micromoles m^-2 s^-1).     second column observed quantum flux (micromoles m^-2 s^-1).     third column temperature (degrees Celsius). Relative humidity     reported thus assumed 0.7.","code":""},{"path":"/reference/obsBea.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus assimilation field data — obsBea","text":"Data frame dimensions 27 4.","code":""},{"path":"/reference/obsBea.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus assimilation field data — obsBea","text":"C. V. Beale, D. . Bint, S. P. Long. 1996. Leaf photosynthesis     C4-grass Miscanthus x giganteus, growing cool temperate climate     southern England. J. Exp. Bot. 47 (2): 267–273.","code":""},{"path":"/reference/obsBeaC.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete Miscanthus assimilation field data — obsBeaC","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"Assimilation stomatal conductance Miscanthus measured Beale, Bint, Long     1996.  (Missing data also included.)  first column     date, second hour. Columns 3 4 assimilation     stomatal conductance respectively.","code":""},{"path":"/reference/obsBeaC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"Data frame dimensions 35 6.","code":""},{"path":"/reference/obsBeaC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"C. V. Beale, D. . Bint, S. P. Long. 1996. Leaf photosynthesis     C4-grass Miscanthus x giganteus, growing cool temperate climate     southern England. J. Exp. Bot. 47 (2): 267–273.","code":""},{"path":"/reference/obsBeaC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Complete Miscanthus assimilation field data — obsBeaC","text":"third column observed net assimilation rate (micromoles m^-2 s^-1). fifth column observed quantum flux (micromoles m^-2 s^-1). sixth column temperature (degrees Celsius).","code":""},{"path":"/reference/obsNaid.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscanthus assimilation data — obsNaid","title":"Miscanthus assimilation data — obsNaid","text":"Assimilation Miscanthus measured Naidu et al. (2003). first     column observed net assimilation rate (micromoles m^-2 s^-1).     second column observed quantum flux (micromoles m^-2 s^-1).     third column temperature (degrees Celsius).     fourth column observed relative humidity proportion (e.g. 0.7).","code":""},{"path":"/reference/obsNaid.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Miscanthus assimilation data — obsNaid","text":"Data frame dimensions 16 4.","code":""},{"path":"/reference/obsNaid.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Miscanthus assimilation data — obsNaid","text":"S. L. Naidu, S. P. Moose, . K. AL-Shoaibi, C. . Raines, S. P.     Long.  2003. Cold Tolerance C4 photosynthesis Miscanthus x giganteus:     Adaptation Amounts Sequence C4 Photosynthetic Enzymes.     Plant Physiol. 132 (3): 1688–1697.","code":""},{"path":"/reference/partial_application.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience Functions for Partial Application — partial_application","title":"Convenience Functions for Partial Application — partial_application","text":"Convenience functions using partial application BioCro","code":""},{"path":"/reference/partial_application.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience Functions for Partial Application — partial_application","text":"","code":"partial_run_biocro(     initial_values = list(),     parameters = list(),     drivers,     direct_module_names = list(),     differential_module_names = list(),     ode_solver = BioCro::default_ode_solvers$homemade_euler,     arg_names,     verbose = FALSE )  partial_evaluate_module(module_name, input_quantities, arg_names)"},{"path":"/reference/partial_application.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience Functions for Partial Application — partial_application","text":"arg_names vector strings specifying input quantities whose values     fixed using partial application. initial_values Identical corresponding argument run_biocro. parameters Identical corresponding argument run_biocro. drivers Identical corresponding argument run_biocro. direct_module_names Identical corresponding argument run_biocro. differential_module_names Identical corresponding argument run_biocro. ode_solver Identical corresponding argument run_biocro. verbose Identical corresponding argument run_biocro. module_name Identical corresponding argument evaluate_module. input_quantities list named numeric elements representing input quantities required     module included arg_names; extraneous     quantities ignored module.","code":""},{"path":"/reference/partial_application.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience Functions for Partial Application — partial_application","text":"Partial application technique fixing input   arguments function, producing new function fewer inputs.   context BioCro, partial application can often useful varying   parameters, initial values, drivers performing optimization   sensitivity analysis. Optimizers (optim)   typically require function single input argument, partial   application tools provided help create functions. partial_run_biocro partial_evaluate_module accept   arguments \"regular\" counterparts (run_biocro   evaluate_module) addition arg_names,   specifies input quantities fixed. partial_run_biocro, element arg_names must   name quantity one initial_values,   parameters, drivers. partial_evaluate_module,   element arg_names must name one module's input   quantities. using one pre-defined crop growth models, may helpful   use command pass arguments partial_run_biocro;   see documentation crop_model_definitions   information.","code":""},{"path":"/reference/partial_application.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience Functions for Partial Application — partial_application","text":"partial_run_biocro function calls run_biocro inputs     (except specified arg_names) set values specified     original call partial_run_biocro. new function one     input (x), can vector list specifying values     quantities arg_names. x names, elements must     supplied order original arg_names.     x names, must identical elements     arg_names can order. Elements x corresponding     drivers must vectors length drivers;     can specified named element list sequential elements     vector without names. return value new function data frame     produced run_biocro. partial_evaluate_module function calls evaluate_module input     quantities (except specified arg_names) set values     specified original call partial_evaluate_module. new     function one input (x), can vector list specifying     values quantities arg_names. x names,     elements must supplied order original     arg_names. x names, must identical     elements arg_names can order. return value     new function list two elements (inputs     outputs), list named numeric elements     representing module's input output values. (Note differs     output evaluate_module, returns outputs.)","code":""},{"path":[]},{"path":"/reference/partial_application.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience Functions for Partial Application — partial_application","text":"","code":"# Specify weather data to use in these examples ex_weather <- get_growing_season_climate(weather$'2005')  # Example 1: varying the thermal time values at which senescence starts for # different organs in a simulation; here we set them to the following values # instead of the defaults: #  - seneLeaf: 2000 degrees C * day #  - seneStem: 2100 degrees C * day #  - seneRoot: 2200 degrees C * day #  - seneRhizome: 2300 degrees C * day senescence_simulation <- partial_run_biocro(   miscanthus_x_giganteus$initial_values,   miscanthus_x_giganteus$parameters,   ex_weather,   miscanthus_x_giganteus$direct_modules,   miscanthus_x_giganteus$differential_modules,   miscanthus_x_giganteus$ode_solver,   c('seneLeaf', 'seneStem', 'seneRoot', 'seneRhizome') ) senescence_result <- senescence_simulation(c(2000, 2100, 2200, 2300))  # Example 2: a crude method for simulating the effects of climate change; here # we increase the atmospheric CO2 concentration to 500 ppm and the temperature # by 2 degrees C relative to 2005 temperatures. The commands below that call # `temperature_simulation` all produce the same result. temperature_simulation <- partial_run_biocro(   miscanthus_x_giganteus$initial_values,   miscanthus_x_giganteus$parameters,   ex_weather,   miscanthus_x_giganteus$direct_modules,   miscanthus_x_giganteus$differential_modules,   miscanthus_x_giganteus$ode_solver,   c(\"Catm\", \"temp\") ) hot_result_1 <- temperature_simulation(c(500, ex_weather$temp + 2.0)) hot_result_2 <- temperature_simulation(list(Catm = 500, temp = ex_weather$temp + 2.0)) hot_result_3 <- temperature_simulation(list(temp = ex_weather$temp + 2.0, Catm = 500))  # Note that these commands will both produce errors: # hot_result_4 <- temperature_simulation(c(Catm = 500, temp = ex_weather$temp + 2.0)) # hot_result_5 <- temperature_simulation(stats::setNames( #   c(500, ex_weather$temp + 2.0), #   c(\"Catm\", rep(\"temp\", length(ex_weather$temp))) # ))  # Note that this command will produce a strange result where the first # temperature value will be incorrectly interpreted as a `Catm` value, and the # `Catm` value will be interpreted as the final temperature value. # hot_result_6 <- temperature_simulation(c(ex_weather$temp + 2.0, 500))  # Example 3: varying the base and air temperature inputs to the # 'thermal_time_linear' module from the 'BioCro' module library. The commands # below that call `thermal_time_rate` all produce the same result. thermal_time_rate <- partial_evaluate_module(   'BioCro:thermal_time_linear',   within(miscanthus_x_giganteus$parameters, {fractional_doy = 1}),   c(\"temp\", \"tbase\") ) rate_result_1 <- thermal_time_rate(c(25, 10)) rate_result_2 <- thermal_time_rate(c(temp = 25, tbase = 10)) rate_result_3 <- thermal_time_rate(c(tbase = 10, temp = 25)) rate_result_4 <- thermal_time_rate(list(temp = 25, tbase = 10)) rate_result_5 <- thermal_time_rate(list(tbase = 10, temp = 25))"},{"path":"/reference/run_biocro.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Crop Growth with BioCro — run_biocro","title":"Simulate Crop Growth with BioCro — run_biocro","text":"Runs full crop growth simulation using BioCro framework","code":""},{"path":"/reference/run_biocro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Crop Growth with BioCro — run_biocro","text":"","code":"run_biocro(       initial_values = list(),       parameters = list(),       drivers,       direct_module_names = list(),       differential_module_names = list(),       ode_solver = BioCro::default_ode_solvers$homemade_euler,       verbose = FALSE   )"},{"path":"/reference/run_biocro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Crop Growth with BioCro — run_biocro","text":"initial_values list named quantities representing initial values     differential quantities, .e., quantities whose derivatives     calculated differential modules parameters list named quantities change time; must include     'timestep' parameter (see `drivers` info) drivers data frame quantities rows equally spaced time intervals     specified `parameters` 'timestep'. drivers must include either     (1) 'time' (2) 'doy' 'hour' columns. latter case, 'time'     automatically computed 'doy' 'hour' using     add_time_to_weather_data, BioCro:format_time     module added direct modules already present. direct_module_names character vector list fully-qualified names direct     modules use system; lists available modules can obtained via     get_all_modules function. differential_module_names character vector list fully-qualified names differential     modules use system; lists available modules can obtained via     get_all_modules function. ode_solver list specifying details numerical ODE solver. required     elements : type: string specifying name algorithm use;             list available options can obtained using             get_all_ode_solvers function. output_step_size: output time step size units             'timestep'. example, output_step_size 0.25             'timestep' 2, output time points spaced             0.25 * 2 = 0.5. adaptive_rel_error_tol: used set relative error             tolerance adaptive step size methods adaptive_abs_error_tol: used set absolute error             tolerance adaptive step size methods adaptive_max_steps: determines many times adaptive             step size method attempt find new step size             indicating failure  verbose logical variable indicating whether print dynamical system     validation information. (detailed startup information can obtained     validate_dynamical_system_inputs function.)","code":""},{"path":"/reference/run_biocro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Crop Growth with BioCro — run_biocro","text":"run_biocro important function BioCro package.   input arguments function used define dynamical system   solve time evolution desired time period. details   function operates, see Lochocki et al. (2022)   [doi:10.1093/insilicoplants/diac003 ]. using one pre-defined crop growth models, may helpful   use command pass arguments run_biocro; see   documentation crop_model_definitions information.","code":""},{"path":"/reference/run_biocro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Crop Growth with BioCro — run_biocro","text":"data frame column represents one quantities included   simulation (exception parameters, since values   guaranteed change time) row represents time point","code":""},{"path":[]},{"path":"/reference/run_biocro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Crop Growth with BioCro — run_biocro","text":"","code":"# Example: running a miscanthus simulation using weather data from 2005 result <- run_biocro(   miscanthus_x_giganteus$initial_values,   miscanthus_x_giganteus$parameters,   get_growing_season_climate(weather$'2005'),   miscanthus_x_giganteus$direct_modules,   miscanthus_x_giganteus$differential_modules,   miscanthus_x_giganteus$ode_solver )  lattice::xyplot(   Leaf + Stem + Root + Grain ~ TTc,   data=result,   type='l',   auto=TRUE )"},{"path":"/reference/run_model_test_cases.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BioCro model test cases — run_model_test_cases","title":"Run BioCro model test cases — run_model_test_cases","text":"BioCro models can tested using test cases, sets known outputs   correspond particular inputs. run_model_test_cases function   runs one tests. Note model tests distinct module tests   described module_testing.","code":""},{"path":"/reference/run_model_test_cases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BioCro model test cases — run_model_test_cases","text":"","code":"run_model_test_cases(model_test_cases)"},{"path":"/reference/run_model_test_cases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BioCro model test cases — run_model_test_cases","text":"model_test_cases list module test cases, created using     model_test_case.","code":""},{"path":"/reference/run_model_test_cases.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run BioCro model test cases — run_model_test_cases","text":"run_model_test_cases function key part BioCro model   testing system. See model_testing information. test case, following checks performed: model definition must valid according           validate_dynamical_system_inputs. model run, cause errors warnings. test case check_outputs set TRUE,   following additional checks comparing new result saved result   performed: new result number rows old result. exception columns quantities_to_ignore,           columns stored result included new result. exception columns quantities_to_ignore,           columns stored result values new           result (within specified tolerance). check made           using .equal tolerance set           relative_tolerance. comparing values column, values checked   every Nth row new result, N value row_interval   specified defining test case. test case check_outputs TRUE, stored   result created using update_stored_model_results   function. checks fail supplied test cases, error   thrown descriptive message. Besides checks , warning message also sent user   columns new result included saved result.","code":""},{"path":"/reference/run_model_test_cases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BioCro model test cases — run_model_test_cases","text":"issues found, function return TRUE.","code":""},{"path":[]},{"path":"/reference/run_model_test_cases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BioCro model test cases — run_model_test_cases","text":"","code":"# Define and run a test case for the miscanthus model miscanthus_test_case <- model_test_case(     'miscanthus_x_giganteus',     miscanthus_x_giganteus,     get_growing_season_climate(weather$'2005'),     FALSE )  run_model_test_cases(   list(     miscanthus_test_case   ) ) #> [1] TRUE"},{"path":"/reference/soil_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil properties — soil_parameters","title":"Soil properties — soil_parameters","text":"collection soil property data.","code":""},{"path":"/reference/soil_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil properties — soil_parameters","text":"","code":"soil_parameters"},{"path":"/reference/soil_parameters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil properties — soil_parameters","text":"list named elements, element represents hydraulic   properties one type soil. soil types defined following   USDA soil texture classification   scheme, 11 12 possible types included (\"silt\"   available). following names used indicate various soil types: sand loamy_sand sandy_loam loam silt_loam sandy_clay_loam clay_loam silty_clay_loam sandy_clay silty_clay clay soil type, following parameter values provided: soil_silt_content (dimensionless) soil_clay_content (dimensionless) soil_sand_content (dimensionless) soil_air_entry (J / kg) soil_b_coefficient (dimensionless) soil_saturated_conductivity (J * s / m^3) soil_saturation_capacity (dimensionless) soil_field_capacity (dimensionless) soil_wilting_point (dimensionless) soil_bulk_density (Mg / m^3)","code":""},{"path":"/reference/soil_parameters.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soil properties — soil_parameters","text":"soil property values based Table 9.1 Campbell Norman's   textbook Introduction Environmental Biophysics (1998). Bulk   density values taken function getsoilprop.c Melanie   (Colorado). bulk density sand getsoilprop.c 0,   sensible, value 1.60 Mg / m^3 used instead. wilting point value 0.21 (corrected 0.32) silty clay loam   based list book corrections available   Brian Hornbuckle's teaching website   using Wayback Machine, since seem available   current site.","code":""},{"path":"/reference/soybean.html","id":null,"dir":"Reference","previous_headings":"","what":"Soybean-BioCro model definition — soybean","title":"Soybean-BioCro model definition — soybean","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run soybean growth   simulations Champaign, Illinois locations. Along soybean   circadian clock specifications (soybean_clock), values   define soybean growth model Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ], commonly referred   Soybean-BioCro. represent soybean growth Champaign, IL, values must paired   Champaign weather data (cmi_soybean_weather_data).   weather data includes output soybean circadian clock model   (soybean_clock), clock components need   included running soybean growth simulation using weather data.   parameters already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"/reference/soybean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soybean-BioCro model definition — soybean","text":"","code":"soybean"},{"path":"/reference/soybean.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soybean-BioCro model definition — soybean","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"/reference/soybean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soybean-BioCro model definition — soybean","text":"improvements made BioCro modules, behavior changes,   soybean model parameters must updated. Following significant module   updates, reparameterization performed using method data   used Matthews et al. (2022). following summary   reparameterizations occurred since original publication   Soybean-BioCro model: 2023-06-18: Several modules updated, value     atmospheric transmittance changed 0.85 0.6 based     Campbell Norman, Introduction Environmental Biophysics,     2nd Edition, Pg 173. Due changes, reparameterization     following required: alphaLeaf, alphaRoot,     alphaStem, alphaShell, betaLeaf, betaRoot,     betaStem, betaShell, rateSeneLeaf, rateSeneStem,     alphaSeneLeaf, betaSeneLeaf, alphaSeneStem,     betaSeneStem. 2023-03-15: Several modules updated.     significant changes (1)     BioCro:no_leaf_resp_neg_assim_partitioning_growth_calculator now     reduces leaf growth rate response water stress (2)     partitioning modules now include new tissue type (shell). new     component allows us distinguish components soybean pod,     shell represents pericarp grain represents     seed. distinction found important accurately     predicting seed biomass, important agricultural settings     entire pod mass, since pericarp included typical     yield measurements. Due changes, reparameterization     following required: alphaLeaf, alphaRoot,     alphaStem, alphaShell, betaLeaf, betaRoot,     betaStem, betaShell, rateSeneLeaf, rateSeneStem,     alphaSeneLeaf, betaSeneLeaf, alphaSeneStem,     betaSeneStem. also necessary add new direct module     model definition: BioCro:leaf_water_stress_exponential. module     calculates fractional reduction leaf growth rate due water stress. 2024-09-12: Several changes made: (1)     mrc1 mrc2 renamed grc_stem     grc_root, respectively. two parameters used scale     assimilate rate, commonly called growth respiration coefficient (grc).     (2) new module, BioCro:maintenance_respiration, added     account maintenance respiration biomass partitioning.     module removes fraction organ constant parameter called mrc_*     (e.g., mrc_leaf) also temperature-dependent Q10 scaling factor.     Among mrc_* parameters, mrc_leaf mrc_stem set     equal represent maintenance respiration shoot, mrc_grain     assigned negligible value prevent grain biomass reduction season end.     decreasing trends seen observed data. (3) Parameter optimizations     2002-2006 biomass datasets performed accommodate changes. Whenever reparameterization made, list updated,   vignettes using soybean model checked see axis limits,   etc., need change.","code":""},{"path":"/reference/soybean.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soybean-BioCro model definition — soybean","text":"model described detail Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ]. make notes   components: model, ODE solver type     boost_rosenbrock auto (defaults     boost_rosenbrock fixed step size Euler ODE solver     required, case) since integration fail unless     tolerances stringent (e.g., output_step_size = 0.01,     adaptive_rel_error_tol = 1e-9, adaptive_abs_error_tol = 1e-9). initial total seed mass per land area, use following     equation: Number seeds per meter * weight per seed / row spacing.     number seeds per meter 20 row spacing 0.38 m,     reported Morgan et al. (2004) [doi:10.1104/pp.104.043968 ].     weight per seed based average .12 .18 grams, reported     Feedipedia. Thus,     initial biomass     (20 seeds / m) * (0.15 g / seed) / (0.38 m) = 7.89 g / m^2,     equivalent 0.0789 Mg / ha typical BioCro units. Since     model seed component, value used determine     initial Leaf, Stem, Root biomass, assuming 80%     leaf, 10% stem, 10% root. historical reasons, seed tissue model called     Grain. entire pod biomass can calculated adding     Grain Shell biomass. historical reasons, model includes Rhizome tissue.     Soybean rhizome, rhizome model grow     senesce. achieve , kRhizome_emr     rateSeneRhizome parameters must set 0. also necessary     specify values several quantities alphaSeneRhizome,     betaSeneRhizome, initial rhizome mass, although actual     values quantities effect simulation output. historical reasons, modules define Soybean-BioCro     require input quantities actually used calculations;     \"extraneous\" parameters identified data/soybean.R. sowing_fractional_doy input     soybean_development_rate_calculator module set 0     Soybean-BioCro uses weather data set sowing time. words,     weather data truncated begins beggining simulation. Leaf reflectance transmittance PAR band estimated     [doi:10.2134/agronmonogr31.c7 ],     [doi:10.2134/agronj1971.00021962006300010038x ],     [doi:10.2134/agronj1991.00021962008300030026x ]. Reflectance     transmittance NIR band [doi:10.2134/agronmonogr31.c7 ].","code":""},{"path":[]},{"path":"/reference/soybean_clock.html","id":null,"dir":"Reference","previous_headings":"","what":"Soybean-BioCro circadian clock model definition — soybean_clock","title":"Soybean-BioCro circadian clock model definition — soybean_clock","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run soybean circadian clock   simulations Champaign, Illinois locations. Along soybean   growth specifications (soybean), values define soybean   growth model Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ], commonly referred   Soybean-BioCro. represent soybean circadian clock Champaign, Illinois, values   must paired weather data cmi_weather_data.","code":""},{"path":"/reference/soybean_clock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soybean-BioCro circadian clock model definition — soybean_clock","text":"","code":"soybean_clock"},{"path":"/reference/soybean_clock.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soybean-BioCro circadian clock model definition — soybean_clock","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"/reference/soybean_clock.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soybean-BioCro circadian clock model definition — soybean_clock","text":"model described detail Matthews et al. (2022)   [doi:10.1093/insilicoplants/diab032 ] Lochocki & McGrath (2021)   [doi:10.1093/insilicoplants/diab016 ]. , use initial phases dawn dusk oscillators 200.0   80.0 radians, respectively. values optimized   simulations beginning midnight January 1, require minimal   time transient signals die . values determined   running simulation one year starting January 1, recording   oscillator states end December 31.","code":""},{"path":[]},{"path":"/reference/system_derivatives.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Derivatives for Differential Quantities — system_derivatives","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"Solving BioCro model using one R's available differential equation   solvers","code":""},{"path":"/reference/system_derivatives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"","code":"system_derivatives(     parameters = list(),     drivers,     direct_module_names = list(),     differential_module_names = list()   )"},{"path":"/reference/system_derivatives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"parameters Identical corresponding argument run_biocro. drivers Identical corresponding argument run_biocro. direct_module_names Identical corresponding argument run_biocro. differential_module_names Identical corresponding argument run_biocro.","code":""},{"path":"/reference/system_derivatives.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"system_derivatives accepts input arguments   run_biocro exceptions ode_solver   initial_values; function intended passed ODE solver   R, solve system's time dependence diffferential   quantities evolve initial values, ode_solver   initial_values required . using one pre-defined crop growth models, may helpful   use command pass arguments system_derivatives;   see documentation crop_model_definitions   information.","code":""},{"path":"/reference/system_derivatives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"return value system_derivatives function three inputs   (t, differential_quantities, parms) returns   derivatives differential quantities dynamical system   determined original inputs (parameters, drivers,   direct_module_names, differential_module_names). function signature requirements inputs set   LSODES function deSolve package. t input   single time value differential_quantities input   vector names differential quantities defined   modules. parms required LSODES, use   anything. function can passed LSODES alternative integration   method, rather using one BioCro's built-solvers.","code":""},{"path":[]},{"path":"/reference/system_derivatives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Derivatives for Differential Quantities — system_derivatives","text":"","code":"# Note: Example 3 below may take several minutes to run. Patience is required!  # Example 1: calculating a single derivative using a soybean model  soybean_system <- system_derivatives(   soybean$parameters,   soybean_weather$'2002',   soybean$direct_modules,   soybean$differential_modules )  derivs <- soybean_system(0, unlist(soybean$initial_values), NULL)  # Example 2: a simple oscillator with only one module  times = seq(0, 5, by = 1) # times spaced by `timestep`  oscillator_system_derivatives <- system_derivatives(   list(     timestep = 1,     mass = 1,     spring_constant = 1   ),   data.frame(time = times),   c(),   'BioCro:harmonic_oscillator' )  result <- as.data.frame(deSolve::lsodes(   c(position=0, velocity=1),   times,   oscillator_system_derivatives ))  lattice::xyplot(   position + velocity ~ time,   type='l',   auto=TRUE,   data=result )   # Example 3: solving 500 hours of a soybean simulation. This will run slowly # compared to a regular call to `run_biocro`.  # \\donttest{  soybean_system <- system_derivatives(   soybean$parameters,   soybean_weather$'2002',   soybean$direct_modules,   soybean$differential_modules )  times = seq(from=0, to=500, by=1)  result <- as.data.frame(deSolve::lsodes(unlist(soybean$initial_values), times, soybean_system))  lattice::xyplot(Leaf + Stem ~ time, type='l', auto=TRUE, data=result)  # }"},{"path":"/reference/test_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Run BioCro module test cases — test_module","title":"Run BioCro module test cases — test_module","text":"Modules can tested using test cases, sets known outputs   correspond particular inputs. functions provide ways create   test cases test modules. test_module runs one test case module, returning error message   output match expected value. case helps define test cases module testing combining   required elements list correct names required   test_module. cases_from_csv helps define test cases module testing creating   list test cases csv file. Note module tests distinct model tests   described model_testing.","code":""},{"path":"/reference/test_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run BioCro module test cases — test_module","text":"","code":"test_module(module_name, case_to_test)    case(inputs, expected_outputs, description)    cases_from_csv(module_name, directory)"},{"path":"/reference/test_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run BioCro module test cases — test_module","text":"module_name string specifying one BioCro module, formatted like     library_name:local_module_name, library_name name     library contains module local name     local_module_name; fully-qualified module names can formed     manually module_paste. case_to_test list three named elements describe module test case: inputs: list module inputs, .e., list named             numeric elements corresponding module's input quantities. expected_outputs: list expected module outputs, .e.,             list named numeric elements corresponding expected values             module's output quantities. description: string describing test case, e.g.             \"temp tbase\". description succinct             contain newline characters.  inputs See corresponding entry test_case . expected_outputs See corresponding entry test_case . description See corresponding entry test_case . directory directory module test case files stored, e.g.     file.path('tests', 'module_test_cases')","code":""},{"path":"/reference/test_module.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run BioCro module test cases — test_module","text":"test_module function forms basis BioCro module testing   system. (See module_testing information.) functions   case cases_from_csv complementary test_module   help pass suitably-formatted test cases test_module.","code":""},{"path":"/reference/test_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run BioCro module test cases — test_module","text":"test_module test passes, empty string; otherwise, informative message     went wrong. case list three named elements (inputs, expected_outputs,     description) formed input arguments. cases_from_csv list test cases created case function     suitable passing test_module function.","code":""},{"path":[]},{"path":"/reference/test_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run BioCro module test cases — test_module","text":"","code":"# Example 1: Defining an individual test case for the 'BioCro' module library's # 'thermal_time_linear' module and running the test. This test will pass, so the # return value will be an empty string: `character(0)` test_module(   'BioCro:thermal_time_linear',   case(     list(fractional_doy = 101, sowing_fractional_doy = 100, tbase = 20, temp = 44),     list(TTc = 1.0),     'temp above tbase'   ) ) #> character(0)  # Example 2: Defining an individual test case for the 'BioCro' module library's # 'thermal_time_linear' module and running the test. This test will fail, so the # return value will be a message indicating the failure. test_module(   'BioCro:thermal_time_linear',   case(     list(fractional_doy = 101, sowing_fractional_doy = 100, tbase = 20, temp = 44),     list(TTc = 2.0),     'temp above tbase'   ) ) #> [1] \"Module `BioCro:thermal_time_linear` test case `temp above tbase`: calculated outputs do not match expected outputs\"  # Example 3: Loading a set of test cases from a file and running one of them. # Note: here we use the `initialize_csv` function first to ensure that there is # a properly defined test file in a temporary directory.  td <- tempdir()  module_name <- 'BioCro:thermal_time_linear' initialize_csv(module_name, td) #> [1] \"Did not initialize case file because `/tmp/RtmpLEUoCw/BioCro_thermal_time_linear.csv` already exists\" cases <- cases_from_csv(module_name, td) test_module(module_name, cases[[1]]) #> character(0)"},{"path":"/reference/test_module_library.html","id":null,"dir":"Reference","previous_headings":"","what":"Run module test cases for an entire BioCro module library — test_module_library","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"Modules can tested using test cases, sets known outputs   correspond particular inputs. test_module_library function   provides way run test cases modules BioCro module   library. Note module tests distinct model tests   described model_testing.","code":""},{"path":"/reference/test_module_library.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"","code":"test_module_library(library_name, directory, modules_to_skip = c())"},{"path":"/reference/test_module_library.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"library_name name BioCro module library. directory directory module test case files stored, e.g.     file.path('tests', 'module_test_cases') modules_to_skip vector local module name strings indicating modules     library tested. feature used sparingly,     since legitimate reasons skip module test.","code":""},{"path":"/reference/test_module_library.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"CSV file specified directory, test_module_library   determines corresponding module name checks make sure part   specified library. test cases modules library,   test_module_library throws error message containing   \"unexpected\" module test cases. module specified library, test_module_library loads   stored test cases specified directory runs test case,   storing information test failures issues may occur.   problems detected, test_module_library throws error   message describing issues. example function can used along   testthat package, see   tests/testthat/test.Modules.R.","code":""},{"path":"/reference/test_module_library.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"None","code":""},{"path":[]},{"path":"/reference/test_module_library.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run module test cases for an entire BioCro module library — test_module_library","text":"","code":"# Here we will initialize a module test case file in a temporary directory, and # then use `test_module_library` to test it. We will need to skip most of the # modules in the library, since we only have a test case for one of them.  td <- file.path(tempdir(), 'module_test_cases') dir.create(td, showWarnings = FALSE)  initialize_csv(   'BioCro:thermal_time_linear',   td,   nonstandard_inputs = list(temp = -1),   overwrite = TRUE ) #> [1] \"Case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_thermal_time_linear.csv` was initialized; any pre-existing file was overwritten\"  # Get a list of local module names, excluding the module that has a test case all_modules <- get_all_modules('BioCro') skip <- all_modules[all_modules != 'BioCro:thermal_time_linear'] skip <- gsub('BioCro:', '', skip)  test_module_library('BioCro', td, skip)  # If we attempt to test the entire library, we will get errors since only one # module actually has an associated case file tryCatch(   {     test_module_library('BioCro', td)   },   error = function(e) {print(e)} ) #> <simpleError in test_module_library(\"BioCro\", td): Problems occurred while testing modules from the `BioCro` library: #>   Module `BioCro:aba_decay`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_aba_decay.csv` does not exist #>   Module `BioCro:ball_berry`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_ball_berry.csv` does not exist #>   Module `BioCro:biomass_leaf_n_limitation`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_biomass_leaf_n_limitation.csv` does not exist #>   Module `BioCro:buck_swvp`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_buck_swvp.csv` does not exist #>   Module `BioCro:bucket_soil_drainage`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_bucket_soil_drainage.csv` does not exist #>   Module `BioCro:c3_assimilation`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_c3_assimilation.csv` does not exist #>   Module `BioCro:c3_canopy`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_c3_canopy.csv` does not exist #>   Module `BioCro:c3_leaf_photosynthesis`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_c3_leaf_photosynthesis.csv` does not exist #>   Module `BioCro:c3_parameters`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_c3_parameters.csv` does not exist #>   Module `BioCro:c4_assimilation`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_c4_assimilation.csv` does not exist #>   Module `BioCro:c4_canopy`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_c4_canopy.csv` does not exist #>   Module `BioCro:c4_leaf_photosynthesis`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_c4_leaf_photosynthesis.csv` does not exist #>   Module `BioCro:canopy_gbw_thornley`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_canopy_gbw_thornley.csv` does not exist #>   Module `BioCro:carbon_assimilation_to_biomass`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_carbon_assimilation_to_biomass.csv` does not exist #>   Module `BioCro:development_index`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_development_index.csv` does not exist #>   Module `BioCro:development_index_from_thermal_time`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_development_index_from_thermal_time.csv` does not exist #>   Module `BioCro:example_model_mass_gain`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_example_model_mass_gain.csv` does not exist #>   Module `BioCro:example_model_partitioning`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_example_model_partitioning.csv` does not exist #>   Module `BioCro:format_time`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_format_time.csv` does not exist #>   Module `BioCro:FvCB`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_FvCB.csv` does not exist #>   Module `BioCro:golden_ratio_hyperbola`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_golden_ratio_hyperbola.csv` does not exist #>   Module `BioCro:grimm_soybean_flowering`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_grimm_soybean_flowering.csv` does not exist #>   Module `BioCro:grimm_soybean_flowering_calculator`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_grimm_soybean_flowering_calculator.csv` does not exist #>   Module `BioCro:harmonic_energy`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_harmonic_energy.csv` does not exist #>   Module `BioCro:harmonic_oscillator`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_harmonic_oscillator.csv` does not exist #>   Module `BioCro:height_from_lai`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_height_from_lai.csv` does not exist #>   Module `BioCro:hyperbola_2d`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_hyperbola_2d.csv` does not exist #>   Module `BioCro:incident_shortwave_from_ground_par`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_incident_shortwave_from_ground_par.csv` does not exist #>   Module `BioCro:leaf_evapotranspiration`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_leaf_evapotranspiration.csv` does not exist #>   Module `BioCro:leaf_gbw_nikolov`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_leaf_gbw_nikolov.csv` does not exist #>   Module `BioCro:leaf_shape_factor`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_leaf_shape_factor.csv` does not exist #>   Module `BioCro:leaf_water_stress_exponential`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_leaf_water_stress_exponential.csv` does not exist #>   Module `BioCro:light_from_solar`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_light_from_solar.csv` does not exist #>   Module `BioCro:linear_vmax_from_leaf_n`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_linear_vmax_from_leaf_n.csv` does not exist #>   Module `BioCro:litter_cover`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_litter_cover.csv` does not exist #>   Module `BioCro:magic_clock`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_magic_clock.csv` does not exist #>   Module `BioCro:maintenance_respiration`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_maintenance_respiration.csv` does not exist #>   Module `BioCro:Module_1`: could not load test cases: Error in cases_from_csv(module, directory): Module test case file `/tmp/RtmpLEUoCw/module_test_cases/BioCro_Module_1.csv` does not exist #>   Module `BioCro:Module_2`: could not load te>"},{"path":"/reference/update_stored_model_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Updated stored result for a BioCro model test case — update_stored_model_results","title":"Updated stored result for a BioCro model test case — update_stored_model_results","text":"BioCro models can tested using test cases, sets known outputs   correspond particular inputs. update_stored_model_results   function stores model outputs can used testing. Note model tests distinct module tests   described module_testing.","code":""},{"path":"/reference/update_stored_model_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updated stored result for a BioCro model test case — update_stored_model_results","text":"","code":"update_stored_model_results(mtc)"},{"path":"/reference/update_stored_model_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updated stored result for a BioCro model test case — update_stored_model_results","text":"mtc single module test case, created using     model_test_case.","code":""},{"path":"/reference/update_stored_model_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Updated stored result for a BioCro model test case — update_stored_model_results","text":"update_stored_model_results function key part BioCro   model testing system. See model_testing information. function run model supplied drivers store   results appropriately-named CSV file specified directory. save space, values result rounded using   signif, number digits specified module   test case. Also, every Nth row retained, N value   row_interval specified module test case. saved result created function retrieved   run_model_test_cases checking test case.","code":""},{"path":"/reference/update_stored_model_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updated stored result for a BioCro model test case — update_stored_model_results","text":"function return value.","code":""},{"path":[]},{"path":"/reference/update_stored_model_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updated stored result for a BioCro model test case — update_stored_model_results","text":"","code":"# Define a test case for the miscanthus model and save the model output to a # temporary directory miscanthus_test_case <- model_test_case(     'miscanthus_x_giganteus',     miscanthus_x_giganteus,     get_growing_season_climate(weather$'2005'),     TRUE,     tempdir(),     'soil_evaporation_rate' )  update_stored_model_results(miscanthus_test_case)  # The output file's name will be based on the test case description fpath <- file.path(tempdir(), 'miscanthus_x_giganteus_simulation.csv')  # Check that the output file exists and then load it if (file.exists(fpath)) {   saved_result <- read.csv(fpath)   str(saved_result) } #> 'data.frame':\t179 obs. of  72 variables: #>  $ Grain                           : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ GrossAssim                      : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ GrossAssim_CO2                  : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ Leaf                            : num  0.0007 0.0471 0.0992 0.1539 0.21 ... #>  $ LeafLitter                      : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ LeafWS                          : num  1 0.925 0.867 0.794 0.708 ... #>  $ Rhizome                         : num  7 6.87 6.74 6.61 6.48 ... #>  $ RhizomeLitter                   : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ Root                            : num  0.007 0.0492 0.0972 0.1487 0.2031 ... #>  $ RootLitter                      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ Shell                           : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ Sp                              : num  1.7 1.7 1.7 1.7 1.7 1.7 1.7 1.7 1.7 1.7 ... #>  $ Stem                            : num  0.007 0.0591 0.1187 0.1828 0.2509 ... #>  $ StemLitter                      : num  0 0 0 0 0 0 0 0 0 0 ... #>  $ StomataWS                       : num  1 0.979 0.962 0.939 0.91 ... #>  $ TTc                             : num  0 7.42 18.75 33.16 50.71 ... #>  $ absorbed_longwave               : num  326 347 357 367 401 ... #>  $ alpha                           : num  0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 ... #>  $ canopy_assimilation_rate        : num  -2.03e-07 -1.76e-05 -4.37e-05 -7.78e-05 -1.66e-04 ... #>  $ canopy_assimilation_rate_CO2    : num  -0.000187 -0.016324 -0.04044 -0.072003 -0.15349 ... #>  $ canopy_conductance              : num  9.52e-05 6.28e-03 1.30e-02 1.97e-02 2.60e-02 ... #>  $ canopy_height                   : num  0.000895 0.060225 0.12684 0.19676 0.26847 ... #>  $ canopy_photorespiration_rate    : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ canopy_photorespiration_rate_CO2: int  0 0 0 0 0 0 0 0 0 0 ... #>  $ canopy_transpiration_rate       : num  0.000089 0.016389 0.040782 0.063025 0.12527 ... #>  $ cosine_zenith_angle             : num  -0.562 -0.558 -0.554 -0.55 -0.546 ... #>  $ cws1                            : num  0.32 0.31 0.302 0.291 0.277 ... #>  $ cws2                            : num  0.32 0.32 0.32 0.32 0.32 0.32 0.32 0.32 0.32 0.32 ... #>  $ doy                             : int  123 124 125 126 127 128 129 130 131 132 ... #>  $ fractional_doy                  : int  123 124 125 126 127 128 129 130 131 132 ... #>  $ gbw_canopy                      : num  0.005 0.005 0.0133 0.0162 0.0266 ... #>  $ gmst                            : num  20.7 20.8 20.9 20.9 21 ... #>  $ hour                            : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ julian_date                     : int  2453500 2453500 2453500 2453500 2453500 2453500 2453500 2453500 2453500 2453500 ... #>  $ kGrain                          : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ kLeaf                           : num  0.33 0.33 0.33 0.33 0.33 0.33 0.33 0.33 0.33 0.33 ... #>  $ kRhizome                        : num  -8e-04 -8e-04 -8e-04 -8e-04 -8e-04 -8e-04 -8e-04 -8e-04 -8e-04 -8e-04 ... #>  $ kRoot                           : num  0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 ... #>  $ kStem                           : num  0.37 0.37 0.37 0.37 0.37 0.37 0.37 0.37 0.37 0.37 ... #>  $ lai                             : num  0.00119 0.0801 0.1687 0.26169 0.35707 ... #>  $ leaf_senescence_index           : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ lha                             : num  183 183 183 183 183 ... #>  $ lmst                            : num  14.9 14.9 15 15.1 15.1 ... #>  $ ncalls                          : int  4296 4296 4296 4296 4296 4296 4296 4296 4296 4296 ... #>  $ net_assimilation_rate_grain     : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ net_assimilation_rate_leaf      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ net_assimilation_rate_rhizome   : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ net_assimilation_rate_root      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ net_assimilation_rate_stem      : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ precip                          : num  0 0 0 0 0 0 0 0 0 0.0106 ... #>  $ rh                              : num  0.68 0.34 0.44 0.51 0.54 0.59 0.62 0.84 0.7 0.94 ... #>  $ rhizome_senescence_index        : int  0 24 48 72 96 120 144 168 192 216 ... #>  $ root_senescence_index           : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ soil_evaporation_rate           : num  7.1 6.45 9.86 10.32 14.84 ... #>  $ soil_water_content              : num  0.32 0.318 0.315 0.313 0.309 ... #>  $ solar                           : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ solar_L                         : num  41.2 42.2 43.2 44.2 45.2 ... #>  $ solar_azimuth_angle             : num  363 363 363 363 363 ... #>  $ solar_dec                       : num  15.7 16 16.3 16.6 16.9 ... #>  $ solar_ell                       : num  42.9 43.9 44.9 45.8 46.8 ... #>  $ solar_ep                        : num  23.4 23.4 23.4 23.4 23.4 ... #>  $ solar_g                         : num  118 119 120 121 122 ... #>  $ solar_ra                        : num  40.5 41.4 42.4 43.4 44.3 ... #>  $ solar_zenith_angle              : num  124 124 124 123 123 ... #>  $ stem_senescence_index           : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ temp                            : num  2.12 6.52 8.53 10.4 16.8 16.8 18.1 16.7 20.5 10.7 ... #>  $ time                            : int  2928 2952 2976 3000 3024 3048 3072 3096 3120 3144 ... #>  $ time_zone_offset                : int  -6 -6 -6 -6 -6 -6 -6 -6 -6 -6 ... #>  $ vmax                            : int  39 39 39 39 39 39 39 39 39 39 ... #>  $ windspeed                       : num  3.22 1.84 4.06 4.33 6.48 3.69 4.98 4.84 4.58 9.68 ... #>  $ year                            : int  2005 2005 2005 2005 2005 2005 2005 2005 2005 2005 ... #>  $ nrow                            : int  4296 4296 4296 4296 4296 4296 4296 4296 4296 4296 ..."},{"path":"/reference/willow.html","id":null,"dir":"Reference","previous_headings":"","what":"Willow model definition — willow","title":"Willow model definition — willow","text":"Initial values, parameters, direct modules, differential modules,   differential equation solver can used run willow growth   simulations Champaign, Illinois locations. represent willow growth Champaign, IL, values must paired   Champaign weather data (cmi_weather_data). parameters   already include clay_loam values   soil_parameters dataset, appropriate soil type   Champaign. specifications, values photosynthetic parameters,   remain location; others, latitude longitude,   need change simulating crop growth different locations. Care   must taken understand input quantity attempting run   simulations places cultivars.","code":""},{"path":"/reference/willow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Willow model definition — willow","text":"","code":"willow"},{"path":"/reference/willow.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Willow model definition — willow","text":"list 5 named elements suitable passing   run_biocro, described help page   crop_model_definitions.","code":""},{"path":"/reference/willow.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Willow model definition — willow","text":"model originally described Wang et al. (2015)   [doi:10.1111/pce.12556 ]. Since original parameterization, behavior   several core modules changed bugs identified   fixed, model likely needs reparameterized can used   realistic simulations.","code":""},{"path":[]},{"path":"/news/index.html","id":"changes-in-biocro-version-320","dir":"Changelog","previous_headings":"","what":"Changes in BioCro version 3.2.0","title":"Changes in BioCro version 3.2.0","text":"CRAN release: 2025-03-07","code":""},{"path":"/news/index.html","id":"minor-user-facing-changes-3-2-0","dir":"Changelog","previous_headings":"","what":"Minor User-Facing Changes","title":"Changes in BioCro version 3.2.0","text":"Added maintenance respiration organ new module called BioCro:maintenance_respiration. Maintenance respiration modelled removing fraction dry biomass. fraction removed determined organ-specific “maintenance respiration coefficient” (mrc_leaf) follows Q10 temperature response. differs existing growth respiration applied stem root, separate canopy growth respiration can used rescale canopy assimilation rate. Separated specific leaf area (SLA) calculations BioCro:parameter_calculator module enable alternate approaches SLA. original method now available BioCro:sla_linear module, new logistic method added: BioCro:sla_logistic. stored crop model definitions updated use linear SLA module. Provided new direct module determining development index thermal time: BioCro:development_index_from_thermal_time. module alternative BioCro:thermal_time_development_rate_calculator differential module. C3 temperature response parameters longer hard-coded c3photoC(): now specialized structs temperature response parameters (c3_temperature_response_parameters) temperature-dependent values key photosynthetic parameters (c3_param_at_tleaf). also dedicated function calculating temperature-dependent parameter values: c3_temperature_response(). temperature response parameters now inputs several modules: BioCro:c3_assimilation, BioCro:c3_canopy, BioCro:c3_leaf_photosynthesis, also dedicated module calculating values C3 parameters leaf temperature: BioCro:c3_parameters. theta parameter renamed theta_0 better consistency polynomial_response() function input argument names. Added new vignette explaining key features BioCro’s multilayer canopy model, made several changes sunML() related functions ensure code matches model description vignette: Stopped calculating using “average” incident PPFD absorbed shortwave radiation leaves canopy. Stopped using “thick layer absorption” equation determining absorbed shortwave radiation within canopy, replacing thin layer absorption equation. Used simpler equation calculating fraction sunlit leaves. Used absorptivity value direct diffuse light. Used separate leaf transmittance reflectance values PAR NIR radiation within canopy, rather always assuming light two bands absorbed scattered equally; general, caused reduction absorbed shortwave energy leaves. Started calculating absorptivity 1 - R - T, R T leaf reflectance transmittance coefficients, respectively. ensures constraint + R + T = 1 always satisfied. Made several changes BioCro’s time handling: time variable now required sequential evenly spaced, time interval must equal timestep. consequence time timestep must units. change, necessary change definition time used crop models. Now expected expressed (fractional) number hours since midnight January 1, rather fractional day year. new module calculating doy hour time, called BioCro:format_time. module ensures doy always takes integer values output run_biocro. cases, old scripts calling run_biocro continue function following changes time correctly computed doy hour, BioCro:format_time automatically added module lists. redefinition time days hours may require changes plotting commands operations using time. cases, instances time old scripts can replaced fractional_doy, equivalent definition time used previous versions BioCro. Added new function generating C++ header files new module classes: module_write. Added several functions help model regression tests: compare_model_output, model_test_case, run_model_test_cases, update_stored_model_results. Previously, part tests/testthat/crop_model_testing_helper_functions.R. conversion CO2 assimilation biomass longer hard coded photosynthesis functions modules, c3CanAC(), CanAC(), BioCro:ten_layer_multilayer_canopy_integrator. functions modules now produce canopy assimilation rates molecular fluxes (units micromol CO2 / m^2 / s). new module called BioCro:carbon_assimilation_to_biomass now performs conversion rates dry biomass acculumation (units Mg / ha / hr). new parameter dry_biomass_per_carbon controls conversion. affected models behavior new module used dry_biomass_per_carbon set 30.026 g / mol. soybean model re-parameterized following changes module behavior.","code":""},{"path":"/news/index.html","id":"other-changes-3-2-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"Changes in BioCro version 3.2.0","text":"Consolidated temperature response functions single header file (src/module_library/temperature_response_functions.h) now includes arrhenius_exponential(), Q10_temperature_response(), johnson_eyring_williams_response(), polynomial_response(). developer documentation updated include section pull requests.","code":""},{"path":"/news/index.html","id":"bug-fixes-3-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"Changes in BioCro version 3.2.0","text":"Fixed incorrect year column values weather data. Fixed mistake CMI weather data 2023 copy 2022 data. ode_solver input argument run_biocro now checked ensure essential list elements provided.","code":""},{"path":"/news/index.html","id":"changes-in-biocro-version-313","dir":"Changelog","previous_headings":"","what":"Changes in BioCro Version 3.1.3","title":"Changes in BioCro Version 3.1.3","text":"CRAN release: 2024-04-30 first version BioCro accepted CRAN! changes since version 3.1.0 needed comply CRAN policies requirements. Several changes made reduce package size 20 MB less 5 MB: Crop model regression tests store 1 every 24 rows (one time point day). stored weather data rounded 3 fewer significant digits: solar values rounded nearest integer. rh values rounded 2 significant digits. stored crop model regression test data rounded 5 significant digits. previously-existing vignettes converted “web ,” meaning available pkgdown website included package . new vignette added (BioCro.Rmd) simply redirects readers documentation website. Moved included boost libraries inc src/inc since CRAN allow nonstandard top-level directory. paths shortened move. submodule repository also renamed biocro/boost biocro/inc. Added Boost organization authors copyright holder comply CRAN policies. Addressed missing-field-initializers warning compiler explicitly setting iterations 0 output rue_leaf_photosynthesis. Addressed mistake thermal_time_and_frost_senescence.h leaf death rate due frost unintentionally set 0 conditions. mistake caught compiler reported “ignoring return value function declared ‘nodiscard’ attribute” warning. Changed minimum version macOS checked R-CMD-check 3.6.0 4.2.0. CRAN now provides R versions 4.1.0 Mac. deSolve package built Mac R versions 4.2.0.","code":""},{"path":"/news/index.html","id":"changes-in-biocro-version-312","dir":"Changelog","previous_headings":"","what":"Changes in BioCro Version 3.1.2","title":"Changes in BioCro Version 3.1.2","text":"Variable-length arrays eliminated module library code replaced std::vector.","code":""},{"path":"/news/index.html","id":"changes-in-biocro-version-311","dir":"Changelog","previous_headings":"","what":"Changes in BioCro Version 3.1.1","title":"Changes in BioCro Version 3.1.1","text":"package date DESCRIPTION file updated meet CRAN submission requirements (must less one month old).","code":""},{"path":[]},{"path":"/news/index.html","id":"minor-user-facing-changes-3-1-0","dir":"Changelog","previous_headings":"","what":"Minor User-Facing Changes","title":"Changes in BioCro Version 3.1.0","text":"Another bug corrected src/module_library/c3photoC.cpp: photorespiration value Rp now calculated using value Ci current loop iteration (rather previous loop iteration). Modified testing-related functions warnings due mismatched framework versions trigger test failures: tryCatch call test_module now catches errors (warnings) evaluating module, test_plant_model (crop_model_testing_helper_functions.R) now uses expect_no_error instead expect_silent. Changed energy_par_content constant 0.219. conversion rate photon flux density (micromoles per square meter per second) energy flux density (joules per square meter per second watts per square meter) photosynthetically active radiation (PAR). equals 1/4.57, 4.57 commonly used constant convert PAR W m^-2 micromole m^-2 s^-1. Users take care ensure processing radiation data required prepare use BioCro, conversion factor used. See details Plant Growth Chamber Handbook. CHAPTER 1 – RADIATION– John C. Sager J. Craig McFarlane. Table 2, Pg 3 (https://www.controlledenvironments.org/wp-content/uploads/sites/6/2017/06/Ch01.pdf) C++ framework updated v1.1.3. Since framework included git submodule, necessary use --recurse-submodule flag using git pull, git checkout, git switch update local copy BioCro repository, move branch. Replaced inc/boost directory submodule pointing new biocro/boost repository. (unexported) lightME function removed R package, since functionality can reproduced using BioCro:solar_position_michalsky BioCro:shortwave_atmospheric_scattering modules.","code":""},{"path":"/news/index.html","id":"other-changes-3-1-0","dir":"Changelog","previous_headings":"","what":"Other Changes","title":"Changes in BioCro Version 3.1.0","text":"instances fabs unqualified abs replaced std::abs. use unqualified abs src/module_library/c3photoC.cpp causing test failures running BioCro Windows using R version 3.6.0. version adds description BioCro git branching model contribution_guidelines.Rmd clarifies process updating NEWS.md. R-CMD-check workflow changed following ways: check workflow run manually, two new input options: user can now choose whether run R CMD check –-cran option. Formerly, always used. user can choose whether throw error R CMD check failures. Formerly, error thrown whenever R CMD check failure either “warning” “error”. Output formerly shown manual runs “debug” checkbox selected now always shown. “debug” option changed “dry-run”, results debug output shown actual check, set-steps needed carry check, skipped. debug output steps grouped together possible, output shown earlier workflow. R-CMD-check workflow modified work around problem testing R version 3.6.0 Windows. platforms, now specify tested minimum R version 3.6.0 rather simply 3.6 order ensure actually testing minimum required R version specified DESCRIPTION file, rather later 3.6.x version version 3.6.3. Modified R-CMD-check workflow manual checked workflow runs automatically. also made default workflow run manually. GitHub workflows actions repository updated use latest versions GitHub 3rd-party actions. Updates related changing GitHub hosting organization “ebimodeling” “biocro”: references ebimodeling GitHub organization removed; references ebimodeling/biocro updated point biocro/biocro instead. occurred various places documentation. links online documentation replaced links https://biocro.github.io, (cases) instructions navigate particular section documentation interest. decreases dependence precise layout online documentation. changes clarifications documentation made well. Addressed format-security compiler warnings related calling Rf_error Rprintf without format specifier; format specifier \"%s\" always used printing value string variable.","code":""},{"path":[]},{"path":"/news/index.html","id":"minor-changes-3-0-2","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"Changes in BioCro Version 3.0.2","text":"version adds several missing references main README.","code":""},{"path":[]},{"path":"/news/index.html","id":"minor-changes-3-0-1","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"Changes in BioCro Version 3.0.1","text":"version pertains GitHub documentation workflow. changes publication location biocro/BioCro-documentation repository, changes triggers workflow automatic publication happens new release published. Additionally, symlink created link URL https://biocro.github.io/BioCro-documentation/latest/pkgdown/ https://biocro.github.io/BioCro-documentation//pkgdown/,  tag name new release.","code":""},{"path":[]},{"path":"/news/index.html","id":"major-changes-3-0-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"Changes in BioCro Version 3.0.0","text":"version introduces concept distinct module libraries, allowing users develop modules private create collections related modules. associated syntax change, modules must now specified using fully-qualified names include module library name local name module within library; example, module previously known thermal_time_linear must now referred BioCro:thermal_time_linear. R package representing BioCro module library must now four non-exported functions related accessing modules: get_all_modules, get_all_quantities, module_creators, framework_version. fully-qualified module name library_name:local_module_name passed function module_info, internal call library_name:::module_creators(module_name) made retrieve pointer module. Hence, library_name must module library package name. required part method passing C objects module library core BioCro framework via R; full details discussed . code src directory reorganized reflect division framework code, module code, “R--C” code discussed manuscript; now, src/framework contains core C++ code, src/module_library contains module code, “R--C” code can found directly src. C++ framework code src/framework moved separate repository licensed GNU LGPL; included BioCro R package repository Git submodule. allows us use permissive license BioCro R package still protecting code assembles solves models. Associated change, BioCro R package now licensed MIT license. See LICENSE.note details.","code":""},{"path":"/news/index.html","id":"minor-changes-3-0-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"Changes in BioCro Version 3.0.0","text":"soil_type_selector module removed replaced data object called soil_parameters. crop models previously set soil_type_indicator 6 choose soil parameter values, parameter replaced values soil_parameters$clay_loam. Crop model definitions now stored single lists rather multiple objects; example, soybean_parameters soybean_initial_values now stored two elements soybean list: soybean$parameters soybean$initial_values. function returned partial_run_biocro can now properly respond vectors lists named elements. Module testing functions added package namespace. Many small improvements made documentation module code src/module_library; changes numerous list .","code":""},{"path":"/news/index.html","id":"bug-fixes-3-0-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"Changes in BioCro Version 3.0.0","text":"elements arg_names input partial_run_biocro can now order; previously, required supplied order appear inputs partial_run_biocro, example, names initial values required come names parameters. arguments supplied wrong order, inputs function returned partial_run_biocro interpreted wrong order. bug sometimes caused last time point simulation contain NaN quantities fixed; related --bounds error accessing vector elements C++ function dynamical_system::update_drivers.","code":""},{"path":[]},{"path":"/news/index.html","id":"major-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"Changes in BioCro Version 2.0.0","text":"version major update design BioCro. version, subsets model called modules. design attempts meet following goals: Make easier reuse modules species, C3 photosynthesis modules. Make easier swap related modules comparison, example, comparing Farquhar-von-Caemmerer-Berry model radiation use efficiency model. Simplify parameter optimization sensitivity analysis providing interface readily useable common optimizers similar functions. details can found peer-reviewed publication silico Plants Lochocki et al., 2022 vignettes included package: Practical Guide BioCro Quantitative Comparison Two Photosynthesis Models Introduction BioCro Want Add Models PDF versions vignettes corresponding latest version BioCro can obtained online Articles menu BioCro documentation website.","code":""},{"path":"/news/index.html","id":"biocro-version-0951","dir":"Changelog","previous_headings":"","what":"BioCro Version 0.951","title":"BioCro Version 0.951","text":"last release original version BioCro, first described Miguez et al., 2009 updated years add crop models R functions. full change log version previous versions available document.","code":""}]
